// Package controllers is based on goa/hy_company.go generated by goagen automatically
package controllers

import (
	"fmt"
	"github.com/goadesign/goa"
	c "github.com/hiromaily/go-goa/ext/context"
	m "github.com/hiromaily/go-goa/ext/models"
	"github.com/hiromaily/go-goa/goa/app"
)

// HyCompanyController implements something.
type HyCompanyController struct {
	*goa.Controller
	ctx *c.Ctx
}

// NewHyCompanyController creates a HyCompany controller.
func NewHyCompanyController(service *goa.Service, ctx *c.Ctx) *HyCompanyController {
	return &HyCompanyController{
		Controller: service.NewController("HyCompanyController"),
		ctx:        ctx,
	}
}

// CompanyList runs the CompanyList action.
func (c *HyCompanyController) CompanyList(ctx *app.CompanyListHyCompanyContext) error {
	fmt.Println("[hy_company][CompanyList]")
	var companies []*app.CompanyIdname

	svc := &m.Company{Db: c.ctx.Db}
	err := svc.CompanyList(&companies)
	if err != nil {
		return err
	}

	if len(companies) == 0 {
		return ctx.NoContent()
	}

	res := app.CompanyIdnameCollection(companies)
	return ctx.OKIdname(res)
}

// GetCompanyGroup runs the GetCompanyGroup action.
func (c *HyCompanyController) GetCompanyGroup(ctx *app.GetCompanyGroupHyCompanyContext) error {
	fmt.Println("[hy_company][GetCompanyGroup]")
	var companies []*app.Company

	svc := &m.Company{Db: c.ctx.Db}

	err := svc.GetCompanyGroup(ctx.CompanyID, ctx.HqFlg, &companies)
	if err != nil {
		return err
	}

	if len(companies) == 0 {
		return ctx.NoContent()
	}

	res := app.CompanyCollection(companies)
	return ctx.OK(res)
}

// CreateCompany runs the CreateCompany action.
func (c *HyCompanyController) CreateCompany(ctx *app.CreateCompanyHyCompanyContext) error {
	fmt.Println("[hy_user][CreateCompany]")

	svc := &m.Company{Db: c.ctx.Db}
	companyID, err := svc.InsertCompany(ctx.Payload) //*CreateCompanyHyCompanyPayload
	if err != nil {
		return err
	}

	res := &app.CompanyID{CompanyID: &companyID}
	return ctx.OKId(res)
}

// UpdateCompany runs the UpdateCompany action.
func (c *HyCompanyController) UpdateCompany(ctx *app.UpdateCompanyHyCompanyContext) error {
	fmt.Println("[hy_user][UpdateCompany]")

	svc := &m.Company{Db: c.ctx.Db}
	err := svc.UpdateCompany(ctx.CompanyID, ctx.Payload)
	if err != nil {
		return err
	}

	res := &app.CompanyID{CompanyID: &ctx.CompanyID}
	return ctx.OKId(res)
}

// DeleteCompany runs the DeleteCompany action.
func (c *HyCompanyController) DeleteCompany(ctx *app.DeleteCompanyHyCompanyContext) error {
	fmt.Println("[hy_user][DeleteCompany]")

	svc := &m.Company{Db: c.ctx.Db}
	err := svc.DeleteCompany(ctx.CompanyID)
	if err != nil {
		return err
	}

	res := &app.CompanyID{CompanyID: &ctx.CompanyID}
	return ctx.OKId(res)
}
