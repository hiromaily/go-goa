// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.1.0-dirty
//
// API "api": hy_company Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
	"strconv"
)

// CompanyListHyCompanyPath computes a request path to the CompanyList action of hy_company.
func CompanyListHyCompanyPath() string {

	return fmt.Sprintf("/api/company")
}

// List all companies
func (c *Client) CompanyListHyCompany(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCompanyListHyCompanyRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCompanyListHyCompanyRequest create the request corresponding to the CompanyList action endpoint of the hy_company resource.
func (c *Client) NewCompanyListHyCompanyRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// CreateCompanyHyCompanyPayload is the hy_company CreateCompany action payload.
type CreateCompanyHyCompanyPayload struct {
	// Address of company
	Address string `form:"address" json:"address" xml:"address"`
	// Country of HQ
	Country string `form:"country" json:"country" xml:"country"`
	// Name of company
	Name string `form:"name" json:"name" xml:"name"`
}

// CreateCompanyHyCompanyPath computes a request path to the CreateCompany action of hy_company.
func CreateCompanyHyCompanyPath() string {

	return fmt.Sprintf("/api/company")
}

// Record new company
func (c *Client) CreateCompanyHyCompany(ctx context.Context, path string, payload *CreateCompanyHyCompanyPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateCompanyHyCompanyRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCompanyHyCompanyRequest create the request corresponding to the CreateCompany action endpoint of the hy_company resource.
func (c *Client) NewCreateCompanyHyCompanyRequest(ctx context.Context, path string, payload *CreateCompanyHyCompanyPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteCompanyHyCompanyPath computes a request path to the DeleteCompany action of hy_company.
func DeleteCompanyHyCompanyPath(companyID int) string {
	param0 := strconv.Itoa(companyID)

	return fmt.Sprintf("/api/company/%s", param0)
}

// DeleteCompanyHyCompany makes a request to the DeleteCompany action endpoint of the hy_company resource
func (c *Client) DeleteCompanyHyCompany(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteCompanyHyCompanyRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteCompanyHyCompanyRequest create the request corresponding to the DeleteCompany action endpoint of the hy_company resource.
func (c *Client) NewDeleteCompanyHyCompanyRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// GetCompanyHyCompanyPath computes a request path to the GetCompany action of hy_company.
func GetCompanyHyCompanyPath(companyID int) string {
	param0 := strconv.Itoa(companyID)

	return fmt.Sprintf("/api/company/%s", param0)
}

// Retrieve company with given id
func (c *Client) GetCompanyHyCompany(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetCompanyHyCompanyRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetCompanyHyCompanyRequest create the request corresponding to the GetCompany action endpoint of the hy_company resource.
func (c *Client) NewGetCompanyHyCompanyRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateCompanyHyCompanyPath computes a request path to the UpdateCompany action of hy_company.
func UpdateCompanyHyCompanyPath(companyID int) string {
	param0 := strconv.Itoa(companyID)

	return fmt.Sprintf("/api/company/%s", param0)
}

// UpdateCompanyHyCompany makes a request to the UpdateCompany action endpoint of the hy_company resource
func (c *Client) UpdateCompanyHyCompany(ctx context.Context, path string, payload *CompanyPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateCompanyHyCompanyRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateCompanyHyCompanyRequest create the request corresponding to the UpdateCompany action endpoint of the hy_company resource.
func (c *Client) NewUpdateCompanyHyCompanyRequest(ctx context.Context, path string, payload *CompanyPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType != "*/*" {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
