// Code generated by goa v3.7.13, DO NOT EDIT.
//
// hy_companybranch HTTP client CLI support package
//
// Command:
// $ goa gen resume/design

package client

import (
	"encoding/json"
	"fmt"
	hycompanybranch "resume/gen/hy_companybranch"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetCompanyBranchPayload builds the payload for the hy_companybranch
// getCompanyBranch endpoint from CLI flags.
func BuildGetCompanyBranchPayload(hyCompanybranchGetCompanyBranchCompanyBranchID string, hyCompanybranchGetCompanyBranchToken string) (*hycompanybranch.GetCompanyBranchPayload, error) {
	var err error
	var companyBranchID int
	{
		var v int64
		v, err = strconv.ParseInt(hyCompanybranchGetCompanyBranchCompanyBranchID, 10, strconv.IntSize)
		companyBranchID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for companyBranchID, must be INT")
		}
	}
	var token *string
	{
		if hyCompanybranchGetCompanyBranchToken != "" {
			token = &hyCompanybranchGetCompanyBranchToken
		}
	}
	v := &hycompanybranch.GetCompanyBranchPayload{}
	v.CompanyBranchID = &companyBranchID
	v.Token = token

	return v, nil
}

// BuildCreateCompanyBranchPayload builds the payload for the hy_companybranch
// createCompanyBranch endpoint from CLI flags.
func BuildCreateCompanyBranchPayload(hyCompanybranchCreateCompanyBranchBody string, hyCompanybranchCreateCompanyBranchToken string) (*hycompanybranch.CreateCompanyBranchPayload, error) {
	var err error
	var body CreateCompanyBranchRequestBody
	{
		err = json.Unmarshal([]byte(hyCompanybranchCreateCompanyBranchBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"Shinagawa Tokyo\",\n      \"company_id\": 2726521388268420732,\n      \"country_id\": 110\n   }'")
		}
		if body.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", body.CountryID, 1, true))
		}
		if body.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", body.CountryID, 999, false))
		}
		if utf8.RuneCountInString(body.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", body.Address, utf8.RuneCountInString(body.Address), 2, true))
		}
		if utf8.RuneCountInString(body.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", body.Address, utf8.RuneCountInString(body.Address), 80, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyCompanybranchCreateCompanyBranchToken != "" {
			token = &hyCompanybranchCreateCompanyBranchToken
		}
	}
	v := &hycompanybranch.CreateCompanyBranchPayload{
		CompanyID: body.CompanyID,
		CountryID: body.CountryID,
		Address:   body.Address,
	}
	v.Token = token

	return v, nil
}

// BuildUpdateCompanyBranchPayload builds the payload for the hy_companybranch
// updateCompanyBranch endpoint from CLI flags.
func BuildUpdateCompanyBranchPayload(hyCompanybranchUpdateCompanyBranchBody string, hyCompanybranchUpdateCompanyBranchCompanyBranchID string, hyCompanybranchUpdateCompanyBranchToken string) (*hycompanybranch.UpdateCompanyBranchPayload, error) {
	var err error
	var body UpdateCompanyBranchRequestBody
	{
		err = json.Unmarshal([]byte(hyCompanybranchUpdateCompanyBranchBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"Shinagawa Tokyo\",\n      \"country_id\": 110\n   }'")
		}
		if body.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", body.CountryID, 1, true))
		}
		if body.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", body.CountryID, 999, false))
		}
		if utf8.RuneCountInString(body.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", body.Address, utf8.RuneCountInString(body.Address), 2, true))
		}
		if utf8.RuneCountInString(body.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", body.Address, utf8.RuneCountInString(body.Address), 80, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var companyBranchID int
	{
		var v int64
		v, err = strconv.ParseInt(hyCompanybranchUpdateCompanyBranchCompanyBranchID, 10, strconv.IntSize)
		companyBranchID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for companyBranchID, must be INT")
		}
	}
	var token *string
	{
		if hyCompanybranchUpdateCompanyBranchToken != "" {
			token = &hyCompanybranchUpdateCompanyBranchToken
		}
	}
	v := &hycompanybranch.UpdateCompanyBranchPayload{
		CountryID: body.CountryID,
		Address:   body.Address,
	}
	v.CompanyBranchID = &companyBranchID
	v.Token = token

	return v, nil
}

// BuildDeleteCompanyBranchPayload builds the payload for the hy_companybranch
// deleteCompanyBranch endpoint from CLI flags.
func BuildDeleteCompanyBranchPayload(hyCompanybranchDeleteCompanyBranchCompanyBranchID string, hyCompanybranchDeleteCompanyBranchToken string) (*hycompanybranch.DeleteCompanyBranchPayload, error) {
	var err error
	var companyBranchID int
	{
		var v int64
		v, err = strconv.ParseInt(hyCompanybranchDeleteCompanyBranchCompanyBranchID, 10, strconv.IntSize)
		companyBranchID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for companyBranchID, must be INT")
		}
	}
	var token *string
	{
		if hyCompanybranchDeleteCompanyBranchToken != "" {
			token = &hyCompanybranchDeleteCompanyBranchToken
		}
	}
	v := &hycompanybranch.DeleteCompanyBranchPayload{}
	v.CompanyBranchID = &companyBranchID
	v.Token = token

	return v, nil
}
