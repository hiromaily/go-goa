// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_companybranch HTTP client encoders and decoders
//
// Command:
// $ goa gen resume/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	hycompanybranch "resume/gen/hy_companybranch"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetCompanyBranchRequest instantiates a HTTP request object with method
// and path set to call the "hy_companybranch" service "getCompanyBranch"
// endpoint
func (c *Client) BuildGetCompanyBranchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		companyBranchID int
	)
	{
		p, ok := v.(*hycompanybranch.GetCompanyBranchPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_companybranch", "getCompanyBranch", "*hycompanybranch.GetCompanyBranchPayload", v)
		}
		if p.CompanyBranchID != nil {
			companyBranchID = *p.CompanyBranchID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCompanyBranchHyCompanybranchPath(companyBranchID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_companybranch", "getCompanyBranch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetCompanyBranchRequest returns an encoder for requests sent to the
// hy_companybranch getCompanyBranch server.
func EncodeGetCompanyBranchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hycompanybranch.GetCompanyBranchPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_companybranch", "getCompanyBranch", "*hycompanybranch.GetCompanyBranchPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetCompanyBranchResponse returns a decoder for responses returned by
// the hy_companybranch getCompanyBranch endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeGetCompanyBranchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_companybranch", "getCompanyBranch", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateCompanyBranchRequest instantiates a HTTP request object with
// method and path set to call the "hy_companybranch" service
// "createCompanyBranch" endpoint
func (c *Client) BuildCreateCompanyBranchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCompanyBranchHyCompanybranchPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_companybranch", "createCompanyBranch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCompanyBranchRequest returns an encoder for requests sent to the
// hy_companybranch createCompanyBranch server.
func EncodeCreateCompanyBranchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hycompanybranch.CreateCompanyBranchPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_companybranch", "createCompanyBranch", "*hycompanybranch.CreateCompanyBranchPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateCompanyBranchRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("hy_companybranch", "createCompanyBranch", err)
		}
		return nil
	}
}

// DecodeCreateCompanyBranchResponse returns a decoder for responses returned
// by the hy_companybranch createCompanyBranch endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeCreateCompanyBranchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_companybranch", "createCompanyBranch", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCompanyBranchRequest instantiates a HTTP request object with
// method and path set to call the "hy_companybranch" service
// "updateCompanyBranch" endpoint
func (c *Client) BuildUpdateCompanyBranchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		companyBranchID int
	)
	{
		p, ok := v.(*hycompanybranch.UpdateCompanyBranchPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_companybranch", "updateCompanyBranch", "*hycompanybranch.UpdateCompanyBranchPayload", v)
		}
		if p.CompanyBranchID != nil {
			companyBranchID = *p.CompanyBranchID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCompanyBranchHyCompanybranchPath(companyBranchID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_companybranch", "updateCompanyBranch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCompanyBranchRequest returns an encoder for requests sent to the
// hy_companybranch updateCompanyBranch server.
func EncodeUpdateCompanyBranchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hycompanybranch.UpdateCompanyBranchPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_companybranch", "updateCompanyBranch", "*hycompanybranch.UpdateCompanyBranchPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateCompanyBranchRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("hy_companybranch", "updateCompanyBranch", err)
		}
		return nil
	}
}

// DecodeUpdateCompanyBranchResponse returns a decoder for responses returned
// by the hy_companybranch updateCompanyBranch endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeUpdateCompanyBranchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_companybranch", "updateCompanyBranch", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCompanyBranchRequest instantiates a HTTP request object with
// method and path set to call the "hy_companybranch" service
// "deleteCompanyBranch" endpoint
func (c *Client) BuildDeleteCompanyBranchRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		companyBranchID int
	)
	{
		p, ok := v.(*hycompanybranch.DeleteCompanyBranchPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_companybranch", "deleteCompanyBranch", "*hycompanybranch.DeleteCompanyBranchPayload", v)
		}
		if p.CompanyBranchID != nil {
			companyBranchID = *p.CompanyBranchID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCompanyBranchHyCompanybranchPath(companyBranchID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_companybranch", "deleteCompanyBranch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteCompanyBranchRequest returns an encoder for requests sent to the
// hy_companybranch deleteCompanyBranch server.
func EncodeDeleteCompanyBranchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hycompanybranch.DeleteCompanyBranchPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_companybranch", "deleteCompanyBranch", "*hycompanybranch.DeleteCompanyBranchPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteCompanyBranchResponse returns a decoder for responses returned
// by the hy_companybranch deleteCompanyBranch endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeDeleteCompanyBranchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_companybranch", "deleteCompanyBranch", resp.StatusCode, string(body))
		}
	}
}
