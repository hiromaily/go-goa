// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_companybranch HTTP server encoders and decoders
//
// Command:
// $ goa gen resume/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetCompanyBranchResponse returns an encoder for responses returned by
// the hy_companybranch getCompanyBranch endpoint.
func EncodeGetCompanyBranchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeGetCompanyBranchRequest returns a decoder for requests sent to the
// hy_companybranch getCompanyBranch endpoint.
func DecodeGetCompanyBranchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			companyBranchID int
			token           *string
			err             error

			params = mux.Vars(r)
		)
		{
			companyBranchIDRaw := params["company_branch_id"]
			v, err2 := strconv.ParseInt(companyBranchIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("companyBranchID", companyBranchIDRaw, "integer"))
			}
			companyBranchID = int(v)
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCompanyBranchPayload(companyBranchID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeCreateCompanyBranchResponse returns an encoder for responses returned
// by the hy_companybranch createCompanyBranch endpoint.
func EncodeCreateCompanyBranchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeCreateCompanyBranchRequest returns a decoder for requests sent to the
// hy_companybranch createCompanyBranch endpoint.
func DecodeCreateCompanyBranchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCompanyBranchRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCompanyBranchRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			companyID int
			token     *string

			params = mux.Vars(r)
		)
		{
			companyIDRaw := params["company_id"]
			v, err2 := strconv.ParseInt(companyIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("companyID", companyIDRaw, "integer"))
			}
			companyID = int(v)
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateCompanyBranchPayload(&body, companyID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeUpdateCompanyBranchResponse returns an encoder for responses returned
// by the hy_companybranch updateCompanyBranch endpoint.
func EncodeUpdateCompanyBranchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateCompanyBranchRequest returns a decoder for requests sent to the
// hy_companybranch updateCompanyBranch endpoint.
func DecodeUpdateCompanyBranchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateCompanyBranchRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateCompanyBranchRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			companyBranchID int
			token           *string

			params = mux.Vars(r)
		)
		{
			companyBranchIDRaw := params["company_branch_id"]
			v, err2 := strconv.ParseInt(companyBranchIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("companyBranchID", companyBranchIDRaw, "integer"))
			}
			companyBranchID = int(v)
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateCompanyBranchPayload(&body, companyBranchID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeDeleteCompanyBranchResponse returns an encoder for responses returned
// by the hy_companybranch deleteCompanyBranch endpoint.
func EncodeDeleteCompanyBranchResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteCompanyBranchRequest returns a decoder for requests sent to the
// hy_companybranch deleteCompanyBranch endpoint.
func DecodeDeleteCompanyBranchRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			companyBranchID int
			token           *string
			err             error

			params = mux.Vars(r)
		)
		{
			companyBranchIDRaw := params["company_branch_id"]
			v, err2 := strconv.ParseInt(companyBranchIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("companyBranchID", companyBranchIDRaw, "integer"))
			}
			companyBranchID = int(v)
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteCompanyBranchPayload(companyBranchID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}
