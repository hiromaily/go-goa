// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_companybranch HTTP server
//
// Command:
// $ goa gen resume/design

package server

import (
	"context"
	"net/http"
	hycompanybranch "resume/gen/hy_companybranch"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the hy_companybranch service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetCompanyBranch    http.Handler
	CreateCompanyBranch http.Handler
	UpdateCompanyBranch http.Handler
	DeleteCompanyBranch http.Handler
	CORS                http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the hy_companybranch service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *hycompanybranch.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetCompanyBranch", "GET", "/company/branch/{company_branch_id}"},
			{"CreateCompanyBranch", "POST", "/company/branch"},
			{"UpdateCompanyBranch", "PUT", "/company/branch/{company_branch_id}"},
			{"DeleteCompanyBranch", "DELETE", "/company/branch/{company_branch_id}"},
			{"CORS", "OPTIONS", "/company/branch/{company_branch_id}"},
			{"CORS", "OPTIONS", "/company/branch"},
		},
		GetCompanyBranch:    NewGetCompanyBranchHandler(e.GetCompanyBranch, mux, decoder, encoder, errhandler, formatter),
		CreateCompanyBranch: NewCreateCompanyBranchHandler(e.CreateCompanyBranch, mux, decoder, encoder, errhandler, formatter),
		UpdateCompanyBranch: NewUpdateCompanyBranchHandler(e.UpdateCompanyBranch, mux, decoder, encoder, errhandler, formatter),
		DeleteCompanyBranch: NewDeleteCompanyBranchHandler(e.DeleteCompanyBranch, mux, decoder, encoder, errhandler, formatter),
		CORS:                NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "hy_companybranch" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetCompanyBranch = m(s.GetCompanyBranch)
	s.CreateCompanyBranch = m(s.CreateCompanyBranch)
	s.UpdateCompanyBranch = m(s.UpdateCompanyBranch)
	s.DeleteCompanyBranch = m(s.DeleteCompanyBranch)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return hycompanybranch.MethodNames[:] }

// Mount configures the mux to serve the hy_companybranch endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetCompanyBranchHandler(mux, h.GetCompanyBranch)
	MountCreateCompanyBranchHandler(mux, h.CreateCompanyBranch)
	MountUpdateCompanyBranchHandler(mux, h.UpdateCompanyBranch)
	MountDeleteCompanyBranchHandler(mux, h.DeleteCompanyBranch)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the hy_companybranch endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetCompanyBranchHandler configures the mux to serve the
// "hy_companybranch" service "getCompanyBranch" endpoint.
func MountGetCompanyBranchHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanybranchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/company/branch/{company_branch_id}", f)
}

// NewGetCompanyBranchHandler creates a HTTP handler which loads the HTTP
// request and calls the "hy_companybranch" service "getCompanyBranch" endpoint.
func NewGetCompanyBranchHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCompanyBranchRequest(mux, decoder)
		encodeResponse = EncodeGetCompanyBranchResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getCompanyBranch")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_companybranch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateCompanyBranchHandler configures the mux to serve the
// "hy_companybranch" service "createCompanyBranch" endpoint.
func MountCreateCompanyBranchHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanybranchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/company/branch", f)
}

// NewCreateCompanyBranchHandler creates a HTTP handler which loads the HTTP
// request and calls the "hy_companybranch" service "createCompanyBranch"
// endpoint.
func NewCreateCompanyBranchHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCompanyBranchRequest(mux, decoder)
		encodeResponse = EncodeCreateCompanyBranchResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createCompanyBranch")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_companybranch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateCompanyBranchHandler configures the mux to serve the
// "hy_companybranch" service "updateCompanyBranch" endpoint.
func MountUpdateCompanyBranchHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanybranchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/company/branch/{company_branch_id}", f)
}

// NewUpdateCompanyBranchHandler creates a HTTP handler which loads the HTTP
// request and calls the "hy_companybranch" service "updateCompanyBranch"
// endpoint.
func NewUpdateCompanyBranchHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCompanyBranchRequest(mux, decoder)
		encodeResponse = EncodeUpdateCompanyBranchResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateCompanyBranch")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_companybranch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCompanyBranchHandler configures the mux to serve the
// "hy_companybranch" service "deleteCompanyBranch" endpoint.
func MountDeleteCompanyBranchHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanybranchOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/company/branch/{company_branch_id}", f)
}

// NewDeleteCompanyBranchHandler creates a HTTP handler which loads the HTTP
// request and calls the "hy_companybranch" service "deleteCompanyBranch"
// endpoint.
func NewDeleteCompanyBranchHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCompanyBranchRequest(mux, decoder)
		encodeResponse = EncodeDeleteCompanyBranchResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteCompanyBranch")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_companybranch")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service hy_companybranch.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleHyCompanybranchOrigin(h)
	mux.Handle("OPTIONS", "/company/branch/{company_branch_id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/company/branch", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleHyCompanybranchOrigin applies the CORS response headers corresponding
// to the origin for the service hy_companybranch.
func HandleHyCompanybranchOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
