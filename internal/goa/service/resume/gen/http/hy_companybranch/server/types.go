// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_companybranch HTTP server types
//
// Command:
// $ goa gen resume/design

package server

import (
	hycompanybranch "resume/gen/hy_companybranch"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateCompanyBranchRequestBody is the type of the "hy_companybranch" service
// "createCompanyBranch" endpoint HTTP request body.
type CreateCompanyBranchRequestBody struct {
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// UpdateCompanyBranchRequestBody is the type of the "hy_companybranch" service
// "updateCompanyBranch" endpoint HTTP request body.
type UpdateCompanyBranchRequestBody struct {
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// NewGetCompanyBranchPayload builds a hy_companybranch service
// getCompanyBranch endpoint payload.
func NewGetCompanyBranchPayload(companyDetailID int, token *string) *hycompanybranch.GetCompanyBranchPayload {
	v := &hycompanybranch.GetCompanyBranchPayload{}
	v.CompanyDetailID = &companyDetailID
	v.Token = token

	return v
}

// NewCreateCompanyBranchPayload builds a hy_companybranch service
// createCompanyBranch endpoint payload.
func NewCreateCompanyBranchPayload(body *CreateCompanyBranchRequestBody, companyID int, token *string) *hycompanybranch.CreateCompanyBranchPayload {
	v := &hycompanybranch.CreateCompanyBranchPayload{
		CountryID: *body.CountryID,
		Address:   *body.Address,
	}
	v.CompanyID = &companyID
	v.Token = token

	return v
}

// NewUpdateCompanyBranchPayload builds a hy_companybranch service
// updateCompanyBranch endpoint payload.
func NewUpdateCompanyBranchPayload(body *UpdateCompanyBranchRequestBody, companyDetailID int, token *string) *hycompanybranch.UpdateCompanyBranchPayload {
	v := &hycompanybranch.UpdateCompanyBranchPayload{
		CountryID: *body.CountryID,
		Address:   *body.Address,
	}
	v.CompanyDetailID = &companyDetailID
	v.Token = token

	return v
}

// NewDeleteCompanyBranchPayload builds a hy_companybranch service
// deleteCompanyBranch endpoint payload.
func NewDeleteCompanyBranchPayload(companyDetailID int, token *string) *hycompanybranch.DeleteCompanyBranchPayload {
	v := &hycompanybranch.DeleteCompanyBranchPayload{}
	v.CompanyDetailID = &companyDetailID
	v.Token = token

	return v
}

// ValidateCreateCompanyBranchRequestBody runs the validations defined on
// CreateCompanyBranchRequestBody
func ValidateCreateCompanyBranchRequestBody(body *CreateCompanyBranchRequestBody) (err error) {
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.CountryID != nil {
		if *body.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 1, true))
		}
	}
	if body.CountryID != nil {
		if *body.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 999, false))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 2, true))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 80, false))
		}
	}
	return
}

// ValidateUpdateCompanyBranchRequestBody runs the validations defined on
// UpdateCompanyBranchRequestBody
func ValidateUpdateCompanyBranchRequestBody(body *UpdateCompanyBranchRequestBody) (err error) {
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.CountryID != nil {
		if *body.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 1, true))
		}
	}
	if body.CountryID != nil {
		if *body.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 999, false))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 2, true))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 80, false))
		}
	}
	return
}
