// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_user HTTP server types
//
// Command:
// $ goa gen resume/design

package server

import (
	hyuser "resume/gen/hy_user"
	hyuserviews "resume/gen/hy_user/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateUserRequestBody is the type of the "hy_user" service "createUser"
// endpoint HTTP request body.
type CreateUserRequestBody struct {
	// User ID
	UserID *int `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// User name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UpdateUserRequestBody is the type of the "hy_user" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// User name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// UserResponseCollection is the type of the "hy_user" service "userList"
// endpoint HTTP response body.
type UserResponseCollection []*UserResponse

// UserResponseIDCollection is the type of the "hy_user" service "userList"
// endpoint HTTP response body.
type UserResponseIDCollection []*UserResponseID

// GetUserResponseBody is the type of the "hy_user" service "getUser" endpoint
// HTTP response body.
type GetUserResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
}

// GetUserResponseBodyID is the type of the "hy_user" service "getUser"
// endpoint HTTP response body.
type GetUserResponseBodyID struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// User name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
}

// UserResponseID is used to define fields on response body types.
type UserResponseID struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// NewUserResponseCollection builds the HTTP response body from the result of
// the "userList" endpoint of the "hy_user" service.
func NewUserResponseCollection(res hyuserviews.UserCollectionView) UserResponseCollection {
	body := make([]*UserResponse, len(res))
	for i, val := range res {
		body[i] = marshalHyuserviewsUserViewToUserResponse(val)
	}
	return body
}

// NewUserResponseIDCollection builds the HTTP response body from the result of
// the "userList" endpoint of the "hy_user" service.
func NewUserResponseIDCollection(res hyuserviews.UserCollectionView) UserResponseIDCollection {
	body := make([]*UserResponseID, len(res))
	for i, val := range res {
		body[i] = marshalHyuserviewsUserViewToUserResponseID(val)
	}
	return body
}

// NewGetUserResponseBody builds the HTTP response body from the result of the
// "getUser" endpoint of the "hy_user" service.
func NewGetUserResponseBody(res *hyuserviews.UserView) *GetUserResponseBody {
	body := &GetUserResponseBody{
		ID:       res.ID,
		UserName: *res.UserName,
		Email:    *res.Email,
	}
	return body
}

// NewGetUserResponseBodyID builds the HTTP response body from the result of
// the "getUser" endpoint of the "hy_user" service.
func NewGetUserResponseBodyID(res *hyuserviews.UserView) *GetUserResponseBodyID {
	body := &GetUserResponseBodyID{
		ID: res.ID,
	}
	return body
}

// NewUserListPayload builds a hy_user service userList endpoint payload.
func NewUserListPayload(token *string) *hyuser.UserListPayload {
	v := &hyuser.UserListPayload{}
	v.Token = token

	return v
}

// NewGetUserPayload builds a hy_user service getUser endpoint payload.
func NewGetUserPayload(userID int, token *string) *hyuser.GetUserPayload {
	v := &hyuser.GetUserPayload{}
	v.UserID = &userID
	v.Token = token

	return v
}

// NewCreateUserPayload builds a hy_user service createUser endpoint payload.
func NewCreateUserPayload(body *CreateUserRequestBody, token *string) *hyuser.CreateUserPayload {
	v := &hyuser.CreateUserPayload{
		UserID:   body.UserID,
		UserName: *body.UserName,
		Email:    *body.Email,
		Password: *body.Password,
	}
	v.Token = token

	return v
}

// NewUpdateUserPayload builds a hy_user service updateUser endpoint payload.
func NewUpdateUserPayload(body *UpdateUserRequestBody, userID int, token *string) *hyuser.UpdateUserPayload {
	v := &hyuser.UpdateUserPayload{
		UserName: *body.UserName,
		Email:    *body.Email,
		Password: *body.Password,
	}
	v.UserID = &userID
	v.Token = token

	return v
}

// NewDeleteUserPayload builds a hy_user service deleteUser endpoint payload.
func NewDeleteUserPayload(userID int, token *string) *hyuser.DeleteUserPayload {
	v := &hyuser.DeleteUserPayload{}
	v.UserID = &userID
	v.Token = token

	return v
}

// ValidateCreateUserRequestBody runs the validations defined on
// CreateUserRequestBody
func ValidateCreateUserRequestBody(body *CreateUserRequestBody) (err error) {
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.UserID != nil {
		if *body.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.userID", *body.UserID, 1, true))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 2, true))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 20, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 20, false))
		}
	}
	return
}

// ValidateUpdateUserRequestBody runs the validations defined on
// UpdateUserRequestBody
func ValidateUpdateUserRequestBody(body *UpdateUserRequestBody) (err error) {
	if body.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_name", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 2, true))
		}
	}
	if body.UserName != nil {
		if utf8.RuneCountInString(*body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", *body.UserName, utf8.RuneCountInString(*body.UserName), 20, false))
		}
	}
	if body.Email != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 8, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 20, false))
		}
	}
	return
}
