// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_user HTTP client CLI support package
//
// Command:
// $ goa gen resume/design

package client

import (
	"encoding/json"
	"fmt"
	hyuser "resume/gen/hy_user"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildUserListPayload builds the payload for the hy_user userList endpoint
// from CLI flags.
func BuildUserListPayload(hyUserUserListToken string) (*hyuser.UserListPayload, error) {
	var token *string
	{
		if hyUserUserListToken != "" {
			token = &hyUserUserListToken
		}
	}
	v := &hyuser.UserListPayload{}
	v.Token = token

	return v, nil
}

// BuildGetUserPayload builds the payload for the hy_user getUser endpoint from
// CLI flags.
func BuildGetUserPayload(hyUserGetUserUserID string, hyUserGetUserToken string) (*hyuser.GetUserPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(hyUserGetUserUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyUserGetUserToken != "" {
			token = &hyUserGetUserToken
		}
	}
	v := &hyuser.GetUserPayload{}
	v.UserID = &userID
	v.Token = token

	return v, nil
}

// BuildCreateUserPayload builds the payload for the hy_user createUser
// endpoint from CLI flags.
func BuildCreateUserPayload(hyUserCreateUserBody string, hyUserCreateUserToken string) (*hyuser.CreateUserPayload, error) {
	var err error
	var body CreateUserRequestBody
	{
		err = json.Unmarshal([]byte(hyUserCreateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"hy@gmail.com\",\n      \"password\": \"xxxxxxxx\",\n      \"user_name\": \"Hiroki\"\n   }'")
		}
		if utf8.RuneCountInString(body.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 2, true))
		}
		if utf8.RuneCountInString(body.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.user_name", body.UserName, utf8.RuneCountInString(body.UserName), 20, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if utf8.RuneCountInString(body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 8, true))
		}
		if utf8.RuneCountInString(body.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 20, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyUserCreateUserToken != "" {
			token = &hyUserCreateUserToken
		}
	}
	v := &hyuser.CreateUserPayload{
		UserName: body.UserName,
		Email:    body.Email,
		Password: body.Password,
	}
	v.Token = token

	return v, nil
}

// BuildUpdateUserPayload builds the payload for the hy_user updateUser
// endpoint from CLI flags.
func BuildUpdateUserPayload(hyUserUpdateUserBody string, hyUserUpdateUserUserID string, hyUserUpdateUserToken string) (*hyuser.UpdateUserPayload, error) {
	var err error
	var body UpdateUserRequestBody
	{
		err = json.Unmarshal([]byte(hyUserUpdateUserBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"hy@gmail.com\",\n      \"password\": \"xxxxxxxx\",\n      \"user_name\": \"Hiroki\"\n   }'")
		}
	}
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(hyUserUpdateUserUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyUserUpdateUserToken != "" {
			token = &hyUserUpdateUserToken
		}
	}
	v := &hyuser.UpdateUserPayload{
		UserName: body.UserName,
		Email:    body.Email,
		Password: body.Password,
	}
	v.UserID = &userID
	v.Token = token

	return v, nil
}

// BuildDeleteUserPayload builds the payload for the hy_user deleteUser
// endpoint from CLI flags.
func BuildDeleteUserPayload(hyUserDeleteUserUserID string, hyUserDeleteUserToken string) (*hyuser.DeleteUserPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(hyUserDeleteUserUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyUserDeleteUserToken != "" {
			token = &hyUserDeleteUserToken
		}
	}
	v := &hyuser.DeleteUserPayload{}
	v.UserID = &userID
	v.Token = token

	return v, nil
}
