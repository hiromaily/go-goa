// Code generated by goa v3.7.13, DO NOT EDIT.
//
// resume-api-server HTTP client CLI support package
//
// Command:
// $ goa gen resume/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	authc "resume/gen/http/auth/client"
	healthc "resume/gen/http/health/client"
	hycompanyc "resume/gen/http/hy_company/client"
	hycompanybranchc "resume/gen/http/hy_companybranch/client"
	hytechc "resume/gen/http/hy_tech/client"
	hyuserc "resume/gen/http/hy_user/client"
	hyuserworkhistoryc "resume/gen/http/hy_user_work_history/client"
	hyusertechc "resume/gen/http/hy_usertech/client"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `auth login
hy-company (company-list|get-company-group|create-company|update-company|delete-company)
hy-companybranch (get-company-branch|create-company-branch|update-company-branch|delete-company-branch)
health health
hy-tech (tech-list|get-tech|create-tech|update-tech|delete-tech)
hy-user (user-list|get-user|create-user|update-user|delete-user)
hy-usertech (get-user-like-tech|get-user-dis-like-tech)
hy-user-work-history get-user-work-history
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth login --body '{
      "email": "hy@gmail.com",
      "password": "xxxxxxxx"
   }'` + "\n" +
		os.Args[0] + ` hy-company company-list --token "Laudantium rerum natus atque."` + "\n" +
		os.Args[0] + ` hy-companybranch get-company-branch --company-branch-id 8356240613180501714 --token "Nam mollitia debitis illo."` + "\n" +
		os.Args[0] + ` health health` + "\n" +
		os.Args[0] + ` hy-tech tech-list --token "Nulla sit esse magni delectus."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		authLoginBodyFlag = authLoginFlags.String("body", "REQUIRED", "")

		hyCompanyFlags = flag.NewFlagSet("hy-company", flag.ContinueOnError)

		hyCompanyCompanyListFlags     = flag.NewFlagSet("company-list", flag.ExitOnError)
		hyCompanyCompanyListTokenFlag = hyCompanyCompanyListFlags.String("token", "", "")

		hyCompanyGetCompanyGroupFlags         = flag.NewFlagSet("get-company-group", flag.ExitOnError)
		hyCompanyGetCompanyGroupBodyFlag      = hyCompanyGetCompanyGroupFlags.String("body", "REQUIRED", "")
		hyCompanyGetCompanyGroupCompanyIDFlag = hyCompanyGetCompanyGroupFlags.String("company-id", "REQUIRED", "Company ID")
		hyCompanyGetCompanyGroupTokenFlag     = hyCompanyGetCompanyGroupFlags.String("token", "", "")

		hyCompanyCreateCompanyFlags     = flag.NewFlagSet("create-company", flag.ExitOnError)
		hyCompanyCreateCompanyBodyFlag  = hyCompanyCreateCompanyFlags.String("body", "REQUIRED", "")
		hyCompanyCreateCompanyTokenFlag = hyCompanyCreateCompanyFlags.String("token", "", "")

		hyCompanyUpdateCompanyFlags         = flag.NewFlagSet("update-company", flag.ExitOnError)
		hyCompanyUpdateCompanyBodyFlag      = hyCompanyUpdateCompanyFlags.String("body", "REQUIRED", "")
		hyCompanyUpdateCompanyCompanyIDFlag = hyCompanyUpdateCompanyFlags.String("company-id", "REQUIRED", "Company ID")
		hyCompanyUpdateCompanyTokenFlag     = hyCompanyUpdateCompanyFlags.String("token", "", "")

		hyCompanyDeleteCompanyFlags         = flag.NewFlagSet("delete-company", flag.ExitOnError)
		hyCompanyDeleteCompanyCompanyIDFlag = hyCompanyDeleteCompanyFlags.String("company-id", "REQUIRED", "Company ID")
		hyCompanyDeleteCompanyTokenFlag     = hyCompanyDeleteCompanyFlags.String("token", "", "")

		hyCompanybranchFlags = flag.NewFlagSet("hy-companybranch", flag.ContinueOnError)

		hyCompanybranchGetCompanyBranchFlags               = flag.NewFlagSet("get-company-branch", flag.ExitOnError)
		hyCompanybranchGetCompanyBranchCompanyBranchIDFlag = hyCompanybranchGetCompanyBranchFlags.String("company-branch-id", "REQUIRED", "Company branch ID")
		hyCompanybranchGetCompanyBranchTokenFlag           = hyCompanybranchGetCompanyBranchFlags.String("token", "", "")

		hyCompanybranchCreateCompanyBranchFlags     = flag.NewFlagSet("create-company-branch", flag.ExitOnError)
		hyCompanybranchCreateCompanyBranchBodyFlag  = hyCompanybranchCreateCompanyBranchFlags.String("body", "REQUIRED", "")
		hyCompanybranchCreateCompanyBranchTokenFlag = hyCompanybranchCreateCompanyBranchFlags.String("token", "", "")

		hyCompanybranchUpdateCompanyBranchFlags               = flag.NewFlagSet("update-company-branch", flag.ExitOnError)
		hyCompanybranchUpdateCompanyBranchBodyFlag            = hyCompanybranchUpdateCompanyBranchFlags.String("body", "REQUIRED", "")
		hyCompanybranchUpdateCompanyBranchCompanyBranchIDFlag = hyCompanybranchUpdateCompanyBranchFlags.String("company-branch-id", "REQUIRED", "Company branch ID")
		hyCompanybranchUpdateCompanyBranchTokenFlag           = hyCompanybranchUpdateCompanyBranchFlags.String("token", "", "")

		hyCompanybranchDeleteCompanyBranchFlags               = flag.NewFlagSet("delete-company-branch", flag.ExitOnError)
		hyCompanybranchDeleteCompanyBranchCompanyBranchIDFlag = hyCompanybranchDeleteCompanyBranchFlags.String("company-branch-id", "REQUIRED", "Company branch ID")
		hyCompanybranchDeleteCompanyBranchTokenFlag           = hyCompanybranchDeleteCompanyBranchFlags.String("token", "", "")

		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthHealthFlags = flag.NewFlagSet("health", flag.ExitOnError)

		hyTechFlags = flag.NewFlagSet("hy-tech", flag.ContinueOnError)

		hyTechTechListFlags     = flag.NewFlagSet("tech-list", flag.ExitOnError)
		hyTechTechListTokenFlag = hyTechTechListFlags.String("token", "", "")

		hyTechGetTechFlags      = flag.NewFlagSet("get-tech", flag.ExitOnError)
		hyTechGetTechTechIDFlag = hyTechGetTechFlags.String("tech-id", "REQUIRED", "Tech ID")
		hyTechGetTechTokenFlag  = hyTechGetTechFlags.String("token", "", "")

		hyTechCreateTechFlags     = flag.NewFlagSet("create-tech", flag.ExitOnError)
		hyTechCreateTechBodyFlag  = hyTechCreateTechFlags.String("body", "REQUIRED", "")
		hyTechCreateTechTokenFlag = hyTechCreateTechFlags.String("token", "", "")

		hyTechUpdateTechFlags      = flag.NewFlagSet("update-tech", flag.ExitOnError)
		hyTechUpdateTechBodyFlag   = hyTechUpdateTechFlags.String("body", "REQUIRED", "")
		hyTechUpdateTechTechIDFlag = hyTechUpdateTechFlags.String("tech-id", "REQUIRED", "Tech ID")
		hyTechUpdateTechTokenFlag  = hyTechUpdateTechFlags.String("token", "", "")

		hyTechDeleteTechFlags      = flag.NewFlagSet("delete-tech", flag.ExitOnError)
		hyTechDeleteTechTechIDFlag = hyTechDeleteTechFlags.String("tech-id", "REQUIRED", "Tech ID")
		hyTechDeleteTechTokenFlag  = hyTechDeleteTechFlags.String("token", "", "")

		hyUserFlags = flag.NewFlagSet("hy-user", flag.ContinueOnError)

		hyUserUserListFlags     = flag.NewFlagSet("user-list", flag.ExitOnError)
		hyUserUserListTokenFlag = hyUserUserListFlags.String("token", "", "")

		hyUserGetUserFlags      = flag.NewFlagSet("get-user", flag.ExitOnError)
		hyUserGetUserUserIDFlag = hyUserGetUserFlags.String("user-id", "REQUIRED", "User ID")
		hyUserGetUserTokenFlag  = hyUserGetUserFlags.String("token", "", "")

		hyUserCreateUserFlags     = flag.NewFlagSet("create-user", flag.ExitOnError)
		hyUserCreateUserBodyFlag  = hyUserCreateUserFlags.String("body", "REQUIRED", "")
		hyUserCreateUserTokenFlag = hyUserCreateUserFlags.String("token", "", "")

		hyUserUpdateUserFlags      = flag.NewFlagSet("update-user", flag.ExitOnError)
		hyUserUpdateUserBodyFlag   = hyUserUpdateUserFlags.String("body", "REQUIRED", "")
		hyUserUpdateUserUserIDFlag = hyUserUpdateUserFlags.String("user-id", "REQUIRED", "User ID")
		hyUserUpdateUserTokenFlag  = hyUserUpdateUserFlags.String("token", "", "")

		hyUserDeleteUserFlags      = flag.NewFlagSet("delete-user", flag.ExitOnError)
		hyUserDeleteUserUserIDFlag = hyUserDeleteUserFlags.String("user-id", "REQUIRED", "User ID")
		hyUserDeleteUserTokenFlag  = hyUserDeleteUserFlags.String("token", "", "")

		hyUsertechFlags = flag.NewFlagSet("hy-usertech", flag.ContinueOnError)

		hyUsertechGetUserLikeTechFlags      = flag.NewFlagSet("get-user-like-tech", flag.ExitOnError)
		hyUsertechGetUserLikeTechUserIDFlag = hyUsertechGetUserLikeTechFlags.String("user-id", "REQUIRED", "User ID")
		hyUsertechGetUserLikeTechTokenFlag  = hyUsertechGetUserLikeTechFlags.String("token", "", "")

		hyUsertechGetUserDisLikeTechFlags      = flag.NewFlagSet("get-user-dis-like-tech", flag.ExitOnError)
		hyUsertechGetUserDisLikeTechUserIDFlag = hyUsertechGetUserDisLikeTechFlags.String("user-id", "REQUIRED", "User ID")
		hyUsertechGetUserDisLikeTechTokenFlag  = hyUsertechGetUserDisLikeTechFlags.String("token", "", "")

		hyUserWorkHistoryFlags = flag.NewFlagSet("hy-user-work-history", flag.ContinueOnError)

		hyUserWorkHistoryGetUserWorkHistoryFlags      = flag.NewFlagSet("get-user-work-history", flag.ExitOnError)
		hyUserWorkHistoryGetUserWorkHistoryUserIDFlag = hyUserWorkHistoryGetUserWorkHistoryFlags.String("user-id", "REQUIRED", "User ID")
		hyUserWorkHistoryGetUserWorkHistoryTokenFlag  = hyUserWorkHistoryGetUserWorkHistoryFlags.String("token", "", "")
	)
	authFlags.Usage = authUsage
	authLoginFlags.Usage = authLoginUsage

	hyCompanyFlags.Usage = hyCompanyUsage
	hyCompanyCompanyListFlags.Usage = hyCompanyCompanyListUsage
	hyCompanyGetCompanyGroupFlags.Usage = hyCompanyGetCompanyGroupUsage
	hyCompanyCreateCompanyFlags.Usage = hyCompanyCreateCompanyUsage
	hyCompanyUpdateCompanyFlags.Usage = hyCompanyUpdateCompanyUsage
	hyCompanyDeleteCompanyFlags.Usage = hyCompanyDeleteCompanyUsage

	hyCompanybranchFlags.Usage = hyCompanybranchUsage
	hyCompanybranchGetCompanyBranchFlags.Usage = hyCompanybranchGetCompanyBranchUsage
	hyCompanybranchCreateCompanyBranchFlags.Usage = hyCompanybranchCreateCompanyBranchUsage
	hyCompanybranchUpdateCompanyBranchFlags.Usage = hyCompanybranchUpdateCompanyBranchUsage
	hyCompanybranchDeleteCompanyBranchFlags.Usage = hyCompanybranchDeleteCompanyBranchUsage

	healthFlags.Usage = healthUsage
	healthHealthFlags.Usage = healthHealthUsage

	hyTechFlags.Usage = hyTechUsage
	hyTechTechListFlags.Usage = hyTechTechListUsage
	hyTechGetTechFlags.Usage = hyTechGetTechUsage
	hyTechCreateTechFlags.Usage = hyTechCreateTechUsage
	hyTechUpdateTechFlags.Usage = hyTechUpdateTechUsage
	hyTechDeleteTechFlags.Usage = hyTechDeleteTechUsage

	hyUserFlags.Usage = hyUserUsage
	hyUserUserListFlags.Usage = hyUserUserListUsage
	hyUserGetUserFlags.Usage = hyUserGetUserUsage
	hyUserCreateUserFlags.Usage = hyUserCreateUserUsage
	hyUserUpdateUserFlags.Usage = hyUserUpdateUserUsage
	hyUserDeleteUserFlags.Usage = hyUserDeleteUserUsage

	hyUsertechFlags.Usage = hyUsertechUsage
	hyUsertechGetUserLikeTechFlags.Usage = hyUsertechGetUserLikeTechUsage
	hyUsertechGetUserDisLikeTechFlags.Usage = hyUsertechGetUserDisLikeTechUsage

	hyUserWorkHistoryFlags.Usage = hyUserWorkHistoryUsage
	hyUserWorkHistoryGetUserWorkHistoryFlags.Usage = hyUserWorkHistoryGetUserWorkHistoryUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		case "hy-company":
			svcf = hyCompanyFlags
		case "hy-companybranch":
			svcf = hyCompanybranchFlags
		case "health":
			svcf = healthFlags
		case "hy-tech":
			svcf = hyTechFlags
		case "hy-user":
			svcf = hyUserFlags
		case "hy-usertech":
			svcf = hyUsertechFlags
		case "hy-user-work-history":
			svcf = hyUserWorkHistoryFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "login":
				epf = authLoginFlags

			}

		case "hy-company":
			switch epn {
			case "company-list":
				epf = hyCompanyCompanyListFlags

			case "get-company-group":
				epf = hyCompanyGetCompanyGroupFlags

			case "create-company":
				epf = hyCompanyCreateCompanyFlags

			case "update-company":
				epf = hyCompanyUpdateCompanyFlags

			case "delete-company":
				epf = hyCompanyDeleteCompanyFlags

			}

		case "hy-companybranch":
			switch epn {
			case "get-company-branch":
				epf = hyCompanybranchGetCompanyBranchFlags

			case "create-company-branch":
				epf = hyCompanybranchCreateCompanyBranchFlags

			case "update-company-branch":
				epf = hyCompanybranchUpdateCompanyBranchFlags

			case "delete-company-branch":
				epf = hyCompanybranchDeleteCompanyBranchFlags

			}

		case "health":
			switch epn {
			case "health":
				epf = healthHealthFlags

			}

		case "hy-tech":
			switch epn {
			case "tech-list":
				epf = hyTechTechListFlags

			case "get-tech":
				epf = hyTechGetTechFlags

			case "create-tech":
				epf = hyTechCreateTechFlags

			case "update-tech":
				epf = hyTechUpdateTechFlags

			case "delete-tech":
				epf = hyTechDeleteTechFlags

			}

		case "hy-user":
			switch epn {
			case "user-list":
				epf = hyUserUserListFlags

			case "get-user":
				epf = hyUserGetUserFlags

			case "create-user":
				epf = hyUserCreateUserFlags

			case "update-user":
				epf = hyUserUpdateUserFlags

			case "delete-user":
				epf = hyUserDeleteUserFlags

			}

		case "hy-usertech":
			switch epn {
			case "get-user-like-tech":
				epf = hyUsertechGetUserLikeTechFlags

			case "get-user-dis-like-tech":
				epf = hyUsertechGetUserDisLikeTechFlags

			}

		case "hy-user-work-history":
			switch epn {
			case "get-user-work-history":
				epf = hyUserWorkHistoryGetUserWorkHistoryFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = authc.BuildLoginPayload(*authLoginBodyFlag)
			}
		case "hy-company":
			c := hycompanyc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "company-list":
				endpoint = c.CompanyList()
				data, err = hycompanyc.BuildCompanyListPayload(*hyCompanyCompanyListTokenFlag)
			case "get-company-group":
				endpoint = c.GetCompanyGroup()
				data, err = hycompanyc.BuildGetCompanyGroupPayload(*hyCompanyGetCompanyGroupBodyFlag, *hyCompanyGetCompanyGroupCompanyIDFlag, *hyCompanyGetCompanyGroupTokenFlag)
			case "create-company":
				endpoint = c.CreateCompany()
				data, err = hycompanyc.BuildCreateCompanyPayload(*hyCompanyCreateCompanyBodyFlag, *hyCompanyCreateCompanyTokenFlag)
			case "update-company":
				endpoint = c.UpdateCompany()
				data, err = hycompanyc.BuildUpdateCompanyPayload(*hyCompanyUpdateCompanyBodyFlag, *hyCompanyUpdateCompanyCompanyIDFlag, *hyCompanyUpdateCompanyTokenFlag)
			case "delete-company":
				endpoint = c.DeleteCompany()
				data, err = hycompanyc.BuildDeleteCompanyPayload(*hyCompanyDeleteCompanyCompanyIDFlag, *hyCompanyDeleteCompanyTokenFlag)
			}
		case "hy-companybranch":
			c := hycompanybranchc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-company-branch":
				endpoint = c.GetCompanyBranch()
				data, err = hycompanybranchc.BuildGetCompanyBranchPayload(*hyCompanybranchGetCompanyBranchCompanyBranchIDFlag, *hyCompanybranchGetCompanyBranchTokenFlag)
			case "create-company-branch":
				endpoint = c.CreateCompanyBranch()
				data, err = hycompanybranchc.BuildCreateCompanyBranchPayload(*hyCompanybranchCreateCompanyBranchBodyFlag, *hyCompanybranchCreateCompanyBranchTokenFlag)
			case "update-company-branch":
				endpoint = c.UpdateCompanyBranch()
				data, err = hycompanybranchc.BuildUpdateCompanyBranchPayload(*hyCompanybranchUpdateCompanyBranchBodyFlag, *hyCompanybranchUpdateCompanyBranchCompanyBranchIDFlag, *hyCompanybranchUpdateCompanyBranchTokenFlag)
			case "delete-company-branch":
				endpoint = c.DeleteCompanyBranch()
				data, err = hycompanybranchc.BuildDeleteCompanyBranchPayload(*hyCompanybranchDeleteCompanyBranchCompanyBranchIDFlag, *hyCompanybranchDeleteCompanyBranchTokenFlag)
			}
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "health":
				endpoint = c.Health()
				data = nil
			}
		case "hy-tech":
			c := hytechc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "tech-list":
				endpoint = c.TechList()
				data, err = hytechc.BuildTechListPayload(*hyTechTechListTokenFlag)
			case "get-tech":
				endpoint = c.GetTech()
				data, err = hytechc.BuildGetTechPayload(*hyTechGetTechTechIDFlag, *hyTechGetTechTokenFlag)
			case "create-tech":
				endpoint = c.CreateTech()
				data, err = hytechc.BuildCreateTechPayload(*hyTechCreateTechBodyFlag, *hyTechCreateTechTokenFlag)
			case "update-tech":
				endpoint = c.UpdateTech()
				data, err = hytechc.BuildUpdateTechPayload(*hyTechUpdateTechBodyFlag, *hyTechUpdateTechTechIDFlag, *hyTechUpdateTechTokenFlag)
			case "delete-tech":
				endpoint = c.DeleteTech()
				data, err = hytechc.BuildDeleteTechPayload(*hyTechDeleteTechTechIDFlag, *hyTechDeleteTechTokenFlag)
			}
		case "hy-user":
			c := hyuserc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "user-list":
				endpoint = c.UserList()
				data, err = hyuserc.BuildUserListPayload(*hyUserUserListTokenFlag)
			case "get-user":
				endpoint = c.GetUser()
				data, err = hyuserc.BuildGetUserPayload(*hyUserGetUserUserIDFlag, *hyUserGetUserTokenFlag)
			case "create-user":
				endpoint = c.CreateUser()
				data, err = hyuserc.BuildCreateUserPayload(*hyUserCreateUserBodyFlag, *hyUserCreateUserTokenFlag)
			case "update-user":
				endpoint = c.UpdateUser()
				data, err = hyuserc.BuildUpdateUserPayload(*hyUserUpdateUserBodyFlag, *hyUserUpdateUserUserIDFlag, *hyUserUpdateUserTokenFlag)
			case "delete-user":
				endpoint = c.DeleteUser()
				data, err = hyuserc.BuildDeleteUserPayload(*hyUserDeleteUserUserIDFlag, *hyUserDeleteUserTokenFlag)
			}
		case "hy-usertech":
			c := hyusertechc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-user-like-tech":
				endpoint = c.GetUserLikeTech()
				data, err = hyusertechc.BuildGetUserLikeTechPayload(*hyUsertechGetUserLikeTechUserIDFlag, *hyUsertechGetUserLikeTechTokenFlag)
			case "get-user-dis-like-tech":
				endpoint = c.GetUserDisLikeTech()
				data, err = hyusertechc.BuildGetUserDisLikeTechPayload(*hyUsertechGetUserDisLikeTechUserIDFlag, *hyUsertechGetUserDisLikeTechTokenFlag)
			}
		case "hy-user-work-history":
			c := hyuserworkhistoryc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-user-work-history":
				endpoint = c.GetUserWorkHistory()
				data, err = hyuserworkhistoryc.BuildGetUserWorkHistoryPayload(*hyUserWorkHistoryGetUserWorkHistoryUserIDFlag, *hyUserWorkHistoryGetUserWorkHistoryTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `The auth service performs login with JWT
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    login: Login implements login.

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login -body JSON

Login implements login.
    -body JSON: 

Example:
    %[1]s auth login --body '{
      "email": "hy@gmail.com",
      "password": "xxxxxxxx"
   }'
`, os.Args[0])
}

// hy-companyUsage displays the usage of the hy-company command and its
// subcommands.
func hyCompanyUsage() {
	fmt.Fprintf(os.Stderr, `The company service returns company data
Usage:
    %[1]s [globalflags] hy-company COMMAND [flags]

COMMAND:
    company-list: List all companies
    get-company-group: Retrieve company with given company_id
    create-company: Create new company
    update-company: Change company properties
    delete-company: Delete company

Additional help:
    %[1]s hy-company COMMAND --help
`, os.Args[0])
}
func hyCompanyCompanyListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-company company-list -token STRING

List all companies
    -token STRING: 

Example:
    %[1]s hy-company company-list --token "Laudantium rerum natus atque."
`, os.Args[0])
}

func hyCompanyGetCompanyGroupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-company get-company-group -body JSON -company-id INT -token STRING

Retrieve company with given company_id
    -body JSON: 
    -company-id INT: Company ID
    -token STRING: 

Example:
    %[1]s hy-company get-company-group --body '{
      "is_hq": "1"
   }' --company-id 6763730481617030857 --token "Voluptatem quibusdam."
`, os.Args[0])
}

func hyCompanyCreateCompanyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-company create-company -body JSON -token STRING

Create new company
    -body JSON: 
    -token STRING: 

Example:
    %[1]s hy-company create-company --body '{
      "address": "Shinagawa Tokyo",
      "country_id": 110,
      "name": "Company"
   }' --token "Quia quibusdam velit ipsum reiciendis laboriosam alias."
`, os.Args[0])
}

func hyCompanyUpdateCompanyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-company update-company -body JSON -company-id INT -token STRING

Change company properties
    -body JSON: 
    -company-id INT: Company ID
    -token STRING: 

Example:
    %[1]s hy-company update-company --body '{
      "address": "Shinagawa Tokyo",
      "country_id": 110,
      "name": "Company"
   }' --company-id 1934345337589372954 --token "Distinctio consequatur dolore eaque."
`, os.Args[0])
}

func hyCompanyDeleteCompanyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-company delete-company -company-id INT -token STRING

Delete company
    -company-id INT: Company ID
    -token STRING: 

Example:
    %[1]s hy-company delete-company --company-id 456580568775453558 --token "Et facere autem sunt saepe vero."
`, os.Args[0])
}

// hy-companybranchUsage displays the usage of the hy-companybranch command and
// its subcommands.
func hyCompanybranchUsage() {
	fmt.Fprintf(os.Stderr, `The company branch service returns company branch data
Usage:
    %[1]s [globalflags] hy-companybranch COMMAND [flags]

COMMAND:
    get-company-branch: Get company branch with given id
    create-company-branch: Create new company branch
    update-company-branch: Change company branch properties
    delete-company-branch: Delete company branch

Additional help:
    %[1]s hy-companybranch COMMAND --help
`, os.Args[0])
}
func hyCompanybranchGetCompanyBranchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-companybranch get-company-branch -company-branch-id INT -token STRING

Get company branch with given id
    -company-branch-id INT: Company branch ID
    -token STRING: 

Example:
    %[1]s hy-companybranch get-company-branch --company-branch-id 8356240613180501714 --token "Nam mollitia debitis illo."
`, os.Args[0])
}

func hyCompanybranchCreateCompanyBranchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-companybranch create-company-branch -body JSON -token STRING

Create new company branch
    -body JSON: 
    -token STRING: 

Example:
    %[1]s hy-companybranch create-company-branch --body '{
      "address": "Shinagawa Tokyo",
      "company_id": 2726521388268420732,
      "country_id": 110
   }' --token "Et sit et id."
`, os.Args[0])
}

func hyCompanybranchUpdateCompanyBranchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-companybranch update-company-branch -body JSON -company-branch-id INT -token STRING

Change company branch properties
    -body JSON: 
    -company-branch-id INT: Company branch ID
    -token STRING: 

Example:
    %[1]s hy-companybranch update-company-branch --body '{
      "address": "Shinagawa Tokyo",
      "country_id": 110
   }' --company-branch-id 6612241378560816194 --token "Ratione sit rem quam ut libero."
`, os.Args[0])
}

func hyCompanybranchDeleteCompanyBranchUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-companybranch delete-company-branch -company-branch-id INT -token STRING

Delete company branch
    -company-branch-id INT: Company branch ID
    -token STRING: 

Example:
    %[1]s hy-companybranch delete-company-branch --company-branch-id 7916228144157710414 --token "Alias molestiae quod."
`, os.Args[0])
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `health check
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    health: Health implements health.

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthHealthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health health

Health implements health.

Example:
    %[1]s health health
`, os.Args[0])
}

// hy-techUsage displays the usage of the hy-tech command and its subcommands.
func hyTechUsage() {
	fmt.Fprintf(os.Stderr, `The company service returns company data
Usage:
    %[1]s [globalflags] hy-tech COMMAND [flags]

COMMAND:
    tech-list: List all techs
    get-tech: get tech with given tech id
    create-tech: Create new tech
    update-tech: Change tech properties
    delete-tech: Delete tech

Additional help:
    %[1]s hy-tech COMMAND --help
`, os.Args[0])
}
func hyTechTechListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-tech tech-list -token STRING

List all techs
    -token STRING: 

Example:
    %[1]s hy-tech tech-list --token "Nulla sit esse magni delectus."
`, os.Args[0])
}

func hyTechGetTechUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-tech get-tech -tech-id INT -token STRING

get tech with given tech id
    -tech-id INT: Tech ID
    -token STRING: 

Example:
    %[1]s hy-tech get-tech --tech-id 3080866814670405151 --token "Necessitatibus dolor deserunt ipsum quia facere sed."
`, os.Args[0])
}

func hyTechCreateTechUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-tech create-tech -body JSON -token STRING

Create new tech
    -body JSON: 
    -token STRING: 

Example:
    %[1]s hy-tech create-tech --body '{
      "name": "Golang"
   }' --token "Pariatur molestiae dolor labore est impedit eius."
`, os.Args[0])
}

func hyTechUpdateTechUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-tech update-tech -body JSON -tech-id INT -token STRING

Change tech properties
    -body JSON: 
    -tech-id INT: Tech ID
    -token STRING: 

Example:
    %[1]s hy-tech update-tech --body '{
      "name": "Golang"
   }' --tech-id 7073270116576030512 --token "Odit expedita."
`, os.Args[0])
}

func hyTechDeleteTechUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-tech delete-tech -tech-id INT -token STRING

Delete tech
    -tech-id INT: Tech ID
    -token STRING: 

Example:
    %[1]s hy-tech delete-tech --tech-id 4357947039940698854 --token "Vel consequatur placeat dolor."
`, os.Args[0])
}

// hy-userUsage displays the usage of the hy-user command and its subcommands.
func hyUserUsage() {
	fmt.Fprintf(os.Stderr, `The user service returns user data
Usage:
    %[1]s [globalflags] hy-user COMMAND [flags]

COMMAND:
    user-list: List all users
    get-user: get user with given user id
    create-user: Create new user
    update-user: Change user properties
    delete-user: Delete user

Additional help:
    %[1]s hy-user COMMAND --help
`, os.Args[0])
}
func hyUserUserListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-user user-list -token STRING

List all users
    -token STRING: 

Example:
    %[1]s hy-user user-list --token "Dolorem ea tenetur qui."
`, os.Args[0])
}

func hyUserGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-user get-user -user-id INT -token STRING

get user with given user id
    -user-id INT: User ID
    -token STRING: 

Example:
    %[1]s hy-user get-user --user-id 6066361037280401988 --token "Est perspiciatis sapiente voluptatem a."
`, os.Args[0])
}

func hyUserCreateUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-user create-user -body JSON -token STRING

Create new user
    -body JSON: 
    -token STRING: 

Example:
    %[1]s hy-user create-user --body '{
      "email": "hy@gmail.com",
      "password": "xxxxxxxx",
      "userID": 6881235799436279149,
      "user_name": "Hiroki"
   }' --token "Error quaerat quia qui sed quas."
`, os.Args[0])
}

func hyUserUpdateUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-user update-user -body JSON -user-id INT -token STRING

Change user properties
    -body JSON: 
    -user-id INT: User ID
    -token STRING: 

Example:
    %[1]s hy-user update-user --body '{
      "email": "hy@gmail.com",
      "password": "xxxxxxxx",
      "user_name": "Hiroki"
   }' --user-id 2066295217219744343 --token "Vel iusto eos eaque molestias et earum."
`, os.Args[0])
}

func hyUserDeleteUserUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-user delete-user -user-id INT -token STRING

Delete user
    -user-id INT: User ID
    -token STRING: 

Example:
    %[1]s hy-user delete-user --user-id 6893851887812121090 --token "Sed fugit consequatur molestiae corporis necessitatibus."
`, os.Args[0])
}

// hy-usertechUsage displays the usage of the hy-usertech command and its
// subcommands.
func hyUsertechUsage() {
	fmt.Fprintf(os.Stderr, `The user service returns user data
Usage:
    %[1]s [globalflags] hy-usertech COMMAND [flags]

COMMAND:
    get-user-like-tech: get user's favorite techs
    get-user-dis-like-tech: get user's dislike techs

Additional help:
    %[1]s hy-usertech COMMAND --help
`, os.Args[0])
}
func hyUsertechGetUserLikeTechUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-usertech get-user-like-tech -user-id INT -token STRING

get user's favorite techs
    -user-id INT: User ID
    -token STRING: 

Example:
    %[1]s hy-usertech get-user-like-tech --user-id 584610433152659517 --token "Voluptatem fuga cum."
`, os.Args[0])
}

func hyUsertechGetUserDisLikeTechUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-usertech get-user-dis-like-tech -user-id INT -token STRING

get user's dislike techs
    -user-id INT: User ID
    -token STRING: 

Example:
    %[1]s hy-usertech get-user-dis-like-tech --user-id 1145112419808359427 --token "Labore illo totam."
`, os.Args[0])
}

// hy-user-work-historyUsage displays the usage of the hy-user-work-history
// command and its subcommands.
func hyUserWorkHistoryUsage() {
	fmt.Fprintf(os.Stderr, `The user service returns user data
Usage:
    %[1]s [globalflags] hy-user-work-history COMMAND [flags]

COMMAND:
    get-user-work-history: get user's work history

Additional help:
    %[1]s hy-user-work-history COMMAND --help
`, os.Args[0])
}
func hyUserWorkHistoryGetUserWorkHistoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hy-user-work-history get-user-work-history -user-id INT -token STRING

get user's work history
    -user-id INT: User ID
    -token STRING: 

Example:
    %[1]s hy-user-work-history get-user-work-history --user-id 7811006645577159351 --token "Qui eveniet consectetur laudantium."
`, os.Args[0])
}
