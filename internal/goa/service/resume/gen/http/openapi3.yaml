openapi: 3.0.3
info:
    title: resume API
    description: go-goa API with goa framework
    contact:
        name: hiromaily
        url: https://hiromaily.github.io/
        email: hiromaily@gmail.com
    license:
        name: MIT
        url: https://github.com/goadesign/goa/blob/master/LICENSE
    version: "1.0"
servers:
    - url: http://localhost:8080
paths:
    /assets/{*filepath}:
        get:
            tags:
                - static
            summary: Download docs/
            operationId: static#/assets/{*filepath}
            parameters:
                - name: filepath
                  in: path
                  description: Relative file path
                  required: true
            responses:
                "200":
                    description: File not found
                "404":
                    description: File not found
    /auth/login:
        post:
            tags:
                - auth
            summary: login auth
            description: Login and return jwt token
            operationId: auth#login
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequestBody'
                        example:
                            email: hy@gmail.com
                            password: xxxxxxxx
            responses:
                "200":
                    description: OK response.
                    headers:
                        Authorization:
                            description: JWT token
                            required: true
                            schema:
                                type: string
                                description: JWT token
                                example: token.string
                                pattern: ^Bearer [^ ]+$
                            example: token.string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Authorized'
                            example:
                                id: 10
                "401":
                    description: 'Unauthorized: Unauthorized response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
    /company:
        get:
            tags:
                - hy_company
            summary: companyList hy_company
            description: List all companies
            operationId: hy_company#companyList
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseIDCollection or #/components/schemas/CompanyResponseIdnameCollection'
                                $ref: '#/components/schemas/CompanyCollection'
                            example:
                                - address: Shinagawa Tokyo
                                  company_id: 10
                                  company_name: Company
                                  country_name: Est qui iure eligendi alias.
                                  created_at: "2017-03-10T15:00:00Z"
                                  updated_at: "2017-03-10T15:00:00Z"
                                - address: Shinagawa Tokyo
                                  company_id: 10
                                  company_name: Company
                                  country_name: Est qui iure eligendi alias.
                                  created_at: "2017-03-10T15:00:00Z"
                                  updated_at: "2017-03-10T15:00:00Z"
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
        post:
            tags:
                - hy_company
            summary: createCompany hy_company
            description: Create new company
            operationId: hy_company#createCompany
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateCompanyRequestBody'
                        example:
                            address: Shinagawa Tokyo
                            company_name: Company
                            country_id: 110
            responses:
                "201":
                    description: Created response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseID or #/components/schemas/CompanyResponseIdname'
                                $ref: '#/components/schemas/Company'
                            example:
                                address: Shinagawa Tokyo
                                company_id: 10
                                company_name: Company
                                country_name: Quis sit vel.
                                created_at: "2017-03-10T15:00:00Z"
                                updated_at: "2017-03-10T15:00:00Z"
                "400":
                    description: 'BadRequest: Bad Request response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
    /company/{company_id}:
        delete:
            tags:
                - hy_company
            summary: deleteCompany hy_company
            description: Delete company
            operationId: hy_company#deleteCompany
            parameters:
                - name: company_id
                  in: path
                  description: Company ID
                  required: true
                  schema:
                    type: integer
                    description: Company ID
                    example: 5677236963017093104
                    minimum: 1
                  example: 8166058884680761478
            responses:
                "200":
                    description: OK response.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
        get:
            tags:
                - hy_company
            summary: getCompany hy_company
            description: Retrieve company with given company_id
            operationId: hy_company#getCompany
            parameters:
                - name: company_id
                  in: path
                  description: Company ID
                  required: true
                  schema:
                    type: integer
                    description: Company ID
                    example: 4184350793505023335
                    minimum: 1
                  example: 7298225062677192023
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseID or #/components/schemas/CompanyResponseIdname'
                                $ref: '#/components/schemas/Company'
                            example:
                                address: Shinagawa Tokyo
                                company_id: 10
                                company_name: Company
                                country_name: Qui reprehenderit aut.
                                created_at: "2017-03-10T15:00:00Z"
                                updated_at: "2017-03-10T15:00:00Z"
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
        put:
            tags:
                - hy_company
            summary: updateCompany hy_company
            description: Update company data
            operationId: hy_company#updateCompany
            parameters:
                - name: company_id
                  in: path
                  description: Company ID
                  required: true
                  schema:
                    type: integer
                    description: Company ID
                    example: 2367788905373487708
                    minimum: 1
                  example: 6419065970720496558
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateCompanyRequestBody'
                        example:
                            address: Shinagawa Tokyo
                            company_name: Company
                            country_id: 110
            responses:
                "200":
                    description: OK response.
                "400":
                    description: 'BadRequest: Bad Request response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
    /health:
        get:
            tags:
                - health
            summary: health health
            operationId: health#health
            responses:
                "200":
                    description: OK response.
    /tech:
        get:
            tags:
                - hy_tech
            summary: techList hy_tech
            description: List all techs
            operationId: hy_tech#techList
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be #/components/schemas/TechResponseIDCollection'
                                $ref: '#/components/schemas/TechCollection'
                            example:
                                - created_at: "2017-03-10T15:00:00Z"
                                  id: 10
                                  name: Golang
                                  updated_at: "2017-03-10T15:00:00Z"
                                - created_at: "2017-03-10T15:00:00Z"
                                  id: 10
                                  name: Golang
                                  updated_at: "2017-03-10T15:00:00Z"
            security:
                - jwt_header_Authorization:
                    - api:access
        post:
            tags:
                - hy_tech
            summary: createTech hy_tech
            description: Create new tech
            operationId: hy_tech#createTech
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateTechRequestBody'
                        example:
                            name: Golang
            responses:
                "200":
                    description: OK response.
                "201":
                    description: Created response.
            security:
                - jwt_header_Authorization:
                    - api:access
    /tech/{techID}:
        delete:
            tags:
                - hy_tech
            summary: deleteTech hy_tech
            description: Delete tech
            operationId: hy_tech#deleteTech
            parameters:
                - name: techID
                  in: path
                  description: Tech ID
                  required: true
                  schema:
                    type: integer
                    description: Tech ID
                    example: 8003270703388328305
                    format: int64
                  example: 4130396077049506307
            responses:
                "200":
                    description: OK response.
            security:
                - jwt_header_Authorization:
                    - api:access
        get:
            tags:
                - hy_tech
            summary: getTech hy_tech
            description: get tech with given tech id
            operationId: hy_tech#getTech
            parameters:
                - name: techID
                  in: path
                  description: Tech ID
                  required: true
                  schema:
                    type: integer
                    description: Tech ID
                    example: 7148851887236450792
                    format: int64
                  example: 7429526940120957809
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseID or #/components/schemas/CompanyResponseIdname'
                                $ref: '#/components/schemas/Company'
                            example:
                                address: Shinagawa Tokyo
                                company_id: 10
                                company_name: Company
                                country_name: Quis voluptas non.
                                created_at: "2017-03-10T15:00:00Z"
                                updated_at: "2017-03-10T15:00:00Z"
            security:
                - jwt_header_Authorization:
                    - api:access
        put:
            tags:
                - hy_tech
            summary: updateTech hy_tech
            description: Change tech properties
            operationId: hy_tech#updateTech
            parameters:
                - name: techID
                  in: path
                  description: Tech ID
                  required: true
                  schema:
                    type: integer
                    description: Tech ID
                    example: 3594416558187196043
                    format: int64
                  example: 2206890179669570462
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateTechRequestBody'
                        example:
                            name: Golang
            responses:
                "200":
                    description: OK response.
            security:
                - jwt_header_Authorization:
                    - api:access
    /user:
        get:
            tags:
                - hy_user
            summary: userList hy_user
            description: List all users
            operationId: hy_user#userList
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be #/components/schemas/UserResponseIDCollection'
                                $ref: '#/components/schemas/UserCollection'
                            example:
                                - created_at: "2017-03-10T15:00:00Z"
                                  email: hy@gmail.com
                                  password: xxxxxxxx
                                  updated_at: "2017-03-10T15:00:00Z"
                                  user_id: 10
                                  user_name: Hiroki
                                - created_at: "2017-03-10T15:00:00Z"
                                  email: hy@gmail.com
                                  password: xxxxxxxx
                                  updated_at: "2017-03-10T15:00:00Z"
                                  user_id: 10
                                  user_name: Hiroki
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
        post:
            tags:
                - hy_user
            summary: createUser hy_user
            description: Create new user
            operationId: hy_user#createUser
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateUserRequestBody'
                        example:
                            email: hy@gmail.com
                            password: xxxxxxxx
                            user_name: Hiroki
            responses:
                "201":
                    description: Created response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be #/components/schemas/UserResponseID'
                                $ref: '#/components/schemas/User'
                            example:
                                created_at: "2017-03-10T15:00:00Z"
                                email: hy@gmail.com
                                password: xxxxxxxx
                                updated_at: "2017-03-10T15:00:00Z"
                                user_id: 10
                                user_name: Hiroki
                "400":
                    description: 'BadRequest: Bad Request response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
    /user/{user_id}:
        delete:
            tags:
                - hy_user
            summary: deleteUser hy_user
            description: Delete user
            operationId: hy_user#deleteUser
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                    type: integer
                    description: User ID
                    example: 3172866413800060998
                    minimum: 1
                  example: 5639337732304257506
            responses:
                "200":
                    description: OK response.
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
        get:
            tags:
                - hy_user
            summary: getUser hy_user
            description: Get user by given user id
            operationId: hy_user#getUser
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                    type: integer
                    description: User ID
                    example: 4639836790153810357
                    minimum: 1
                  example: 9156148972279721235
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be #/components/schemas/UserResponseID'
                                $ref: '#/components/schemas/User'
                            example:
                                created_at: "2017-03-10T15:00:00Z"
                                email: hy@gmail.com
                                password: xxxxxxxx
                                updated_at: "2017-03-10T15:00:00Z"
                                user_id: 10
                                user_name: Hiroki
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
        put:
            tags:
                - hy_user
            summary: updateUser hy_user
            description: Update user data
            operationId: hy_user#updateUser
            parameters:
                - name: user_id
                  in: path
                  description: User ID
                  required: true
                  schema:
                    type: integer
                    description: User ID
                    example: 803202534870497674
                    minimum: 1
                  example: 963218077044982780
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequestBody'
                        example:
                            email: hy@gmail.com
                            password: xxxxxxxx
                            user_name: Hiroki
            responses:
                "200":
                    description: OK response.
                "400":
                    description: 'BadRequest: Bad Request response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'NotFound: Not Found response.'
                    content:
                        application/vnd.goa.error:
                            schema:
                                $ref: '#/components/schemas/Error'
            security:
                - jwt_header_Authorization:
                    - api:access
    /user/{userID}/disliketech:
        get:
            tags:
                - hy_usertech
            summary: getUserDisLikeTech hy_usertech
            description: get user's dislike techs
            operationId: hy_usertech#getUserDisLikeTech
            parameters:
                - name: userID
                  in: path
                  description: User ID
                  required: true
                  schema:
                    type: integer
                    description: User ID
                    example: 8856826278083494555
                    minimum: 1
                  example: 7740664151266896307
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be #/components/schemas/UsertechResponseTechCollection'
                                $ref: '#/components/schemas/UsertechCollection'
                            example:
                                - id: 10
                                  tech_name: Golang
                                - id: 10
                                  tech_name: Golang
                                - id: 10
                                  tech_name: Golang
                                - id: 10
                                  tech_name: Golang
            security:
                - jwt_header_Authorization:
                    - api:access
    /user/{userID}/liketech:
        get:
            tags:
                - hy_usertech
            summary: getUserLikeTech hy_usertech
            description: get user's favorite techs
            operationId: hy_usertech#getUserLikeTech
            parameters:
                - name: userID
                  in: path
                  description: User ID
                  required: true
                  schema:
                    type: integer
                    description: User ID
                    example: 2728230755377463616
                    minimum: 1
                  example: 5633647381860274049
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                description: 'Response body may alternatively be #/components/schemas/UsertechResponseTechCollection'
                                $ref: '#/components/schemas/UsertechCollection'
                            example:
                                - id: 10
                                  tech_name: Golang
                                - id: 10
                                  tech_name: Golang
                                - id: 10
                                  tech_name: Golang
                                - id: 10
                                  tech_name: Golang
            security:
                - jwt_header_Authorization:
                    - api:access
    /user/{userID}/workhistory:
        get:
            tags:
                - hy_userWorkHistory
            summary: getUserWorkHistory hy_userWorkHistory
            description: get user's work history
            operationId: hy_userWorkHistory#getUserWorkHistory
            parameters:
                - name: userID
                  in: path
                  description: User ID
                  required: true
                  schema:
                    type: integer
                    description: User ID
                    example: 2495815827976346045
                    minimum: 1
                  example: 6968908288167102051
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserworkhistoryCollection'
                            example:
                                - company: Company
                                  country: nl
                                  description: '["Developed resume site for job seeking."]'
                                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                                  term: Jul 2017 - Aug 2017
                                  title: Developer
                                - company: Company
                                  country: nl
                                  description: '["Developed resume site for job seeking."]'
                                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                                  term: Jul 2017 - Aug 2017
                                  title: Developer
                                - company: Company
                                  country: nl
                                  description: '["Developed resume site for job seeking."]'
                                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                                  term: Jul 2017 - Aug 2017
                                  title: Developer
            security:
                - jwt_header_Authorization:
                    - api:access
components:
    schemas:
        Authorized:
            type: object
            properties:
                id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
            example:
                id: 10
            required:
                - id
        Company:
            type: object
            properties:
                address:
                    type: string
                    description: Company Address
                    example: Shinagawa Tokyo
                    minLength: 2
                    maxLength: 80
                company_id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
                company_name:
                    type: string
                    description: Company name
                    example: Company
                    minLength: 2
                    maxLength: 40
                country_name:
                    type: string
                    example: Iure distinctio.
                created_at:
                    type: string
                    description: Datetime
                    example: "2017-03-10T15:00:00Z"
                    format: date-time
                updated_at:
                    type: string
                    description: Datetime
                    example: "2017-03-10T15:00:00Z"
                    format: date-time
            description: A company information
            example:
                address: Shinagawa Tokyo
                company_id: 10
                company_name: Company
                country_name: Facere dolorem itaque officiis iusto.
                created_at: "2017-03-10T15:00:00Z"
                updated_at: "2017-03-10T15:00:00Z"
        CompanyCollection:
            type: array
            items:
                $ref: '#/components/schemas/Company'
            example:
                - address: Shinagawa Tokyo
                  company_id: 10
                  company_name: Company
                  country_name: Est qui iure eligendi alias.
                  created_at: "2017-03-10T15:00:00Z"
                  updated_at: "2017-03-10T15:00:00Z"
                - address: Shinagawa Tokyo
                  company_id: 10
                  company_name: Company
                  country_name: Est qui iure eligendi alias.
                  created_at: "2017-03-10T15:00:00Z"
                  updated_at: "2017-03-10T15:00:00Z"
                - address: Shinagawa Tokyo
                  company_id: 10
                  company_name: Company
                  country_name: Est qui iure eligendi alias.
                  created_at: "2017-03-10T15:00:00Z"
                  updated_at: "2017-03-10T15:00:00Z"
        CompanyResponseID:
            type: object
            properties:
                company_id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
            description: A company information (id view)
            example:
                company_id: 10
        CompanyResponseIDCollection:
            type: array
            items:
                $ref: '#/components/schemas/CompanyResponseID'
            description: CompanyListResponseBody is the result type for an array of CompanyResponse (id view)
            example:
                - company_id: 10
                - company_id: 10
                - company_id: 10
                - company_id: 10
        CompanyResponseIdname:
            type: object
            properties:
                company_id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
                company_name:
                    type: string
                    description: Company name
                    example: Company
                    minLength: 2
                    maxLength: 40
            description: A company information (idname view)
            example:
                company_id: 10
                company_name: Company
        CompanyResponseIdnameCollection:
            type: array
            items:
                $ref: '#/components/schemas/CompanyResponseIdname'
            description: CompanyListResponseBody is the result type for an array of CompanyResponse (idname view)
            example:
                - company_id: 10
                  company_name: Company
                - company_id: 10
                  company_name: Company
                - company_id: 10
                  company_name: Company
                - company_id: 10
                  company_name: Company
        CreateCompanyRequestBody:
            type: object
            properties:
                address:
                    type: string
                    description: Company Address
                    example: Shinagawa Tokyo
                    minLength: 2
                    maxLength: 80
                company_name:
                    type: string
                    description: Company name
                    example: Company
                    minLength: 2
                    maxLength: 40
                country_id:
                    type: integer
                    description: Country ID
                    example: 110
                    minimum: 1
                    maximum: 999
            example:
                address: Shinagawa Tokyo
                company_name: Company
                country_id: 110
            required:
                - company_name
                - country_id
                - address
        CreateTechRequestBody:
            type: object
            properties:
                name:
                    type: string
                    description: Tech name
                    example: Golang
                    minLength: 1
                    maxLength: 40
            example:
                name: Golang
            required:
                - name
        CreateUserRequestBody:
            type: object
            properties:
                email:
                    type: string
                    description: E-mail of user
                    example: hy@gmail.com
                    format: email
                password:
                    type: string
                    description: Password
                    example: xxxxxxxx
                    minLength: 8
                    maxLength: 20
                user_name:
                    type: string
                    description: User name
                    example: Hiroki
                    minLength: 2
                    maxLength: 20
            example:
                email: hy@gmail.com
                password: xxxxxxxx
                user_name: Hiroki
            required:
                - user_name
                - email
                - password
        Error:
            type: object
            properties:
                fault:
                    type: boolean
                    description: Is the error a server-side fault?
                    example: true
                id:
                    type: string
                    description: ID is a unique identifier for this particular occurrence of the problem.
                    example: 123abc
                message:
                    type: string
                    description: Message is a human-readable explanation specific to this occurrence of the problem.
                    example: parameter 'p' must be an integer
                name:
                    type: string
                    description: Name is the name of this class of errors.
                    example: bad_request
                temporary:
                    type: boolean
                    description: Is the error temporary?
                    example: true
                timeout:
                    type: boolean
                    description: Is the error a timeout?
                    example: false
            example:
                id: 3F1FKVRR
                message: Value of ID must be an integer
                name: bad_request
            required:
                - name
                - id
                - message
                - temporary
                - timeout
                - fault
        LoginRequestBody:
            type: object
            properties:
                email:
                    type: string
                    description: E-mail of user
                    example: hy@gmail.com
                    format: email
                password:
                    type: string
                    description: Password
                    example: xxxxxxxx
                    minLength: 8
                    maxLength: 20
            example:
                email: hy@gmail.com
                password: xxxxxxxx
            required:
                - email
                - password
        Tech:
            type: object
            properties:
                created_at:
                    type: string
                    description: Datetime
                    example: "2017-03-10T15:00:00Z"
                    format: date-time
                id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
                name:
                    type: string
                    description: Tech name
                    example: Golang
                    minLength: 1
                    maxLength: 40
                updated_at:
                    type: string
                    description: Datetime
                    example: "2017-03-10T15:00:00Z"
                    format: date-time
            description: A tech information
            example:
                created_at: "2017-03-10T15:00:00Z"
                id: 10
                name: Golang
                updated_at: "2017-03-10T15:00:00Z"
            required:
                - name
        TechCollection:
            type: array
            items:
                $ref: '#/components/schemas/Tech'
            example:
                - created_at: "2017-03-10T15:00:00Z"
                  id: 10
                  name: Golang
                  updated_at: "2017-03-10T15:00:00Z"
                - created_at: "2017-03-10T15:00:00Z"
                  id: 10
                  name: Golang
                  updated_at: "2017-03-10T15:00:00Z"
                - created_at: "2017-03-10T15:00:00Z"
                  id: 10
                  name: Golang
                  updated_at: "2017-03-10T15:00:00Z"
                - created_at: "2017-03-10T15:00:00Z"
                  id: 10
                  name: Golang
                  updated_at: "2017-03-10T15:00:00Z"
        TechResponseID:
            type: object
            properties:
                id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
            description: A tech information (id view)
            example:
                id: 10
        TechResponseIDCollection:
            type: array
            items:
                $ref: '#/components/schemas/TechResponseID'
            description: TechListResponseBody is the result type for an array of TechResponse (id view)
            example:
                - id: 10
                - id: 10
        UpdateCompanyRequestBody:
            type: object
            properties:
                address:
                    type: string
                    description: Company Address
                    example: Shinagawa Tokyo
                    minLength: 2
                    maxLength: 80
                company_name:
                    type: string
                    description: Company name
                    example: Company
                    minLength: 2
                    maxLength: 40
                country_id:
                    type: integer
                    description: Country ID
                    example: 110
                    minimum: 1
                    maximum: 999
            example:
                address: Shinagawa Tokyo
                company_name: Company
                country_id: 110
        UpdateUserRequestBody:
            type: object
            properties:
                email:
                    type: string
                    description: E-mail of user
                    example: hy@gmail.com
                    format: email
                password:
                    type: string
                    description: Password
                    example: xxxxxxxx
                    minLength: 8
                    maxLength: 20
                user_name:
                    type: string
                    description: User name
                    example: Hiroki
                    minLength: 2
                    maxLength: 20
            example:
                email: hy@gmail.com
                password: xxxxxxxx
                user_name: Hiroki
        User:
            type: object
            properties:
                created_at:
                    type: string
                    description: Datetime
                    example: "2017-03-10T15:00:00Z"
                    format: date-time
                email:
                    type: string
                    description: E-mail of user
                    example: hy@gmail.com
                    format: email
                password:
                    type: string
                    description: Password
                    example: xxxxxxxx
                    minLength: 8
                    maxLength: 20
                updated_at:
                    type: string
                    description: Datetime
                    example: "2017-03-10T15:00:00Z"
                    format: date-time
                user_id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
                user_name:
                    type: string
                    description: User name
                    example: Hiroki
                    minLength: 2
                    maxLength: 20
            description: User information
            example:
                created_at: "2017-03-10T15:00:00Z"
                email: hy@gmail.com
                password: xxxxxxxx
                updated_at: "2017-03-10T15:00:00Z"
                user_id: 10
                user_name: Hiroki
        UserCollection:
            type: array
            items:
                $ref: '#/components/schemas/User'
            example:
                - created_at: "2017-03-10T15:00:00Z"
                  email: hy@gmail.com
                  password: xxxxxxxx
                  updated_at: "2017-03-10T15:00:00Z"
                  user_id: 10
                  user_name: Hiroki
                - created_at: "2017-03-10T15:00:00Z"
                  email: hy@gmail.com
                  password: xxxxxxxx
                  updated_at: "2017-03-10T15:00:00Z"
                  user_id: 10
                  user_name: Hiroki
                - created_at: "2017-03-10T15:00:00Z"
                  email: hy@gmail.com
                  password: xxxxxxxx
                  updated_at: "2017-03-10T15:00:00Z"
                  user_id: 10
                  user_name: Hiroki
        UserResponseID:
            type: object
            properties:
                user_id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
            description: User information (id view)
            example:
                user_id: 10
        UserResponseIDCollection:
            type: array
            items:
                $ref: '#/components/schemas/UserResponseID'
            description: UserListResponseBody is the result type for an array of UserResponse (id view)
            example:
                - user_id: 10
                - user_id: 10
                - user_id: 10
        Usertech:
            type: object
            properties:
                id:
                    type: integer
                    description: Key ID
                    example: 10
                    minimum: 1
                tech_name:
                    type: string
                    description: Tech name
                    example: Golang
                    minLength: 1
                    maxLength: 40
            description: A user information
            example:
                id: 10
                tech_name: Golang
            required:
                - tech_name
        UsertechCollection:
            type: array
            items:
                $ref: '#/components/schemas/Usertech'
            example:
                - id: 10
                  tech_name: Golang
                - id: 10
                  tech_name: Golang
                - id: 10
                  tech_name: Golang
        UsertechResponseTech:
            type: object
            properties:
                tech_name:
                    type: string
                    description: Tech name
                    example: Golang
                    minLength: 1
                    maxLength: 40
            description: A user information (tech view)
            example:
                tech_name: Golang
            required:
                - tech_name
        UsertechResponseTechCollection:
            type: array
            items:
                $ref: '#/components/schemas/UsertechResponseTech'
            description: GetUserLikeTechResponseBody is the result type for an array of UsertechResponse (tech view)
            example:
                - tech_name: Golang
                - tech_name: Golang
                - tech_name: Golang
        Userworkhistory:
            type: object
            properties:
                company:
                    type: string
                    description: Company name
                    example: Company
                    minLength: 2
                    maxLength: 40
                country:
                    type: string
                    description: Country code
                    example: nl
                    minLength: 2
                    maxLength: 2
                description:
                    type: string
                    description: job description
                    example: '["Developed resume site for job seeking."]'
                    format: binary
                techs:
                    type: string
                    description: used techs
                    example: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                    format: binary
                term:
                    type: string
                    description: worked period
                    example: Jul 2017 - Aug 2017
                    minLength: 10
                    maxLength: 20
                title:
                    type: string
                    description: Job Title
                    example: Developer
                    minLength: 2
                    maxLength: 40
            description: A user information
            example:
                company: Company
                country: nl
                description: '["Developed resume site for job seeking."]'
                techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                term: Jul 2017 - Aug 2017
                title: Developer
            required:
                - title
                - company
                - country
        UserworkhistoryCollection:
            type: array
            items:
                $ref: '#/components/schemas/Userworkhistory'
            example:
                - company: Company
                  country: nl
                  description: '["Developed resume site for job seeking."]'
                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                  term: Jul 2017 - Aug 2017
                  title: Developer
                - company: Company
                  country: nl
                  description: '["Developed resume site for job seeking."]'
                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                  term: Jul 2017 - Aug 2017
                  title: Developer
                - company: Company
                  country: nl
                  description: '["Developed resume site for job seeking."]'
                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                  term: Jul 2017 - Aug 2017
                  title: Developer
                - company: Company
                  country: nl
                  description: '["Developed resume site for job seeking."]'
                  techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
                  term: Jul 2017 - Aug 2017
                  title: Developer
    securitySchemes:
        jwt_header_Authorization:
            type: http
            scheme: bearer
tags:
    - name: auth
      description: The auth service performs login with JWT
    - name: hy_company
      description: The company service returns company data
    - name: static
      description: The static service returns static files
    - name: hy_tech
      description: The company service returns company data
    - name: hy_user
      description: The user service returns user data
    - name: hy_usertech
      description: The user service returns user data
    - name: hy_userWorkHistory
      description: The user service returns user data
    - name: health
      description: health check
