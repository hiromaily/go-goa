openapi: 3.0.3
info:
  title: resume API
  description: go-goa API with goa framework
  contact:
    name: hiromaily
    url: https://hiromaily.github.io/
    email: hiromaily@gmail.com
  license:
    name: MIT
    url: https://github.com/goadesign/goa/blob/master/LICENSE
  version: "1.0"
servers:
- url: http://localhost:8080/api
paths:
  /*filepath:
    get:
      tags:
      - public
      summary: Download public/
      operationId: public#/*filepath
      responses:
        "200":
          description: File downloaded
  /company:
    get:
      tags:
      - hy_company
      summary: companyList hy_company
      description: List all companies
      operationId: hy_company#companyList
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseDetailidCollection,
                  #/components/schemas/CompanyResponseIDCollection or #/components/schemas/CompanyResponseIdnameCollection'
                $ref: '#/components/schemas/CompanyCollection'
              example:
              - address: Shinagawa Tokyo
                company_id: 10
                country_name: Aut est qui.
                created_at: "2017-03-10T15:00:00Z"
                hq_flg: Quas laudantium laudantium.
                id: 10
                name: Company
                updated_at: "2017-03-10T15:00:00Z"
              - address: Shinagawa Tokyo
                company_id: 10
                country_name: Aut est qui.
                created_at: "2017-03-10T15:00:00Z"
                hq_flg: Quas laudantium laudantium.
                id: 10
                name: Company
                updated_at: "2017-03-10T15:00:00Z"
      security:
      - jwt_header_Authorization:
        - api:access
    post:
      tags:
      - hy_company
      summary: createCompany hy_company
      description: Create new company
      operationId: hy_company#createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyRequestBody'
            example:
              address: Shinagawa Tokyo
              country_id: 110
              name: Company
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      security:
      - jwt_header_Authorization:
        - api:access
  /company/{companyID}:
    delete:
      tags:
      - hy_company
      summary: deleteCompany hy_company
      description: Delete company
      operationId: hy_company#deleteCompany
      parameters:
      - name: companyID
        in: path
        description: Company ID
        required: true
        schema:
          type: integer
          description: Company ID
          example: 8958573997563044879
          format: int64
        example: 6935787000632153389
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
    get:
      tags:
      - hy_company
      summary: getCompanyGroup hy_company
      description: Retrieve company with given company_id
      operationId: hy_company#getCompanyGroup
      parameters:
      - name: companyID
        in: path
        description: Company ID
        required: true
        schema:
          type: integer
          description: Company ID
          example: 2656058846715516806
          format: int64
        example: 1562921229189618774
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCompanyGroupRequestBody'
            example:
              hq_flg: "1"
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseDetailidCollection,
                  #/components/schemas/CompanyResponseIDCollection or #/components/schemas/CompanyResponseIdnameCollection'
                $ref: '#/components/schemas/CompanyCollection'
              example:
              - address: Shinagawa Tokyo
                company_id: 10
                country_name: Aut est qui.
                created_at: "2017-03-10T15:00:00Z"
                hq_flg: Quas laudantium laudantium.
                id: 10
                name: Company
                updated_at: "2017-03-10T15:00:00Z"
              - address: Shinagawa Tokyo
                company_id: 10
                country_name: Aut est qui.
                created_at: "2017-03-10T15:00:00Z"
                hq_flg: Quas laudantium laudantium.
                id: 10
                name: Company
                updated_at: "2017-03-10T15:00:00Z"
      security:
      - jwt_header_Authorization:
        - api:access
    put:
      tags:
      - hy_company
      summary: updateCompany hy_company
      description: Change company properties
      operationId: hy_company#updateCompany
      parameters:
      - name: companyID
        in: path
        description: Company ID
        required: true
        schema:
          type: integer
          description: Company ID
          example: 7946992711935194034
          format: int64
        example: 6592695931303571730
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyRequestBody'
            example:
              address: Shinagawa Tokyo
              country_id: 110
              name: Company
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
  /company/branch/{companyDetailID}:
    delete:
      tags:
      - hy_companybranch
      summary: deleteCompanyBranch hy_companybranch
      description: Delete company branch
      operationId: hy_companybranch#deleteCompanyBranch
      parameters:
      - name: companyDetailID
        in: path
        description: Company detail ID
        required: true
        schema:
          type: integer
          description: Company detail ID
          example: 1104135424519714373
          format: int64
        example: 5419122538831028252
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
    get:
      tags:
      - hy_companybranch
      summary: getCompanyBranch hy_companybranch
      description: Get company branch with given id
      operationId: hy_companybranch#getCompanyBranch
      parameters:
      - name: companyDetailID
        in: path
        description: Company detail ID
        required: true
        schema:
          type: integer
          description: Company detail ID
          example: 3242133180634172339
          format: int64
        example: 4305815294588818520
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
    put:
      tags:
      - hy_companybranch
      summary: updateCompanyBranch hy_companybranch
      description: Change company branch properties
      operationId: hy_companybranch#updateCompanyBranch
      parameters:
      - name: companyDetailID
        in: path
        description: Company detail ID
        required: true
        schema:
          type: integer
          description: Company detail ID
          example: 4101199312322278393
          format: int64
        example: 1312789485499666988
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyBranchRequestBody'
            example:
              address: Shinagawa Tokyo
              country_id: 110
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
  /company/branch/{companyID}:
    post:
      tags:
      - hy_companybranch
      summary: createCompanyBranch hy_companybranch
      description: Create new company branch
      operationId: hy_companybranch#createCompanyBranch
      parameters:
      - name: companyID
        in: path
        description: Company ID
        required: true
        schema:
          type: integer
          description: Company ID
          example: 5160794556760256367
          format: int64
        example: 7105680703910395230
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyBranchRequestBody'
            example:
              address: Shinagawa Tokyo
              country_id: 110
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      security:
      - jwt_header_Authorization:
        - api:access
  /health:
    get:
      tags:
      - health
      summary: health health
      operationId: health#health
      responses:
        "200":
          description: OK response.
  /login:
    post:
      tags:
      - auth
      summary: login auth
      operationId: auth#login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
            example:
              email: hy@gmail.com
              password: xxxxxxxx
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authorized'
              example:
                id: 10
                token: token.string
  /openapi.json:
    get:
      tags:
      - public
      summary: Download ../gen/http/openapi.json
      operationId: public#/openapi.json
      responses:
        "200":
          description: File downloaded
  /swagger-ui/*filepath:
    get:
      tags:
      - public
      summary: Download resources/swagger-ui/dist/
      operationId: public#/swagger-ui/*filepath
      responses:
        "200":
          description: File downloaded
  /tech:
    get:
      tags:
      - hy_tech
      summary: techList hy_tech
      description: List all techs
      operationId: hy_tech#techList
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be #/components/schemas/TechResponseIDCollection'
                $ref: '#/components/schemas/TechCollection'
              example:
              - created_at: "2017-03-10T15:00:00Z"
                id: 10
                name: Golang
                updated_at: "2017-03-10T15:00:00Z"
              - created_at: "2017-03-10T15:00:00Z"
                id: 10
                name: Golang
                updated_at: "2017-03-10T15:00:00Z"
              - created_at: "2017-03-10T15:00:00Z"
                id: 10
                name: Golang
                updated_at: "2017-03-10T15:00:00Z"
      security:
      - jwt_header_Authorization:
        - api:access
    post:
      tags:
      - hy_tech
      summary: createTech hy_tech
      description: Create new tech
      operationId: hy_tech#createTech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTechRequestBody'
            example:
              name: Golang
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      security:
      - jwt_header_Authorization:
        - api:access
  /tech/{techID}:
    delete:
      tags:
      - hy_tech
      summary: deleteTech hy_tech
      description: Delete tech
      operationId: hy_tech#deleteTech
      parameters:
      - name: techID
        in: path
        description: Tech ID
        required: true
        schema:
          type: integer
          description: Tech ID
          example: 8847253164913023580
          format: int64
        example: 7084011176868396483
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
    get:
      tags:
      - hy_tech
      summary: getTech hy_tech
      description: get tech with given tech id
      operationId: hy_tech#getTech
      parameters:
      - name: techID
        in: path
        description: Tech ID
        required: true
        schema:
          type: integer
          description: Tech ID
          example: 1366824251425322
          format: int64
        example: 5854107702879996898
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be one of #/components/schemas/CompanyResponseDetailid,
                  #/components/schemas/CompanyResponseID or #/components/schemas/CompanyResponseIdname'
                $ref: '#/components/schemas/Company'
              example:
                address: Shinagawa Tokyo
                company_id: 10
                country_name: Ut rerum architecto numquam quis eveniet veritatis.
                created_at: "2017-03-10T15:00:00Z"
                hq_flg: Qui sint id hic quis.
                id: 10
                name: Company
                updated_at: "2017-03-10T15:00:00Z"
      security:
      - jwt_header_Authorization:
        - api:access
    put:
      tags:
      - hy_tech
      summary: updateTech hy_tech
      description: Change tech properties
      operationId: hy_tech#updateTech
      parameters:
      - name: techID
        in: path
        description: Tech ID
        required: true
        schema:
          type: integer
          description: Tech ID
          example: 7230230423308254100
          format: int64
        example: 7970605398215243334
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTechRequestBody'
            example:
              name: Golang
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
  /user:
    get:
      tags:
      - hy_user
      summary: userList hy_user
      description: List all users
      operationId: hy_user#userList
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be #/components/schemas/UserResponseIDCollection'
                $ref: '#/components/schemas/UserCollection'
              example:
              - created_at: "2017-03-10T15:00:00Z"
                email: hy@gmail.com
                id: 10
                password: xxxxxxxx
                updated_at: "2017-03-10T15:00:00Z"
                user_name: Hiroki
              - created_at: "2017-03-10T15:00:00Z"
                email: hy@gmail.com
                id: 10
                password: xxxxxxxx
                updated_at: "2017-03-10T15:00:00Z"
                user_name: Hiroki
              - created_at: "2017-03-10T15:00:00Z"
                email: hy@gmail.com
                id: 10
                password: xxxxxxxx
                updated_at: "2017-03-10T15:00:00Z"
                user_name: Hiroki
      security:
      - jwt_header_Authorization:
        - api:access
    post:
      tags:
      - hy_user
      summary: createUser hy_user
      description: Create new user
      operationId: hy_user#createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestBody'
            example:
              email: hy@gmail.com
              password: xxxxxxxx
              user_name: Hiroki
              userID: 6881235799436279149
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      security:
      - jwt_header_Authorization:
        - api:access
  /user/{userID}:
    delete:
      tags:
      - hy_user
      summary: deleteUser hy_user
      description: Delete user
      operationId: hy_user#deleteUser
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          description: User ID
          example: 4639867356943733611
          minimum: 1
        example: 1967994081909438884
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
    get:
      tags:
      - hy_user
      summary: getUser hy_user
      description: get user with given user id
      operationId: hy_user#getUser
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          description: User ID
          example: 2757422062948952116
          minimum: 1
        example: 6763947644746848902
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be #/components/schemas/UserResponseID'
                $ref: '#/components/schemas/User'
              example:
                created_at: "2017-03-10T15:00:00Z"
                email: hy@gmail.com
                id: 10
                password: xxxxxxxx
                updated_at: "2017-03-10T15:00:00Z"
                user_name: Hiroki
      security:
      - jwt_header_Authorization:
        - api:access
    put:
      tags:
      - hy_user
      summary: updateUser hy_user
      description: Change user properties
      operationId: hy_user#updateUser
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          description: User ID
          example: 6134424320549833261
          minimum: 1
        example: 8029950485983377783
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestBody'
            example:
              email: hy@gmail.com
              password: xxxxxxxx
              user_name: Hiroki
      responses:
        "200":
          description: OK response.
      security:
      - jwt_header_Authorization:
        - api:access
  /user/{userID}/disliketech:
    get:
      tags:
      - hy_usertech
      summary: getUserDisLikeTech hy_usertech
      description: get user's dislike techs
      operationId: hy_usertech#getUserDisLikeTech
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          description: User ID
          example: 469196482056083391
          minimum: 1
        example: 5210892081005084633
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be #/components/schemas/UsertechResponseTechCollection'
                $ref: '#/components/schemas/UsertechCollection'
              example:
              - id: 10
                tech_name: Golang
              - id: 10
                tech_name: Golang
              - id: 10
                tech_name: Golang
              - id: 10
                tech_name: Golang
      security:
      - jwt_header_Authorization:
        - api:access
  /user/{userID}/liketech:
    get:
      tags:
      - hy_usertech
      summary: getUserLikeTech hy_usertech
      description: get user's favorite techs
      operationId: hy_usertech#getUserLikeTech
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          description: User ID
          example: 241664589225917859
          minimum: 1
        example: 7383113135744317999
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                description: 'Response body may alternatively be #/components/schemas/UsertechResponseTechCollection'
                $ref: '#/components/schemas/UsertechCollection'
              example:
              - id: 10
                tech_name: Golang
              - id: 10
                tech_name: Golang
              - id: 10
                tech_name: Golang
              - id: 10
                tech_name: Golang
      security:
      - jwt_header_Authorization:
        - api:access
  /user/{userID}/workhistory:
    get:
      tags:
      - hy_userWorkHistory
      summary: getUserWorkHistory hy_userWorkHistory
      description: get user's work history
      operationId: hy_userWorkHistory#getUserWorkHistory
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        schema:
          type: integer
          description: User ID
          example: 2524512431078699448
          minimum: 1
        example: 6135738360653216341
      responses:
        "200":
          description: OK response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserworkhistoryCollection'
              example:
              - company: Company
                country: nl
                description: '["Developed resume site for job seeking."]'
                techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker",
                  "Travis-CI"]'
                term: Jul 2017 - Aug 2017
                title: Developer
              - company: Company
                country: nl
                description: '["Developed resume site for job seeking."]'
                techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker",
                  "Travis-CI"]'
                term: Jul 2017 - Aug 2017
                title: Developer
      security:
      - jwt_header_Authorization:
        - api:access
components:
  schemas:
    Authorized:
      type: object
      properties:
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        token:
          type: string
          description: JWT token
          example: token.string
      example:
        id: 10
        token: token.string
      required:
      - token
      - id
    Company:
      type: object
      properties:
        address:
          type: string
          description: Company Address
          example: Shinagawa Tokyo
          minLength: 2
          maxLength: 80
        company_id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        country_name:
          type: string
          example: Qui deleniti ut accusantium corrupti sunt aut.
        created_at:
          type: string
          description: Datetime
          example: "2017-03-10T15:00:00Z"
          format: date-time
        hq_flg:
          type: string
          example: Voluptas deleniti consequatur sint unde quo dolor.
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        name:
          type: string
          description: Company name
          example: Company
          minLength: 2
          maxLength: 40
        updated_at:
          type: string
          description: Datetime
          example: "2017-03-10T15:00:00Z"
          format: date-time
      description: A company information
      example:
        address: Shinagawa Tokyo
        company_id: 10
        country_name: Animi repellendus et corrupti.
        created_at: "2017-03-10T15:00:00Z"
        hq_flg: Voluptatum atque.
        id: 10
        name: Company
        updated_at: "2017-03-10T15:00:00Z"
      required:
      - name
      - address
    CompanyCollection:
      type: array
      items:
        $ref: '#/components/schemas/Company'
      example:
      - address: Shinagawa Tokyo
        company_id: 10
        country_name: Aut est qui.
        created_at: "2017-03-10T15:00:00Z"
        hq_flg: Quas laudantium laudantium.
        id: 10
        name: Company
        updated_at: "2017-03-10T15:00:00Z"
      - address: Shinagawa Tokyo
        company_id: 10
        country_name: Aut est qui.
        created_at: "2017-03-10T15:00:00Z"
        hq_flg: Quas laudantium laudantium.
        id: 10
        name: Company
        updated_at: "2017-03-10T15:00:00Z"
      - address: Shinagawa Tokyo
        company_id: 10
        country_name: Aut est qui.
        created_at: "2017-03-10T15:00:00Z"
        hq_flg: Quas laudantium laudantium.
        id: 10
        name: Company
        updated_at: "2017-03-10T15:00:00Z"
    CompanyResponseDetailid:
      type: object
      properties:
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
      description: A company information (detailid view)
      example:
        id: 10
    CompanyResponseDetailidCollection:
      type: array
      items:
        $ref: '#/components/schemas/CompanyResponseDetailid'
      description: CompanyListResponseBody is the result type for an array of CompanyResponse
        (detailid view)
      example:
      - id: 10
      - id: 10
    CompanyResponseID:
      type: object
      properties:
        company_id:
          type: integer
          description: ID
          example: 10
          minimum: 1
      description: A company information (id view)
      example:
        company_id: 10
    CompanyResponseIDCollection:
      type: array
      items:
        $ref: '#/components/schemas/CompanyResponseID'
      description: CompanyListResponseBody is the result type for an array of CompanyResponse
        (id view)
      example:
      - company_id: 10
      - company_id: 10
      - company_id: 10
    CompanyResponseIdname:
      type: object
      properties:
        company_id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        name:
          type: string
          description: Company name
          example: Company
          minLength: 2
          maxLength: 40
      description: A company information (idname view)
      example:
        company_id: 10
        name: Company
      required:
      - name
    CompanyResponseIdnameCollection:
      type: array
      items:
        $ref: '#/components/schemas/CompanyResponseIdname'
      description: CompanyListResponseBody is the result type for an array of CompanyResponse
        (idname view)
      example:
      - company_id: 10
        name: Company
      - company_id: 10
        name: Company
      - company_id: 10
        name: Company
    CreateCompanyBranchRequestBody:
      type: object
      properties:
        address:
          type: string
          description: Company Address
          example: Shinagawa Tokyo
          minLength: 2
          maxLength: 80
        country_id:
          type: integer
          description: Country ID
          example: 110
          minimum: 1
          maximum: 999
      example:
        address: Shinagawa Tokyo
        country_id: 110
      required:
      - country_id
      - address
    CreateCompanyRequestBody:
      type: object
      properties:
        address:
          type: string
          description: Company Address
          example: Shinagawa Tokyo
          minLength: 2
          maxLength: 80
        country_id:
          type: integer
          description: Country ID
          example: 110
          minimum: 1
          maximum: 999
        name:
          type: string
          description: Company name
          example: Company
          minLength: 2
          maxLength: 40
      example:
        address: Shinagawa Tokyo
        country_id: 110
        name: Company
      required:
      - name
      - country_id
      - address
    CreateTechRequestBody:
      type: object
      properties:
        name:
          type: string
          description: Tech name
          example: Golang
          minLength: 1
          maxLength: 40
      example:
        name: Golang
      required:
      - name
    CreateUserRequestBody:
      type: object
      properties:
        email:
          type: string
          description: E-mail of user
          example: hy@gmail.com
          format: email
        password:
          type: string
          description: Password
          example: xxxxxxxx
          minLength: 8
          maxLength: 20
        user_name:
          type: string
          description: User name
          example: Hiroki
          minLength: 2
          maxLength: 20
        userID:
          type: integer
          description: User ID
          example: 8406851483559826524
          minimum: 1
      example:
        email: hy@gmail.com
        password: xxxxxxxx
        user_name: Hiroki
        userID: 8450211974137012543
      required:
      - user_name
      - email
      - password
    GetCompanyGroupRequestBody:
      type: object
      properties:
        hq_flg:
          type: string
          description: Head Quarters flag
          example: "0"
          enum:
          - "1"
          - "0"
      example:
        hq_flg: "0"
    LoginRequestBody:
      type: object
      properties:
        email:
          type: string
          description: E-mail of user
          example: hy@gmail.com
          format: email
        password:
          type: string
          description: Password
          example: xxxxxxxx
          minLength: 8
          maxLength: 20
      example:
        email: hy@gmail.com
        password: xxxxxxxx
      required:
      - email
      - password
    Tech:
      type: object
      properties:
        created_at:
          type: string
          description: Datetime
          example: "2017-03-10T15:00:00Z"
          format: date-time
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        name:
          type: string
          description: Tech name
          example: Golang
          minLength: 1
          maxLength: 40
        updated_at:
          type: string
          description: Datetime
          example: "2017-03-10T15:00:00Z"
          format: date-time
      description: A tech information
      example:
        created_at: "2017-03-10T15:00:00Z"
        id: 10
        name: Golang
        updated_at: "2017-03-10T15:00:00Z"
      required:
      - name
    TechCollection:
      type: array
      items:
        $ref: '#/components/schemas/Tech'
      example:
      - created_at: "2017-03-10T15:00:00Z"
        id: 10
        name: Golang
        updated_at: "2017-03-10T15:00:00Z"
      - created_at: "2017-03-10T15:00:00Z"
        id: 10
        name: Golang
        updated_at: "2017-03-10T15:00:00Z"
      - created_at: "2017-03-10T15:00:00Z"
        id: 10
        name: Golang
        updated_at: "2017-03-10T15:00:00Z"
    TechResponseID:
      type: object
      properties:
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
      description: A tech information (id view)
      example:
        id: 10
    TechResponseIDCollection:
      type: array
      items:
        $ref: '#/components/schemas/TechResponseID'
      description: TechListResponseBody is the result type for an array of TechResponse
        (id view)
      example:
      - id: 10
      - id: 10
      - id: 10
    UpdateUserRequestBody:
      type: object
      properties:
        email:
          type: string
          description: E-mail of user
          example: hy@gmail.com
          format: email
        password:
          type: string
          description: Password
          example: xxxxxxxx
          minLength: 8
          maxLength: 20
        user_name:
          type: string
          description: User name
          example: Hiroki
          minLength: 2
          maxLength: 20
      example:
        email: hy@gmail.com
        password: xxxxxxxx
        user_name: Hiroki
      required:
      - user_name
      - email
      - password
    User:
      type: object
      properties:
        created_at:
          type: string
          description: Datetime
          example: "2017-03-10T15:00:00Z"
          format: date-time
        email:
          type: string
          description: E-mail of user
          example: hy@gmail.com
          format: email
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        password:
          type: string
          description: Password
          example: xxxxxxxx
          minLength: 8
          maxLength: 20
        updated_at:
          type: string
          description: Datetime
          example: "2017-03-10T15:00:00Z"
          format: date-time
        user_name:
          type: string
          description: User name
          example: Hiroki
          minLength: 2
          maxLength: 20
      description: A user information
      example:
        created_at: "2017-03-10T15:00:00Z"
        email: hy@gmail.com
        id: 10
        password: xxxxxxxx
        updated_at: "2017-03-10T15:00:00Z"
        user_name: Hiroki
      required:
      - user_name
      - email
      - password
    UserCollection:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example:
      - created_at: "2017-03-10T15:00:00Z"
        email: hy@gmail.com
        id: 10
        password: xxxxxxxx
        updated_at: "2017-03-10T15:00:00Z"
        user_name: Hiroki
      - created_at: "2017-03-10T15:00:00Z"
        email: hy@gmail.com
        id: 10
        password: xxxxxxxx
        updated_at: "2017-03-10T15:00:00Z"
        user_name: Hiroki
      - created_at: "2017-03-10T15:00:00Z"
        email: hy@gmail.com
        id: 10
        password: xxxxxxxx
        updated_at: "2017-03-10T15:00:00Z"
        user_name: Hiroki
      - created_at: "2017-03-10T15:00:00Z"
        email: hy@gmail.com
        id: 10
        password: xxxxxxxx
        updated_at: "2017-03-10T15:00:00Z"
        user_name: Hiroki
    UserResponseID:
      type: object
      properties:
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
      description: A user information (id view)
      example:
        id: 10
    UserResponseIDCollection:
      type: array
      items:
        $ref: '#/components/schemas/UserResponseID'
      description: UserListResponseBody is the result type for an array of UserResponse
        (id view)
      example:
      - id: 10
      - id: 10
      - id: 10
    Usertech:
      type: object
      properties:
        id:
          type: integer
          description: ID
          example: 10
          minimum: 1
        tech_name:
          type: string
          description: Tech name
          example: Golang
          minLength: 1
          maxLength: 40
      description: A user information
      example:
        id: 10
        tech_name: Golang
      required:
      - tech_name
    UsertechCollection:
      type: array
      items:
        $ref: '#/components/schemas/Usertech'
      example:
      - id: 10
        tech_name: Golang
      - id: 10
        tech_name: Golang
      - id: 10
        tech_name: Golang
      - id: 10
        tech_name: Golang
    UsertechResponseTech:
      type: object
      properties:
        tech_name:
          type: string
          description: Tech name
          example: Golang
          minLength: 1
          maxLength: 40
      description: A user information (tech view)
      example:
        tech_name: Golang
      required:
      - tech_name
    UsertechResponseTechCollection:
      type: array
      items:
        $ref: '#/components/schemas/UsertechResponseTech'
      description: GetUserLikeTechResponseBody is the result type for an array of
        UsertechResponse (tech view)
      example:
      - tech_name: Golang
      - tech_name: Golang
    Userworkhistory:
      type: object
      properties:
        company:
          type: string
          description: Company name
          example: Company
          minLength: 2
          maxLength: 40
        country:
          type: string
          description: Country code
          example: nl
          minLength: 2
          maxLength: 2
        description:
          type: string
          description: job description
          example: '["Developed resume site for job seeking."]'
          format: binary
        techs:
          type: string
          description: used techs
          example: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker",
            "Travis-CI"]'
          format: binary
        term:
          type: string
          description: worked period
          example: Jul 2017 - Aug 2017
          minLength: 10
          maxLength: 20
        title:
          type: string
          description: Job Title
          example: Developer
          minLength: 2
          maxLength: 40
      description: A user information
      example:
        company: Company
        country: nl
        description: '["Developed resume site for job seeking."]'
        techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
        term: Jul 2017 - Aug 2017
        title: Developer
      required:
      - title
      - company
      - country
    UserworkhistoryCollection:
      type: array
      items:
        $ref: '#/components/schemas/Userworkhistory'
      example:
      - company: Company
        country: nl
        description: '["Developed resume site for job seeking."]'
        techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
        term: Jul 2017 - Aug 2017
        title: Developer
      - company: Company
        country: nl
        description: '["Developed resume site for job seeking."]'
        techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
        term: Jul 2017 - Aug 2017
        title: Developer
      - company: Company
        country: nl
        description: '["Developed resume site for job seeking."]'
        techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
        term: Jul 2017 - Aug 2017
        title: Developer
  securitySchemes:
    jwt_header_Authorization:
      type: http
      scheme: bearer
