// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_tech HTTP client types
//
// Command:
// $ goa gen resume/design

package client

import (
	hytech "resume/gen/hy_tech"
	hytechviews "resume/gen/hy_tech/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateTechRequestBody is the type of the "hy_tech" service "createTech"
// endpoint HTTP request body.
type CreateTechRequestBody struct {
	// Tech name
	Name string `form:"name" json:"name" xml:"name"`
}

// UpdateTechRequestBody is the type of the "hy_tech" service "updateTech"
// endpoint HTTP request body.
type UpdateTechRequestBody struct {
	// Tech name
	Name string `form:"name" json:"name" xml:"name"`
}

// TechListResponseBody is the type of the "hy_tech" service "techList"
// endpoint HTTP response body.
type TechListResponseBody []*TechResponse

// GetTechResponseBody is the type of the "hy_tech" service "getTech" endpoint
// HTTP response body.
type GetTechResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	IsHq        *string `form:"is_hq,omitempty" json:"is_hq,omitempty" xml:"is_hq,omitempty"`
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Datetime
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// TechResponse is used to define fields on response body types.
type TechResponse struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tech name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Datetime
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateTechRequestBody builds the HTTP request body from the payload of
// the "createTech" endpoint of the "hy_tech" service.
func NewCreateTechRequestBody(p *hytech.CreateTechPayload) *CreateTechRequestBody {
	body := &CreateTechRequestBody{
		Name: p.Name,
	}
	return body
}

// NewUpdateTechRequestBody builds the HTTP request body from the payload of
// the "updateTech" endpoint of the "hy_tech" service.
func NewUpdateTechRequestBody(p *hytech.UpdateTechPayload) *UpdateTechRequestBody {
	body := &UpdateTechRequestBody{
		Name: p.Name,
	}
	return body
}

// NewTechListTechCollectionOK builds a "hy_tech" service "techList" endpoint
// result from a HTTP "OK" response.
func NewTechListTechCollectionOK(body TechListResponseBody) hytechviews.TechCollectionView {
	v := make([]*hytechviews.TechView, len(body))
	for i, val := range body {
		v[i] = unmarshalTechResponseToHytechviewsTechView(val)
	}
	return v
}

// NewGetTechCompanyOK builds a "hy_tech" service "getTech" endpoint result
// from a HTTP "OK" response.
func NewGetTechCompanyOK(body *GetTechResponseBody) *hytechviews.CompanyView {
	v := &hytechviews.CompanyView{
		ID:          body.ID,
		CompanyID:   body.CompanyID,
		Name:        body.Name,
		IsHq:        body.IsHq,
		CountryName: body.CountryName,
		Address:     body.Address,
		CreatedAt:   body.CreatedAt,
		UpdatedAt:   body.UpdatedAt,
	}

	return v
}

// ValidateTechResponse runs the validations defined on TechResponse
func ValidateTechResponse(body *TechResponse) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 40, false))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}
