// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_tech client HTTP transport
//
// Command:
// $ goa gen resume/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the hy_tech service endpoint HTTP clients.
type Client struct {
	// TechList Doer is the HTTP client used to make requests to the techList
	// endpoint.
	TechListDoer goahttp.Doer

	// GetTech Doer is the HTTP client used to make requests to the getTech
	// endpoint.
	GetTechDoer goahttp.Doer

	// CreateTech Doer is the HTTP client used to make requests to the createTech
	// endpoint.
	CreateTechDoer goahttp.Doer

	// UpdateTech Doer is the HTTP client used to make requests to the updateTech
	// endpoint.
	UpdateTechDoer goahttp.Doer

	// DeleteTech Doer is the HTTP client used to make requests to the deleteTech
	// endpoint.
	DeleteTechDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the hy_tech service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		TechListDoer:        doer,
		GetTechDoer:         doer,
		CreateTechDoer:      doer,
		UpdateTechDoer:      doer,
		DeleteTechDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// TechList returns an endpoint that makes HTTP requests to the hy_tech service
// techList server.
func (c *Client) TechList() goa.Endpoint {
	var (
		encodeRequest  = EncodeTechListRequest(c.encoder)
		decodeResponse = DecodeTechListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTechListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TechListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_tech", "techList", err)
		}
		return decodeResponse(resp)
	}
}

// GetTech returns an endpoint that makes HTTP requests to the hy_tech service
// getTech server.
func (c *Client) GetTech() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetTechRequest(c.encoder)
		decodeResponse = DecodeGetTechResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetTechRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTechDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_tech", "getTech", err)
		}
		return decodeResponse(resp)
	}
}

// CreateTech returns an endpoint that makes HTTP requests to the hy_tech
// service createTech server.
func (c *Client) CreateTech() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTechRequest(c.encoder)
		decodeResponse = DecodeCreateTechResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateTechRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTechDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_tech", "createTech", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateTech returns an endpoint that makes HTTP requests to the hy_tech
// service updateTech server.
func (c *Client) UpdateTech() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateTechRequest(c.encoder)
		decodeResponse = DecodeUpdateTechResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateTechRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateTechDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_tech", "updateTech", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTech returns an endpoint that makes HTTP requests to the hy_tech
// service deleteTech server.
func (c *Client) DeleteTech() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTechRequest(c.encoder)
		decodeResponse = DecodeDeleteTechResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteTechRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTechDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_tech", "deleteTech", err)
		}
		return decodeResponse(resp)
	}
}
