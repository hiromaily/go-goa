// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_tech HTTP client encoders and decoders
//
// Command:
// $ goa gen resume/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	hytech "resume/gen/hy_tech"
	hytechviews "resume/gen/hy_tech/views"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildTechListRequest instantiates a HTTP request object with method and path
// set to call the "hy_tech" service "techList" endpoint
func (c *Client) BuildTechListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TechListHyTechPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_tech", "techList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTechListRequest returns an encoder for requests sent to the hy_tech
// techList server.
func EncodeTechListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hytech.TechListPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_tech", "techList", "*hytech.TechListPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeTechListResponse returns a decoder for responses returned by the
// hy_tech techList endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeTechListResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeTechListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TechListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "techList", err)
			}
			p := NewTechListTechCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := hytechviews.TechCollection{Projected: p, View: view}
			if err = hytechviews.ValidateTechCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "techList", err)
			}
			res := hytech.NewTechCollection(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body TechListNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "techList", err)
			}
			err = ValidateTechListNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "techList", err)
			}
			return nil, NewTechListNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_tech", "techList", resp.StatusCode, string(body))
		}
	}
}

// BuildGetTechRequest instantiates a HTTP request object with method and path
// set to call the "hy_tech" service "getTech" endpoint
func (c *Client) BuildGetTechRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		techID int
	)
	{
		p, ok := v.(*hytech.GetTechPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_tech", "getTech", "*hytech.GetTechPayload", v)
		}
		techID = p.TechID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetTechHyTechPath(techID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_tech", "getTech", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetTechRequest returns an encoder for requests sent to the hy_tech
// getTech server.
func EncodeGetTechRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hytech.GetTechPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_tech", "getTech", "*hytech.GetTechPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetTechResponse returns a decoder for responses returned by the
// hy_tech getTech endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGetTechResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeGetTechResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetTechResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "getTech", err)
			}
			p := NewGetTechTechOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &hytechviews.Tech{Projected: p, View: view}
			if err = hytechviews.ValidateTech(vres); err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "getTech", err)
			}
			res := hytech.NewTech(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetTechNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "getTech", err)
			}
			err = ValidateGetTechNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "getTech", err)
			}
			return nil, NewGetTechNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_tech", "getTech", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateTechRequest instantiates a HTTP request object with method and
// path set to call the "hy_tech" service "createTech" endpoint
func (c *Client) BuildCreateTechRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateTechHyTechPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_tech", "createTech", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateTechRequest returns an encoder for requests sent to the hy_tech
// createTech server.
func EncodeCreateTechRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hytech.CreateTechPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_tech", "createTech", "*hytech.CreateTechPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreateTechRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("hy_tech", "createTech", err)
		}
		return nil
	}
}

// DecodeCreateTechResponse returns a decoder for responses returned by the
// hy_tech createTech endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateTechResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeCreateTechResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateTechOKResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "createTech", err)
			}
			p := NewCreateTechTechOK(&body)
			view := resp.Header.Get("goa-view")
			vres := &hytechviews.Tech{Projected: p, View: view}
			if err = hytechviews.ValidateTech(vres); err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "createTech", err)
			}
			res := hytech.NewTech(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateTechBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "createTech", err)
			}
			err = ValidateCreateTechBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "createTech", err)
			}
			return nil, NewCreateTechBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_tech", "createTech", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateTechRequest instantiates a HTTP request object with method and
// path set to call the "hy_tech" service "updateTech" endpoint
func (c *Client) BuildUpdateTechRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		techID int
	)
	{
		p, ok := v.(*hytech.UpdateTechPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_tech", "updateTech", "*hytech.UpdateTechPayload", v)
		}
		techID = p.TechID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateTechHyTechPath(techID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_tech", "updateTech", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateTechRequest returns an encoder for requests sent to the hy_tech
// updateTech server.
func EncodeUpdateTechRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hytech.UpdateTechPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_tech", "updateTech", "*hytech.UpdateTechPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateTechRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("hy_tech", "updateTech", err)
		}
		return nil
	}
}

// DecodeUpdateTechResponse returns a decoder for responses returned by the
// hy_tech updateTech endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateTechResponse may return the following errors:
//   - "BadRequest" (type *goa.ServiceError): http.StatusBadRequest
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeUpdateTechResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body UpdateTechBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "updateTech", err)
			}
			err = ValidateUpdateTechBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "updateTech", err)
			}
			return nil, NewUpdateTechBadRequest(&body)
		case http.StatusNotFound:
			var (
				body UpdateTechNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "updateTech", err)
			}
			err = ValidateUpdateTechNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "updateTech", err)
			}
			return nil, NewUpdateTechNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_tech", "updateTech", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteTechRequest instantiates a HTTP request object with method and
// path set to call the "hy_tech" service "deleteTech" endpoint
func (c *Client) BuildDeleteTechRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		techID int
	)
	{
		p, ok := v.(*hytech.DeleteTechPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_tech", "deleteTech", "*hytech.DeleteTechPayload", v)
		}
		techID = p.TechID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteTechHyTechPath(techID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_tech", "deleteTech", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteTechRequest returns an encoder for requests sent to the hy_tech
// deleteTech server.
func EncodeDeleteTechRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hytech.DeleteTechPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_tech", "deleteTech", "*hytech.DeleteTechPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeleteTechResponse returns a decoder for responses returned by the
// hy_tech deleteTech endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteTechResponse may return the following errors:
//   - "NotFound" (type *goa.ServiceError): http.StatusNotFound
//   - error: internal error
func DecodeDeleteTechResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusNotFound:
			var (
				body DeleteTechNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_tech", "deleteTech", err)
			}
			err = ValidateDeleteTechNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("hy_tech", "deleteTech", err)
			}
			return nil, NewDeleteTechNotFound(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_tech", "deleteTech", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTechResponseToHytechviewsTechView builds a value of type
// *hytechviews.TechView from a value of type *TechResponse.
func unmarshalTechResponseToHytechviewsTechView(v *TechResponse) *hytechviews.TechView {
	res := &hytechviews.TechView{
		TechID:    v.TechID,
		TechName:  v.TechName,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
	}

	return res
}
