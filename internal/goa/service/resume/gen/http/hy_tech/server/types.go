// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_tech HTTP server types
//
// Command:
// $ goa gen resume/design

package server

import (
	hytech "resume/gen/hy_tech"
	hytechviews "resume/gen/hy_tech/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateTechRequestBody is the type of the "hy_tech" service "createTech"
// endpoint HTTP request body.
type CreateTechRequestBody struct {
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// UpdateTechRequestBody is the type of the "hy_tech" service "updateTech"
// endpoint HTTP request body.
type UpdateTechRequestBody struct {
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// TechResponseCollection is the type of the "hy_tech" service "techList"
// endpoint HTTP response body.
type TechResponseCollection []*TechResponse

// TechResponseIDCollection is the type of the "hy_tech" service "techList"
// endpoint HTTP response body.
type TechResponseIDCollection []*TechResponseID

// GetTechResponseBody is the type of the "hy_tech" service "getTech" endpoint
// HTTP response body.
type GetTechResponseBody struct {
	// Key ID
	TechID *int `form:"tech_id,omitempty" json:"tech_id,omitempty" xml:"tech_id,omitempty"`
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// GetTechResponseBodyID is the type of the "hy_tech" service "getTech"
// endpoint HTTP response body.
type GetTechResponseBodyID struct {
	// Key ID
	TechID *int `form:"tech_id,omitempty" json:"tech_id,omitempty" xml:"tech_id,omitempty"`
}

// CreateTechOKResponseBody is the type of the "hy_tech" service "createTech"
// endpoint HTTP response body.
type CreateTechOKResponseBody struct {
	// Key ID
	TechID *int `form:"tech_id,omitempty" json:"tech_id,omitempty" xml:"tech_id,omitempty"`
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// CreateTechOKResponseBodyID is the type of the "hy_tech" service "createTech"
// endpoint HTTP response body.
type CreateTechOKResponseBodyID struct {
	// Key ID
	TechID *int `form:"tech_id,omitempty" json:"tech_id,omitempty" xml:"tech_id,omitempty"`
}

// TechListNotFoundResponseBody is the type of the "hy_tech" service "techList"
// endpoint HTTP response body for the "NotFound" error.
type TechListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetTechNotFoundResponseBody is the type of the "hy_tech" service "getTech"
// endpoint HTTP response body for the "NotFound" error.
type GetTechNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTechBadRequestResponseBody is the type of the "hy_tech" service
// "createTech" endpoint HTTP response body for the "BadRequest" error.
type CreateTechBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTechBadRequestResponseBody is the type of the "hy_tech" service
// "updateTech" endpoint HTTP response body for the "BadRequest" error.
type UpdateTechBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateTechNotFoundResponseBody is the type of the "hy_tech" service
// "updateTech" endpoint HTTP response body for the "NotFound" error.
type UpdateTechNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteTechNotFoundResponseBody is the type of the "hy_tech" service
// "deleteTech" endpoint HTTP response body for the "NotFound" error.
type DeleteTechNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// TechResponse is used to define fields on response body types.
type TechResponse struct {
	// Key ID
	TechID *int `form:"tech_id,omitempty" json:"tech_id,omitempty" xml:"tech_id,omitempty"`
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// TechResponseID is used to define fields on response body types.
type TechResponseID struct {
	// Key ID
	TechID *int `form:"tech_id,omitempty" json:"tech_id,omitempty" xml:"tech_id,omitempty"`
}

// NewTechResponseCollection builds the HTTP response body from the result of
// the "techList" endpoint of the "hy_tech" service.
func NewTechResponseCollection(res hytechviews.TechCollectionView) TechResponseCollection {
	body := make([]*TechResponse, len(res))
	for i, val := range res {
		body[i] = marshalHytechviewsTechViewToTechResponse(val)
	}
	return body
}

// NewTechResponseIDCollection builds the HTTP response body from the result of
// the "techList" endpoint of the "hy_tech" service.
func NewTechResponseIDCollection(res hytechviews.TechCollectionView) TechResponseIDCollection {
	body := make([]*TechResponseID, len(res))
	for i, val := range res {
		body[i] = marshalHytechviewsTechViewToTechResponseID(val)
	}
	return body
}

// NewGetTechResponseBody builds the HTTP response body from the result of the
// "getTech" endpoint of the "hy_tech" service.
func NewGetTechResponseBody(res *hytechviews.TechView) *GetTechResponseBody {
	body := &GetTechResponseBody{
		TechID:   res.TechID,
		TechName: res.TechName,
	}
	return body
}

// NewGetTechResponseBodyID builds the HTTP response body from the result of
// the "getTech" endpoint of the "hy_tech" service.
func NewGetTechResponseBodyID(res *hytechviews.TechView) *GetTechResponseBodyID {
	body := &GetTechResponseBodyID{
		TechID: res.TechID,
	}
	return body
}

// NewCreateTechOKResponseBody builds the HTTP response body from the result of
// the "createTech" endpoint of the "hy_tech" service.
func NewCreateTechOKResponseBody(res *hytechviews.TechView) *CreateTechOKResponseBody {
	body := &CreateTechOKResponseBody{
		TechID:   res.TechID,
		TechName: res.TechName,
	}
	return body
}

// NewCreateTechOKResponseBodyID builds the HTTP response body from the result
// of the "createTech" endpoint of the "hy_tech" service.
func NewCreateTechOKResponseBodyID(res *hytechviews.TechView) *CreateTechOKResponseBodyID {
	body := &CreateTechOKResponseBodyID{
		TechID: res.TechID,
	}
	return body
}

// NewTechListNotFoundResponseBody builds the HTTP response body from the
// result of the "techList" endpoint of the "hy_tech" service.
func NewTechListNotFoundResponseBody(res *goa.ServiceError) *TechListNotFoundResponseBody {
	body := &TechListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetTechNotFoundResponseBody builds the HTTP response body from the result
// of the "getTech" endpoint of the "hy_tech" service.
func NewGetTechNotFoundResponseBody(res *goa.ServiceError) *GetTechNotFoundResponseBody {
	body := &GetTechNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTechBadRequestResponseBody builds the HTTP response body from the
// result of the "createTech" endpoint of the "hy_tech" service.
func NewCreateTechBadRequestResponseBody(res *goa.ServiceError) *CreateTechBadRequestResponseBody {
	body := &CreateTechBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTechBadRequestResponseBody builds the HTTP response body from the
// result of the "updateTech" endpoint of the "hy_tech" service.
func NewUpdateTechBadRequestResponseBody(res *goa.ServiceError) *UpdateTechBadRequestResponseBody {
	body := &UpdateTechBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateTechNotFoundResponseBody builds the HTTP response body from the
// result of the "updateTech" endpoint of the "hy_tech" service.
func NewUpdateTechNotFoundResponseBody(res *goa.ServiceError) *UpdateTechNotFoundResponseBody {
	body := &UpdateTechNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteTechNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteTech" endpoint of the "hy_tech" service.
func NewDeleteTechNotFoundResponseBody(res *goa.ServiceError) *DeleteTechNotFoundResponseBody {
	body := &DeleteTechNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewTechListPayload builds a hy_tech service techList endpoint payload.
func NewTechListPayload(token *string) *hytech.TechListPayload {
	v := &hytech.TechListPayload{}
	v.Token = token

	return v
}

// NewGetTechPayload builds a hy_tech service getTech endpoint payload.
func NewGetTechPayload(techID int, token *string) *hytech.GetTechPayload {
	v := &hytech.GetTechPayload{}
	v.TechID = techID
	v.Token = token

	return v
}

// NewCreateTechPayload builds a hy_tech service createTech endpoint payload.
func NewCreateTechPayload(body *CreateTechRequestBody, token *string) *hytech.CreateTechPayload {
	v := &hytech.CreateTechPayload{
		TechName: *body.TechName,
	}
	v.Token = token

	return v
}

// NewUpdateTechPayload builds a hy_tech service updateTech endpoint payload.
func NewUpdateTechPayload(body *UpdateTechRequestBody, techID int, token *string) *hytech.UpdateTechPayload {
	v := &hytech.UpdateTechPayload{
		TechName: *body.TechName,
	}
	v.TechID = techID
	v.Token = token

	return v
}

// NewDeleteTechPayload builds a hy_tech service deleteTech endpoint payload.
func NewDeleteTechPayload(techID int, token *string) *hytech.DeleteTechPayload {
	v := &hytech.DeleteTechPayload{}
	v.TechID = techID
	v.Token = token

	return v
}

// ValidateCreateTechRequestBody runs the validations defined on
// CreateTechRequestBody
func ValidateCreateTechRequestBody(body *CreateTechRequestBody) (err error) {
	if body.TechName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tech_name", "body"))
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 1, true))
		}
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 40, false))
		}
	}
	return
}

// ValidateUpdateTechRequestBody runs the validations defined on
// UpdateTechRequestBody
func ValidateUpdateTechRequestBody(body *UpdateTechRequestBody) (err error) {
	if body.TechName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tech_name", "body"))
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 1, true))
		}
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 40, false))
		}
	}
	return
}
