// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_tech HTTP server
//
// Command:
// $ goa gen resume/design

package server

import (
	"context"
	"net/http"
	hytech "resume/gen/hy_tech"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the hy_tech service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	TechList   http.Handler
	GetTech    http.Handler
	CreateTech http.Handler
	UpdateTech http.Handler
	DeleteTech http.Handler
	CORS       http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the hy_tech service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *hytech.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"TechList", "GET", "/tech"},
			{"GetTech", "GET", "/tech/{tech_id}"},
			{"CreateTech", "POST", "/tech"},
			{"UpdateTech", "PUT", "/tech/{tech_id}"},
			{"DeleteTech", "DELETE", "/tech/{tech_id}"},
			{"CORS", "OPTIONS", "/tech"},
			{"CORS", "OPTIONS", "/tech/{tech_id}"},
		},
		TechList:   NewTechListHandler(e.TechList, mux, decoder, encoder, errhandler, formatter),
		GetTech:    NewGetTechHandler(e.GetTech, mux, decoder, encoder, errhandler, formatter),
		CreateTech: NewCreateTechHandler(e.CreateTech, mux, decoder, encoder, errhandler, formatter),
		UpdateTech: NewUpdateTechHandler(e.UpdateTech, mux, decoder, encoder, errhandler, formatter),
		DeleteTech: NewDeleteTechHandler(e.DeleteTech, mux, decoder, encoder, errhandler, formatter),
		CORS:       NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "hy_tech" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.TechList = m(s.TechList)
	s.GetTech = m(s.GetTech)
	s.CreateTech = m(s.CreateTech)
	s.UpdateTech = m(s.UpdateTech)
	s.DeleteTech = m(s.DeleteTech)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return hytech.MethodNames[:] }

// Mount configures the mux to serve the hy_tech endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountTechListHandler(mux, h.TechList)
	MountGetTechHandler(mux, h.GetTech)
	MountCreateTechHandler(mux, h.CreateTech)
	MountUpdateTechHandler(mux, h.UpdateTech)
	MountDeleteTechHandler(mux, h.DeleteTech)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the hy_tech endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountTechListHandler configures the mux to serve the "hy_tech" service
// "techList" endpoint.
func MountTechListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyTechOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/tech", f)
}

// NewTechListHandler creates a HTTP handler which loads the HTTP request and
// calls the "hy_tech" service "techList" endpoint.
func NewTechListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTechListRequest(mux, decoder)
		encodeResponse = EncodeTechListResponse(encoder)
		encodeError    = EncodeTechListError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "techList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_tech")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTechHandler configures the mux to serve the "hy_tech" service
// "getTech" endpoint.
func MountGetTechHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyTechOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/tech/{tech_id}", f)
}

// NewGetTechHandler creates a HTTP handler which loads the HTTP request and
// calls the "hy_tech" service "getTech" endpoint.
func NewGetTechHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTechRequest(mux, decoder)
		encodeResponse = EncodeGetTechResponse(encoder)
		encodeError    = EncodeGetTechError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getTech")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_tech")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateTechHandler configures the mux to serve the "hy_tech" service
// "createTech" endpoint.
func MountCreateTechHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyTechOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/tech", f)
}

// NewCreateTechHandler creates a HTTP handler which loads the HTTP request and
// calls the "hy_tech" service "createTech" endpoint.
func NewCreateTechHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTechRequest(mux, decoder)
		encodeResponse = EncodeCreateTechResponse(encoder)
		encodeError    = EncodeCreateTechError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createTech")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_tech")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateTechHandler configures the mux to serve the "hy_tech" service
// "updateTech" endpoint.
func MountUpdateTechHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyTechOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/tech/{tech_id}", f)
}

// NewUpdateTechHandler creates a HTTP handler which loads the HTTP request and
// calls the "hy_tech" service "updateTech" endpoint.
func NewUpdateTechHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateTechRequest(mux, decoder)
		encodeResponse = EncodeUpdateTechResponse(encoder)
		encodeError    = EncodeUpdateTechError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateTech")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_tech")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTechHandler configures the mux to serve the "hy_tech" service
// "deleteTech" endpoint.
func MountDeleteTechHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyTechOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/tech/{tech_id}", f)
}

// NewDeleteTechHandler creates a HTTP handler which loads the HTTP request and
// calls the "hy_tech" service "deleteTech" endpoint.
func NewDeleteTechHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTechRequest(mux, decoder)
		encodeResponse = EncodeDeleteTechResponse(encoder)
		encodeError    = EncodeDeleteTechError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteTech")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_tech")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service hy_tech.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleHyTechOrigin(h)
	mux.Handle("OPTIONS", "/tech", h.ServeHTTP)
	mux.Handle("OPTIONS", "/tech/{tech_id}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleHyTechOrigin applies the CORS response headers corresponding to the
// origin for the service hy_tech.
func HandleHyTechOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
