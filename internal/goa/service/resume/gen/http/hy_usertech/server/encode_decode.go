// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_usertech HTTP server encoders and decoders
//
// Command:
// $ goa gen resume/design

package server

import (
	"context"
	"net/http"
	hyusertechviews "resume/gen/hy_usertech/views"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetUserLikeTechResponse returns an encoder for responses returned by
// the hy_usertech getUserLikeTech endpoint.
func EncodeGetUserLikeTechResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(hyusertechviews.UsertechCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewUsertechResponseCollection(res.Projected)
		case "tech":
			body = NewUsertechResponseTechCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserLikeTechRequest returns a decoder for requests sent to the
// hy_usertech getUserLikeTech endpoint.
func DecodeGetUserLikeTechRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID int
			token  *string
			err    error

			params = mux.Vars(r)
		)
		{
			userIDRaw := params["userID"]
			v, err2 := strconv.ParseInt(userIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("userID", userIDRaw, "integer"))
			}
			userID = int(v)
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserLikeTechPayload(userID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetUserDisLikeTechResponse returns an encoder for responses returned
// by the hy_usertech getUserDisLikeTech endpoint.
func EncodeGetUserDisLikeTechResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(hyusertechviews.UsertechCollection)
		w.Header().Set("goa-view", res.View)
		enc := encoder(ctx, w)
		var body interface{}
		switch res.View {
		case "default", "":
			body = NewUsertechResponseCollection(res.Projected)
		case "tech":
			body = NewUsertechResponseTechCollection(res.Projected)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserDisLikeTechRequest returns a decoder for requests sent to the
// hy_usertech getUserDisLikeTech endpoint.
func DecodeGetUserDisLikeTechRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID int
			token  *string
			err    error

			params = mux.Vars(r)
		)
		{
			userIDRaw := params["userID"]
			v, err2 := strconv.ParseInt(userIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("userID", userIDRaw, "integer"))
			}
			userID = int(v)
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserDisLikeTechPayload(userID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// marshalHyusertechviewsUsertechViewToUsertechResponse builds a value of type
// *UsertechResponse from a value of type *hyusertechviews.UsertechView.
func marshalHyusertechviewsUsertechViewToUsertechResponse(v *hyusertechviews.UsertechView) *UsertechResponse {
	res := &UsertechResponse{
		ID:       v.ID,
		TechName: *v.TechName,
	}

	return res
}

// marshalHyusertechviewsUsertechViewToUsertechResponseTech builds a value of
// type *UsertechResponseTech from a value of type
// *hyusertechviews.UsertechView.
func marshalHyusertechviewsUsertechViewToUsertechResponseTech(v *hyusertechviews.UsertechView) *UsertechResponseTech {
	res := &UsertechResponseTech{
		TechName: *v.TechName,
	}

	return res
}
