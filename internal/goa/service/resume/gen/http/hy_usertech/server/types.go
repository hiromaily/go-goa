// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_usertech HTTP server types
//
// Command:
// $ goa gen resume/design

package server

import (
	hyusertech "resume/gen/hy_usertech"
	hyusertechviews "resume/gen/hy_usertech/views"
)

// UsertechResponseCollection is the type of the "hy_usertech" service
// "getUserLikeTech" endpoint HTTP response body.
type UsertechResponseCollection []*UsertechResponse

// UsertechResponseTechCollection is the type of the "hy_usertech" service
// "getUserLikeTech" endpoint HTTP response body.
type UsertechResponseTechCollection []*UsertechResponseTech

// UsertechResponse is used to define fields on response body types.
type UsertechResponse struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tech name
	TechName string `form:"tech_name" json:"tech_name" xml:"tech_name"`
}

// UsertechResponseTech is used to define fields on response body types.
type UsertechResponseTech struct {
	// Tech name
	TechName string `form:"tech_name" json:"tech_name" xml:"tech_name"`
}

// NewUsertechResponseCollection builds the HTTP response body from the result
// of the "getUserLikeTech" endpoint of the "hy_usertech" service.
func NewUsertechResponseCollection(res hyusertechviews.UsertechCollectionView) UsertechResponseCollection {
	body := make([]*UsertechResponse, len(res))
	for i, val := range res {
		body[i] = marshalHyusertechviewsUsertechViewToUsertechResponse(val)
	}
	return body
}

// NewUsertechResponseTechCollection builds the HTTP response body from the
// result of the "getUserLikeTech" endpoint of the "hy_usertech" service.
func NewUsertechResponseTechCollection(res hyusertechviews.UsertechCollectionView) UsertechResponseTechCollection {
	body := make([]*UsertechResponseTech, len(res))
	for i, val := range res {
		body[i] = marshalHyusertechviewsUsertechViewToUsertechResponseTech(val)
	}
	return body
}

// NewGetUserLikeTechPayload builds a hy_usertech service getUserLikeTech
// endpoint payload.
func NewGetUserLikeTechPayload(userID int, token *string) *hyusertech.GetUserLikeTechPayload {
	v := &hyusertech.GetUserLikeTechPayload{}
	v.UserID = &userID
	v.Token = token

	return v
}

// NewGetUserDisLikeTechPayload builds a hy_usertech service getUserDisLikeTech
// endpoint payload.
func NewGetUserDisLikeTechPayload(userID int, token *string) *hyusertech.GetUserDisLikeTechPayload {
	v := &hyusertech.GetUserDisLikeTechPayload{}
	v.UserID = &userID
	v.Token = token

	return v
}
