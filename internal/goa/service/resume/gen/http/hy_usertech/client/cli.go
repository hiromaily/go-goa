// Code generated by goa v3.7.13, DO NOT EDIT.
//
// hy_usertech HTTP client CLI support package
//
// Command:
// $ goa gen resume/design

package client

import (
	"fmt"
	hyusertech "resume/gen/hy_usertech"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetUserLikeTechPayload builds the payload for the hy_usertech
// getUserLikeTech endpoint from CLI flags.
func BuildGetUserLikeTechPayload(hyUsertechGetUserLikeTechUserID string, hyUsertechGetUserLikeTechToken string) (*hyusertech.GetUserLikeTechPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(hyUsertechGetUserLikeTechUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyUsertechGetUserLikeTechToken != "" {
			token = &hyUsertechGetUserLikeTechToken
		}
	}
	v := &hyusertech.GetUserLikeTechPayload{}
	v.UserID = &userID
	v.Token = token

	return v, nil
}

// BuildGetUserDisLikeTechPayload builds the payload for the hy_usertech
// getUserDisLikeTech endpoint from CLI flags.
func BuildGetUserDisLikeTechPayload(hyUsertechGetUserDisLikeTechUserID string, hyUsertechGetUserDisLikeTechToken string) (*hyusertech.GetUserDisLikeTechPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(hyUsertechGetUserDisLikeTechUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var token *string
	{
		if hyUsertechGetUserDisLikeTechToken != "" {
			token = &hyUsertechGetUserDisLikeTechToken
		}
	}
	v := &hyusertech.GetUserDisLikeTechPayload{}
	v.UserID = &userID
	v.Token = token

	return v, nil
}
