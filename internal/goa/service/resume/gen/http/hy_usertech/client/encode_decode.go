// Code generated by goa v3.7.13, DO NOT EDIT.
//
// hy_usertech HTTP client encoders and decoders
//
// Command:
// $ goa gen resume/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	hyusertech "resume/gen/hy_usertech"
	hyusertechviews "resume/gen/hy_usertech/views"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetUserLikeTechRequest instantiates a HTTP request object with method
// and path set to call the "hy_usertech" service "getUserLikeTech" endpoint
func (c *Client) BuildGetUserLikeTechRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID int
	)
	{
		p, ok := v.(*hyusertech.GetUserLikeTechPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_usertech", "getUserLikeTech", "*hyusertech.GetUserLikeTechPayload", v)
		}
		if p.UserID != nil {
			userID = *p.UserID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserLikeTechHyUsertechPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_usertech", "getUserLikeTech", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserLikeTechRequest returns an encoder for requests sent to the
// hy_usertech getUserLikeTech server.
func EncodeGetUserLikeTechRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hyusertech.GetUserLikeTechPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_usertech", "getUserLikeTech", "*hyusertech.GetUserLikeTechPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetUserLikeTechResponse returns a decoder for responses returned by
// the hy_usertech getUserLikeTech endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetUserLikeTechResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserLikeTechResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_usertech", "getUserLikeTech", err)
			}
			p := NewGetUserLikeTechUsertechCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := hyusertechviews.UsertechCollection{Projected: p, View: view}
			if err = hyusertechviews.ValidateUsertechCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("hy_usertech", "getUserLikeTech", err)
			}
			res := hyusertech.NewUsertechCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_usertech", "getUserLikeTech", resp.StatusCode, string(body))
		}
	}
}

// BuildGetUserDisLikeTechRequest instantiates a HTTP request object with
// method and path set to call the "hy_usertech" service "getUserDisLikeTech"
// endpoint
func (c *Client) BuildGetUserDisLikeTechRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		userID int
	)
	{
		p, ok := v.(*hyusertech.GetUserDisLikeTechPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hy_usertech", "getUserDisLikeTech", "*hyusertech.GetUserDisLikeTechPayload", v)
		}
		if p.UserID != nil {
			userID = *p.UserID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetUserDisLikeTechHyUsertechPath(userID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hy_usertech", "getUserDisLikeTech", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetUserDisLikeTechRequest returns an encoder for requests sent to the
// hy_usertech getUserDisLikeTech server.
func EncodeGetUserDisLikeTechRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hyusertech.GetUserDisLikeTechPayload)
		if !ok {
			return goahttp.ErrInvalidType("hy_usertech", "getUserDisLikeTech", "*hyusertech.GetUserDisLikeTechPayload", v)
		}
		if p.Token != nil {
			head := *p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeGetUserDisLikeTechResponse returns a decoder for responses returned by
// the hy_usertech getUserDisLikeTech endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeGetUserDisLikeTechResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetUserDisLikeTechResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hy_usertech", "getUserDisLikeTech", err)
			}
			p := NewGetUserDisLikeTechUsertechCollectionOK(body)
			view := resp.Header.Get("goa-view")
			vres := hyusertechviews.UsertechCollection{Projected: p, View: view}
			if err = hyusertechviews.ValidateUsertechCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("hy_usertech", "getUserDisLikeTech", err)
			}
			res := hyusertech.NewUsertechCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hy_usertech", "getUserDisLikeTech", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUsertechResponseToHyusertechviewsUsertechView builds a value of
// type *hyusertechviews.UsertechView from a value of type *UsertechResponse.
func unmarshalUsertechResponseToHyusertechviewsUsertechView(v *UsertechResponse) *hyusertechviews.UsertechView {
	res := &hyusertechviews.UsertechView{
		ID:       v.ID,
		TechName: v.TechName,
	}

	return res
}
