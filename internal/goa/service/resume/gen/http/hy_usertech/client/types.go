// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_usertech HTTP client types
//
// Command:
// $ goa gen resume/design

package client

import (
	hyusertechviews "resume/gen/hy_usertech/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// GetUserLikeTechResponseBody is the type of the "hy_usertech" service
// "getUserLikeTech" endpoint HTTP response body.
type GetUserLikeTechResponseBody []*UsertechResponse

// GetUserDisLikeTechResponseBody is the type of the "hy_usertech" service
// "getUserDisLikeTech" endpoint HTTP response body.
type GetUserDisLikeTechResponseBody []*UsertechResponse

// UsertechResponse is used to define fields on response body types.
type UsertechResponse struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// NewGetUserLikeTechUsertechCollectionOK builds a "hy_usertech" service
// "getUserLikeTech" endpoint result from a HTTP "OK" response.
func NewGetUserLikeTechUsertechCollectionOK(body GetUserLikeTechResponseBody) hyusertechviews.UsertechCollectionView {
	v := make([]*hyusertechviews.UsertechView, len(body))
	for i, val := range body {
		v[i] = unmarshalUsertechResponseToHyusertechviewsUsertechView(val)
	}

	return v
}

// NewGetUserDisLikeTechUsertechCollectionOK builds a "hy_usertech" service
// "getUserDisLikeTech" endpoint result from a HTTP "OK" response.
func NewGetUserDisLikeTechUsertechCollectionOK(body GetUserDisLikeTechResponseBody) hyusertechviews.UsertechCollectionView {
	v := make([]*hyusertechviews.UsertechView, len(body))
	for i, val := range body {
		v[i] = unmarshalUsertechResponseToHyusertechviewsUsertechView(val)
	}

	return v
}

// ValidateUsertechResponse runs the validations defined on UsertechResponse
func ValidateUsertechResponse(body *UsertechResponse) (err error) {
	if body.TechName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tech_name", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 1, true))
		}
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 40, false))
		}
	}
	return
}
