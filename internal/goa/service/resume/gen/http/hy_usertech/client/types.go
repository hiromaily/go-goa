// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_usertech HTTP client types
//
// Command:
// $ goa gen resume/design

package client

import (
	hyusertechviews "resume/gen/hy_usertech/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// GetUserLikeTechResponseBody is the type of the "hy_usertech" service
// "getUserLikeTech" endpoint HTTP response body.
type GetUserLikeTechResponseBody []*UsertechResponse

// GetUserDisLikeTechResponseBody is the type of the "hy_usertech" service
// "getUserDisLikeTech" endpoint HTTP response body.
type GetUserDisLikeTechResponseBody []*UsertechResponse

// GetUserLikeTechNotFoundResponseBody is the type of the "hy_usertech" service
// "getUserLikeTech" endpoint HTTP response body for the "NotFound" error.
type GetUserLikeTechNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserDisLikeTechNotFoundResponseBody is the type of the "hy_usertech"
// service "getUserDisLikeTech" endpoint HTTP response body for the "NotFound"
// error.
type GetUserDisLikeTechNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UsertechResponse is used to define fields on response body types.
type UsertechResponse struct {
	// Key ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// NewGetUserLikeTechUsertechCollectionOK builds a "hy_usertech" service
// "getUserLikeTech" endpoint result from a HTTP "OK" response.
func NewGetUserLikeTechUsertechCollectionOK(body GetUserLikeTechResponseBody) hyusertechviews.UsertechCollectionView {
	v := make([]*hyusertechviews.UsertechView, len(body))
	for i, val := range body {
		v[i] = unmarshalUsertechResponseToHyusertechviewsUsertechView(val)
	}

	return v
}

// NewGetUserLikeTechNotFound builds a hy_usertech service getUserLikeTech
// endpoint NotFound error.
func NewGetUserLikeTechNotFound(body *GetUserLikeTechNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserDisLikeTechUsertechCollectionOK builds a "hy_usertech" service
// "getUserDisLikeTech" endpoint result from a HTTP "OK" response.
func NewGetUserDisLikeTechUsertechCollectionOK(body GetUserDisLikeTechResponseBody) hyusertechviews.UsertechCollectionView {
	v := make([]*hyusertechviews.UsertechView, len(body))
	for i, val := range body {
		v[i] = unmarshalUsertechResponseToHyusertechviewsUsertechView(val)
	}

	return v
}

// NewGetUserDisLikeTechNotFound builds a hy_usertech service
// getUserDisLikeTech endpoint NotFound error.
func NewGetUserDisLikeTechNotFound(body *GetUserDisLikeTechNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetUserLikeTechNotFoundResponseBody runs the validations defined on
// getUserLikeTech_NotFound_response_body
func ValidateGetUserLikeTechNotFoundResponseBody(body *GetUserLikeTechNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserDisLikeTechNotFoundResponseBody runs the validations defined
// on getUserDisLikeTech_NotFound_response_body
func ValidateGetUserDisLikeTechNotFoundResponseBody(body *GetUserDisLikeTechNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUsertechResponse runs the validations defined on UsertechResponse
func ValidateUsertechResponse(body *UsertechResponse) (err error) {
	if body.TechName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("tech_name", "body"))
	}
	if body.ID != nil {
		if *body.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.id", *body.ID, 1, true))
		}
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 1, true))
		}
	}
	if body.TechName != nil {
		if utf8.RuneCountInString(*body.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.tech_name", *body.TechName, utf8.RuneCountInString(*body.TechName), 40, false))
		}
	}
	return
}
