swagger: "2.0"
info:
  title: resume API
  description: go-goa API with goa framework
  contact:
    name: hiromaily
    email: hiromaily@gmail.com
    url: https://hiromaily.github.io/
  license:
    name: MIT
    url: https://github.com/goadesign/goa/blob/master/LICENSE
  version: ""
host: localhost:8080
consumes:
- application/json
- application/xml
produces:
- application/json
- application/xml
- application/gob
paths:
  /*filepath:
    get:
      tags:
      - public
      summary: Download public/
      operationId: public#/*filepath
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
  /company:
    get:
      tags:
      - hy_company
      summary: companyList hy_company
      description: |-
        List all companies

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_company#companyList
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyCompanyCompanyResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    post:
      tags:
      - hy_company
      summary: createCompany hy_company
      description: |-
        Create new company

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_company#createCompany
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: CreateCompanyRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyCompanyCreateCompanyRequestBody'
          required:
          - name
          - country_id
          - address
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /company/{company_id}:
    get:
      tags:
      - hy_company
      summary: getCompanyGroup hy_company
      description: |-
        Retrieve company with given company_id

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_company#getCompanyGroup
      parameters:
      - name: company_id
        in: path
        description: Company ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: GetCompanyGroupRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyCompanyGetCompanyGroupRequestBody'
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyCompanyCompanyResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - hy_company
      summary: updateCompany hy_company
      description: |-
        Change company properties

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_company#updateCompany
      parameters:
      - name: company_id
        in: path
        description: Company ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: UpdateCompanyRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyCompanyUpdateCompanyRequestBody'
          required:
          - name
          - country_id
          - address
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - hy_company
      summary: deleteCompany hy_company
      description: |-
        Delete company

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_company#deleteCompany
      parameters:
      - name: company_id
        in: path
        description: Company ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /company/branch:
    post:
      tags:
      - hy_companybranch
      summary: createCompanyBranch hy_companybranch
      description: |-
        Create new company branch

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_companybranch#createCompanyBranch
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: CreateCompanyBranchRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyCompanybranchCreateCompanyBranchRequestBody'
          required:
          - country_id
          - address
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /company/branch/{company_branch_id}:
    get:
      tags:
      - hy_companybranch
      summary: getCompanyBranch hy_companybranch
      description: |-
        Get company branch with given id

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_companybranch#getCompanyBranch
      parameters:
      - name: company_branch_id
        in: path
        description: Company branch ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - hy_companybranch
      summary: updateCompanyBranch hy_companybranch
      description: |-
        Change company branch properties

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_companybranch#updateCompanyBranch
      parameters:
      - name: company_branch_id
        in: path
        description: Company branch ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: UpdateCompanyBranchRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyCompanybranchUpdateCompanyBranchRequestBody'
          required:
          - country_id
          - address
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - hy_companybranch
      summary: deleteCompanyBranch hy_companybranch
      description: |-
        Delete company branch

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_companybranch#deleteCompanyBranch
      parameters:
      - name: company_branch_id
        in: path
        description: Company branch ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /health:
    get:
      tags:
      - health
      summary: health health
      operationId: health#health
      responses:
        "200":
          description: OK response.
      schemes:
      - http
  /login:
    post:
      tags:
      - auth
      summary: login auth
      operationId: auth#login
      parameters:
      - name: LoginRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/AuthLoginRequestBody'
          required:
          - email
          - password
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/AuthLoginResponseBody'
      schemes:
      - http
  /openapi.json:
    get:
      tags:
      - public
      summary: Download ../gen/http/openapi.json
      operationId: public#/openapi.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
  /swagger-ui/*filepath:
    get:
      tags:
      - public
      summary: Download resources/swagger-ui/dist/
      operationId: public#/swagger-ui/*filepath
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
  /tech:
    get:
      tags:
      - hy_tech
      summary: techList hy_tech
      description: |-
        List all techs

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_tech#techList
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyTechTechResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    post:
      tags:
      - hy_tech
      summary: createTech hy_tech
      description: |-
        Create new tech

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_tech#createTech
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: CreateTechRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyTechCreateTechRequestBody'
          required:
          - name
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /tech/{techID}:
    get:
      tags:
      - hy_tech
      summary: getTech hy_tech
      description: |-
        get tech with given tech id

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_tech#getTech
      produces:
      - application/json
      parameters:
      - name: techID
        in: path
        description: Tech ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyTechGetTechResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - hy_tech
      summary: updateTech hy_tech
      description: |-
        Change tech properties

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_tech#updateTech
      parameters:
      - name: techID
        in: path
        description: Tech ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: UpdateTechRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyTechUpdateTechRequestBody'
          required:
          - name
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - hy_tech
      summary: deleteTech hy_tech
      description: |-
        Delete tech

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_tech#deleteTech
      parameters:
      - name: techID
        in: path
        description: Tech ID
        required: true
        type: integer
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /user:
    get:
      tags:
      - hy_user
      summary: userList hy_user
      description: |-
        List all users

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_user#userList
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyUserUserResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    post:
      tags:
      - hy_user
      summary: createUser hy_user
      description: |-
        Create new user

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_user#createUser
      parameters:
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: CreateUserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyUserCreateUserRequestBody'
          required:
          - user_name
          - email
          - password
      responses:
        "200":
          description: OK response.
        "201":
          description: Created response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /user/{userID}:
    get:
      tags:
      - hy_user
      summary: getUser hy_user
      description: |-
        get user with given user id

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_user#getUser
      produces:
      - application/json
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        type: integer
        minimum: 1
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyUserGetUserResponseBody'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    put:
      tags:
      - hy_user
      summary: updateUser hy_user
      description: |-
        Change user properties

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_user#updateUser
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        type: integer
        minimum: 1
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      - name: UpdateUserRequestBody
        in: body
        required: true
        schema:
          $ref: '#/definitions/HyUserUpdateUserRequestBody'
          required:
          - user_name
          - email
          - password
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
    delete:
      tags:
      - hy_user
      summary: deleteUser hy_user
      description: |-
        Delete user

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_user#deleteUser
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        type: integer
        minimum: 1
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /user/{userID}/disliketech:
    get:
      tags:
      - hy_usertech
      summary: getUserDisLikeTech hy_usertech
      description: |-
        get user's dislike techs

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_usertech#getUserDisLikeTech
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        type: integer
        minimum: 1
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyUsertechUsertechResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /user/{userID}/liketech:
    get:
      tags:
      - hy_usertech
      summary: getUserLikeTech hy_usertech
      description: |-
        get user's favorite techs

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_usertech#getUserLikeTech
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        type: integer
        minimum: 1
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyUsertechUsertechResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
  /user/{userID}/workhistory:
    get:
      tags:
      - hy_userWorkHistory
      summary: getUserWorkHistory hy_userWorkHistory
      description: |-
        get user's work history

        **Required security scopes for jwt**:
          * `api:access`
      operationId: hy_userWorkHistory#getUserWorkHistory
      parameters:
      - name: userID
        in: path
        description: User ID
        required: true
        type: integer
        minimum: 1
      - name: Authorization
        in: header
        description: JWT token used to perform authorization
        required: false
        type: string
      responses:
        "200":
          description: OK response.
          schema:
            $ref: '#/definitions/HyUserWorkHistoryUserworkhistoryResponseCollection'
      schemes:
      - http
      security:
      - jwt_header_Authorization: []
definitions:
  AuthLoginRequestBody:
    title: AuthLoginRequestBody
    type: object
    properties:
      email:
        type: string
        description: E-mail of user
        example: hy@gmail.com
        format: email
      password:
        type: string
        description: Password
        example: xxxxxxxx
        minLength: 8
        maxLength: 20
    example:
      email: hy@gmail.com
      password: xxxxxxxx
    required:
    - email
    - password
  AuthLoginResponseBody:
    title: 'Mediatype identifier: application/vnd.authorized+json; view=default'
    type: object
    properties:
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      token:
        type: string
        description: JWT token
        example: token.string
    description: LoginResponseBody result type (default view)
    example:
      id: 10
      token: token.string
    required:
    - token
    - id
  CompanyResponse:
    title: 'Mediatype identifier: application/vnd.company+json; view=default'
    type: object
    properties:
      address:
        type: string
        description: Company Address
        example: Shinagawa Tokyo
        minLength: 2
        maxLength: 80
      company_id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      country_name:
        type: string
        example: Officiis labore illo.
      hq_flg:
        type: string
        example: Cum aperiam sint saepe.
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      name:
        type: string
        description: Company name
        example: Company
        minLength: 2
        maxLength: 40
    description: A company information (default view)
    example:
      address: Shinagawa Tokyo
      company_id: 10
      country_name: Animi corrupti libero beatae autem.
      hq_flg: Qui rerum fuga qui eveniet consectetur laudantium.
      id: 10
      name: Company
    required:
    - name
    - address
  HyCompanyCompanyResponseCollection:
    title: 'Mediatype identifier: application/vnd.company+json; type=collection; view=default'
    type: array
    items:
      $ref: '#/definitions/CompanyResponse'
    description: CompanyListResponseBody is the result type for an array of CompanyResponse
      (default view)
    example:
    - address: Shinagawa Tokyo
      company_id: 10
      country_name: Ducimus sapiente.
      hq_flg: Autem sunt saepe.
      id: 10
      name: Company
    - address: Shinagawa Tokyo
      company_id: 10
      country_name: Ducimus sapiente.
      hq_flg: Autem sunt saepe.
      id: 10
      name: Company
    - address: Shinagawa Tokyo
      company_id: 10
      country_name: Ducimus sapiente.
      hq_flg: Autem sunt saepe.
      id: 10
      name: Company
  HyCompanyCreateCompanyRequestBody:
    title: HyCompanyCreateCompanyRequestBody
    type: object
    properties:
      address:
        type: string
        description: Company Address
        example: Shinagawa Tokyo
        minLength: 2
        maxLength: 80
      country_id:
        type: integer
        description: Country ID
        example: 110
        minimum: 1
        maximum: 999
      name:
        type: string
        description: Company name
        example: Company
        minLength: 2
        maxLength: 40
    example:
      address: Shinagawa Tokyo
      country_id: 110
      name: Company
    required:
    - name
    - country_id
    - address
  HyCompanyGetCompanyGroupRequestBody:
    title: HyCompanyGetCompanyGroupRequestBody
    type: object
    properties:
      hq_flg:
        type: string
        description: Head Quarters flag
        example: "1"
        enum:
        - "1"
        - "0"
    example:
      hq_flg: "1"
  HyCompanyUpdateCompanyRequestBody:
    title: HyCompanyUpdateCompanyRequestBody
    type: object
    properties:
      address:
        type: string
        description: Company Address
        example: Shinagawa Tokyo
        minLength: 2
        maxLength: 80
      country_id:
        type: integer
        description: Country ID
        example: 110
        minimum: 1
        maximum: 999
      name:
        type: string
        description: Company name
        example: Company
        minLength: 2
        maxLength: 40
    example:
      address: Shinagawa Tokyo
      country_id: 110
      name: Company
    required:
    - name
    - country_id
    - address
  HyCompanybranchCreateCompanyBranchRequestBody:
    title: HyCompanybranchCreateCompanyBranchRequestBody
    type: object
    properties:
      address:
        type: string
        description: Company Address
        example: Shinagawa Tokyo
        minLength: 2
        maxLength: 80
      company_id:
        type: integer
        description: Company ID
        example: 2433896226403955730
        format: int64
      country_id:
        type: integer
        description: Country ID
        example: 110
        minimum: 1
        maximum: 999
    example:
      address: Shinagawa Tokyo
      company_id: 584610433152659516
      country_id: 110
    required:
    - country_id
    - address
  HyCompanybranchUpdateCompanyBranchRequestBody:
    title: HyCompanybranchUpdateCompanyBranchRequestBody
    type: object
    properties:
      address:
        type: string
        description: Company Address
        example: Shinagawa Tokyo
        minLength: 2
        maxLength: 80
      country_id:
        type: integer
        description: Country ID
        example: 110
        minimum: 1
        maximum: 999
    example:
      address: Shinagawa Tokyo
      country_id: 110
    required:
    - country_id
    - address
  HyTechCreateTechRequestBody:
    title: HyTechCreateTechRequestBody
    type: object
    properties:
      name:
        type: string
        description: Tech name
        example: Golang
        minLength: 1
        maxLength: 40
    example:
      name: Golang
    required:
    - name
  HyTechGetTechResponseBody:
    title: 'Mediatype identifier: application/vnd.company+json; view=default'
    type: object
    properties:
      address:
        type: string
        description: Company Address
        example: Shinagawa Tokyo
        minLength: 2
        maxLength: 80
      company_id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      country_name:
        type: string
        example: Animi nihil consequatur saepe labore.
      hq_flg:
        type: string
        example: Soluta rerum dolorum fuga vel fugit possimus.
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      name:
        type: string
        description: Company name
        example: Company
        minLength: 2
        maxLength: 40
    description: GetTechResponseBody result type (default view)
    example:
      address: Shinagawa Tokyo
      company_id: 10
      country_name: Magni voluptas deleniti consequatur sint unde quo.
      hq_flg: Dolorem aliquam tenetur officia.
      id: 10
      name: Company
    required:
    - name
    - address
  HyTechTechResponseCollection:
    title: 'Mediatype identifier: application/vnd.tech+json; type=collection; view=default'
    type: array
    items:
      $ref: '#/definitions/TechResponse'
    description: TechListResponseBody is the result type for an array of TechResponse
      (default view)
    example:
    - id: 10
      name: Golang
    - id: 10
      name: Golang
    - id: 10
      name: Golang
    - id: 10
      name: Golang
  HyTechUpdateTechRequestBody:
    title: HyTechUpdateTechRequestBody
    type: object
    properties:
      name:
        type: string
        description: Tech name
        example: Golang
        minLength: 1
        maxLength: 40
    example:
      name: Golang
    required:
    - name
  HyUserCreateUserRequestBody:
    title: HyUserCreateUserRequestBody
    type: object
    properties:
      email:
        type: string
        description: E-mail of user
        example: hy@gmail.com
        format: email
      password:
        type: string
        description: Password
        example: xxxxxxxx
        minLength: 8
        maxLength: 20
      user_name:
        type: string
        description: User name
        example: Hiroki
        minLength: 2
        maxLength: 20
      userID:
        type: integer
        description: User ID
        example: 4921675786632078098
        minimum: 1
    example:
      email: hy@gmail.com
      password: xxxxxxxx
      user_name: Hiroki
      userID: 342619316233253573
    required:
    - user_name
    - email
    - password
  HyUserGetUserResponseBody:
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
    properties:
      email:
        type: string
        description: E-mail of user
        example: hy@gmail.com
        format: email
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      user_name:
        type: string
        description: User name
        example: Hiroki
        minLength: 2
        maxLength: 20
    description: GetUserResponseBody result type (default view)
    example:
      email: hy@gmail.com
      id: 10
      user_name: Hiroki
    required:
    - user_name
    - email
  HyUserUpdateUserRequestBody:
    title: HyUserUpdateUserRequestBody
    type: object
    properties:
      email:
        type: string
        description: E-mail of user
        example: hy@gmail.com
        format: email
      password:
        type: string
        description: Password
        example: xxxxxxxx
        minLength: 8
        maxLength: 20
      user_name:
        type: string
        description: User name
        example: Hiroki
        minLength: 2
        maxLength: 20
    example:
      email: hy@gmail.com
      password: xxxxxxxx
      user_name: Hiroki
    required:
    - user_name
    - email
    - password
  HyUserUserResponseCollection:
    title: 'Mediatype identifier: application/vnd.user+json; type=collection; view=default'
    type: array
    items:
      $ref: '#/definitions/UserResponse'
    description: UserListResponseBody is the result type for an array of UserResponse
      (default view)
    example:
    - email: hy@gmail.com
      id: 10
      user_name: Hiroki
    - email: hy@gmail.com
      id: 10
      user_name: Hiroki
    - email: hy@gmail.com
      id: 10
      user_name: Hiroki
    - email: hy@gmail.com
      id: 10
      user_name: Hiroki
  HyUserWorkHistoryUserworkhistoryResponseCollection:
    title: 'Mediatype identifier: application/vnd.userworkhistory+json; type=collection;
      view=default'
    type: array
    items:
      $ref: '#/definitions/UserworkhistoryResponse'
    description: GetUserWorkHistoryResponseBody is the result type for an array of
      UserworkhistoryResponse (default view)
    example:
    - company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    - company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    - company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    - company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
  HyUsertechUsertechResponseCollection:
    title: 'Mediatype identifier: application/vnd.usertech+json; type=collection;
      view=default'
    type: array
    items:
      $ref: '#/definitions/UsertechResponse'
    description: GetUserLikeTechResponseBody is the result type for an array of UsertechResponse
      (default view)
    example:
    - id: 10
      tech_name: Golang
    - id: 10
      tech_name: Golang
  TechResponse:
    title: 'Mediatype identifier: application/vnd.tech+json; view=default'
    type: object
    properties:
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      name:
        type: string
        description: Tech name
        example: Golang
        minLength: 1
        maxLength: 40
    description: A tech information (default view)
    example:
      id: 10
      name: Golang
    required:
    - name
  UserResponse:
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
    properties:
      email:
        type: string
        description: E-mail of user
        example: hy@gmail.com
        format: email
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      user_name:
        type: string
        description: User name
        example: Hiroki
        minLength: 2
        maxLength: 20
    description: A user information (default view)
    example:
      email: hy@gmail.com
      id: 10
      user_name: Hiroki
    required:
    - user_name
    - email
  UsertechResponse:
    title: 'Mediatype identifier: application/vnd.usertech+json; view=default'
    type: object
    properties:
      id:
        type: integer
        description: ID
        example: 10
        minimum: 1
      tech_name:
        type: string
        description: Tech name
        example: Golang
        minLength: 1
        maxLength: 40
    description: A user information (default view)
    example:
      id: 10
      tech_name: Golang
    required:
    - tech_name
  UserworkhistoryResponse:
    title: 'Mediatype identifier: application/vnd.userworkhistory+json; view=default'
    type: object
    properties:
      company:
        type: string
        description: Company name
        example: Company
        minLength: 2
        maxLength: 40
      country:
        type: string
        description: Country code
        example: nl
        minLength: 2
        maxLength: 2
      description:
        description: job description
        example: '["Developed resume site for job seeking."]'
      techs:
        description: used techs
        example: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker",
          "Travis-CI"]'
      term:
        type: string
        description: worked period
        example: Jul 2017 - Aug 2017
        minLength: 10
        maxLength: 20
      title:
        type: string
        description: Job Title
        example: Developer
        minLength: 2
        maxLength: 40
    description: A user information (default view)
    example:
      company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    required:
    - title
    - company
    - country
securityDefinitions:
  jwt_header_Authorization:
    type: apiKey
    description: |2-

      **Security Scopes**:
        * `api:access`: API access
    name: Authorization
    in: header
externalDocs:
  description: goa README
  url: https://github.com/goadesign/goa
