// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_userWorkHistory HTTP server encoders and decoders
//
// Command:
// $ goa gen resume/design

package server

import (
	"context"
	"errors"
	"net/http"
	hyuserworkhistoryviews "resume/gen/hy_user_work_history/views"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetUserWorkHistoryResponse returns an encoder for responses returned
// by the hy_userWorkHistory getUserWorkHistory endpoint.
func EncodeGetUserWorkHistoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(hyuserworkhistoryviews.UserworkhistoryCollection)
		enc := encoder(ctx, w)
		body := NewUserworkhistoryResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetUserWorkHistoryRequest returns a decoder for requests sent to the
// hy_userWorkHistory getUserWorkHistory endpoint.
func DecodeGetUserWorkHistoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			userID int
			token  *string
			err    error

			params = mux.Vars(r)
		)
		{
			userIDRaw := params["user_id"]
			v, err2 := strconv.ParseInt(userIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("userID", userIDRaw, "integer"))
			}
			userID = int(v)
		}
		if userID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("userID", userID, 1, true))
		}
		tokenRaw := r.Header.Get("Authorization")
		if tokenRaw != "" {
			token = &tokenRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetUserWorkHistoryPayload(userID, token)
		if payload.Token != nil {
			if strings.Contains(*payload.Token, " ") {
				// Remove authorization scheme prefix (e.g. "Bearer")
				cred := strings.SplitN(*payload.Token, " ", 2)[1]
				payload.Token = &cred
			}
		}

		return payload, nil
	}
}

// EncodeGetUserWorkHistoryError returns an encoder for errors returned by the
// getUserWorkHistory hy_userWorkHistory endpoint.
func EncodeGetUserWorkHistoryError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "NotFound":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewGetUserWorkHistoryNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalHyuserworkhistoryviewsUserworkhistoryViewToUserworkhistoryResponse
// builds a value of type *UserworkhistoryResponse from a value of type
// *hyuserworkhistoryviews.UserworkhistoryView.
func marshalHyuserworkhistoryviewsUserworkhistoryViewToUserworkhistoryResponse(v *hyuserworkhistoryviews.UserworkhistoryView) *UserworkhistoryResponse {
	res := &UserworkhistoryResponse{
		Title:       v.Title,
		CompanyName: v.CompanyName,
		CountryName: v.CountryName,
		Term:        v.Term,
		Description: v.Description,
		Techs:       v.Techs,
	}

	return res
}
