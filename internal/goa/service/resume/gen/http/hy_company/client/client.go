// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_company client HTTP transport
//
// Command:
// $ goa gen resume/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the hy_company service endpoint HTTP clients.
type Client struct {
	// CompanyList Doer is the HTTP client used to make requests to the companyList
	// endpoint.
	CompanyListDoer goahttp.Doer

	// GetCompanyGroup Doer is the HTTP client used to make requests to the
	// getCompanyGroup endpoint.
	GetCompanyGroupDoer goahttp.Doer

	// CreateCompany Doer is the HTTP client used to make requests to the
	// createCompany endpoint.
	CreateCompanyDoer goahttp.Doer

	// UpdateCompany Doer is the HTTP client used to make requests to the
	// updateCompany endpoint.
	UpdateCompanyDoer goahttp.Doer

	// DeleteCompany Doer is the HTTP client used to make requests to the
	// deleteCompany endpoint.
	DeleteCompanyDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the hy_company service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CompanyListDoer:     doer,
		GetCompanyGroupDoer: doer,
		CreateCompanyDoer:   doer,
		UpdateCompanyDoer:   doer,
		DeleteCompanyDoer:   doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CompanyList returns an endpoint that makes HTTP requests to the hy_company
// service companyList server.
func (c *Client) CompanyList() goa.Endpoint {
	var (
		encodeRequest  = EncodeCompanyListRequest(c.encoder)
		decodeResponse = DecodeCompanyListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCompanyListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CompanyListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_company", "companyList", err)
		}
		return decodeResponse(resp)
	}
}

// GetCompanyGroup returns an endpoint that makes HTTP requests to the
// hy_company service getCompanyGroup server.
func (c *Client) GetCompanyGroup() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetCompanyGroupRequest(c.encoder)
		decodeResponse = DecodeGetCompanyGroupResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetCompanyGroupRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCompanyGroupDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_company", "getCompanyGroup", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCompany returns an endpoint that makes HTTP requests to the hy_company
// service createCompany server.
func (c *Client) CreateCompany() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCompanyRequest(c.encoder)
		decodeResponse = DecodeCreateCompanyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCompanyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCompanyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_company", "createCompany", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCompany returns an endpoint that makes HTTP requests to the hy_company
// service updateCompany server.
func (c *Client) UpdateCompany() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCompanyRequest(c.encoder)
		decodeResponse = DecodeUpdateCompanyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateCompanyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCompanyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_company", "updateCompany", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCompany returns an endpoint that makes HTTP requests to the hy_company
// service deleteCompany server.
func (c *Client) DeleteCompany() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteCompanyRequest(c.encoder)
		decodeResponse = DecodeDeleteCompanyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteCompanyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCompanyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hy_company", "deleteCompany", err)
		}
		return decodeResponse(resp)
	}
}
