// Code generated by goa v3.7.13, DO NOT EDIT.
//
// hy_company HTTP server
//
// Command:
// $ goa gen resume/design

package server

import (
	"context"
	"net/http"
	"regexp"
	hycompany "resume/gen/hy_company"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the hy_company service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	CompanyList     http.Handler
	GetCompanyGroup http.Handler
	CreateCompany   http.Handler
	UpdateCompany   http.Handler
	DeleteCompany   http.Handler
	CORS            http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the hy_company service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *hycompany.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CompanyList", "GET", "/company"},
			{"GetCompanyGroup", "GET", "/company/{company_id}"},
			{"CreateCompany", "POST", "/company"},
			{"UpdateCompany", "PUT", "/company/{company_id}"},
			{"DeleteCompany", "DELETE", "/company/{company_id}"},
			{"CORS", "OPTIONS", "/company"},
			{"CORS", "OPTIONS", "/company/{company_id}"},
		},
		CompanyList:     NewCompanyListHandler(e.CompanyList, mux, decoder, encoder, errhandler, formatter),
		GetCompanyGroup: NewGetCompanyGroupHandler(e.GetCompanyGroup, mux, decoder, encoder, errhandler, formatter),
		CreateCompany:   NewCreateCompanyHandler(e.CreateCompany, mux, decoder, encoder, errhandler, formatter),
		UpdateCompany:   NewUpdateCompanyHandler(e.UpdateCompany, mux, decoder, encoder, errhandler, formatter),
		DeleteCompany:   NewDeleteCompanyHandler(e.DeleteCompany, mux, decoder, encoder, errhandler, formatter),
		CORS:            NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "hy_company" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CompanyList = m(s.CompanyList)
	s.GetCompanyGroup = m(s.GetCompanyGroup)
	s.CreateCompany = m(s.CreateCompany)
	s.UpdateCompany = m(s.UpdateCompany)
	s.DeleteCompany = m(s.DeleteCompany)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the hy_company endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCompanyListHandler(mux, h.CompanyList)
	MountGetCompanyGroupHandler(mux, h.GetCompanyGroup)
	MountCreateCompanyHandler(mux, h.CreateCompany)
	MountUpdateCompanyHandler(mux, h.UpdateCompany)
	MountDeleteCompanyHandler(mux, h.DeleteCompany)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the hy_company endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCompanyListHandler configures the mux to serve the "hy_company" service
// "companyList" endpoint.
func MountCompanyListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/company", f)
}

// NewCompanyListHandler creates a HTTP handler which loads the HTTP request
// and calls the "hy_company" service "companyList" endpoint.
func NewCompanyListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCompanyListRequest(mux, decoder)
		encodeResponse = EncodeCompanyListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "companyList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_company")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCompanyGroupHandler configures the mux to serve the "hy_company"
// service "getCompanyGroup" endpoint.
func MountGetCompanyGroupHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/company/{company_id}", f)
}

// NewGetCompanyGroupHandler creates a HTTP handler which loads the HTTP
// request and calls the "hy_company" service "getCompanyGroup" endpoint.
func NewGetCompanyGroupHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCompanyGroupRequest(mux, decoder)
		encodeResponse = EncodeGetCompanyGroupResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getCompanyGroup")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_company")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateCompanyHandler configures the mux to serve the "hy_company"
// service "createCompany" endpoint.
func MountCreateCompanyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/company", f)
}

// NewCreateCompanyHandler creates a HTTP handler which loads the HTTP request
// and calls the "hy_company" service "createCompany" endpoint.
func NewCreateCompanyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCompanyRequest(mux, decoder)
		encodeResponse = EncodeCreateCompanyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createCompany")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_company")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateCompanyHandler configures the mux to serve the "hy_company"
// service "updateCompany" endpoint.
func MountUpdateCompanyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/company/{company_id}", f)
}

// NewUpdateCompanyHandler creates a HTTP handler which loads the HTTP request
// and calls the "hy_company" service "updateCompany" endpoint.
func NewUpdateCompanyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCompanyRequest(mux, decoder)
		encodeResponse = EncodeUpdateCompanyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateCompany")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_company")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCompanyHandler configures the mux to serve the "hy_company"
// service "deleteCompany" endpoint.
func MountDeleteCompanyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleHyCompanyOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/company/{company_id}", f)
}

// NewDeleteCompanyHandler creates a HTTP handler which loads the HTTP request
// and calls the "hy_company" service "deleteCompany" endpoint.
func NewDeleteCompanyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCompanyRequest(mux, decoder)
		encodeResponse = EncodeDeleteCompanyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteCompany")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hy_company")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service hy_company.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleHyCompanyOrigin(h)
	mux.Handle("OPTIONS", "/company", h.ServeHTTP)
	mux.Handle("OPTIONS", "/company/{company_id}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleHyCompanyOrigin applies the CORS response headers corresponding to the
// origin for the service hy_company.
func HandleHyCompanyOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile("swagger.goa.design")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
