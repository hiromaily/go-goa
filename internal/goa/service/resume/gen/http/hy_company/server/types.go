// Code generated by goa v3.10.2, DO NOT EDIT.
//
// hy_company HTTP server types
//
// Command:
// $ goa gen resume/design

package server

import (
	hycompany "resume/gen/hy_company"
	hycompanyviews "resume/gen/hy_company/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateCompanyRequestBody is the type of the "hy_company" service
// "createCompany" endpoint HTTP request body.
type CreateCompanyRequestBody struct {
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// UpdateCompanyRequestBody is the type of the "hy_company" service
// "updateCompany" endpoint HTTP request body.
type UpdateCompanyRequestBody struct {
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// CompanyResponseCollection is the type of the "hy_company" service
// "companyList" endpoint HTTP response body.
type CompanyResponseCollection []*CompanyResponse

// CompanyResponseIDCollection is the type of the "hy_company" service
// "companyList" endpoint HTTP response body.
type CompanyResponseIDCollection []*CompanyResponseID

// CompanyResponseIdnameCollection is the type of the "hy_company" service
// "companyList" endpoint HTTP response body.
type CompanyResponseIdnameCollection []*CompanyResponseIdname

// GetCompanyResponseBody is the type of the "hy_company" service "getCompany"
// endpoint HTTP response body.
type GetCompanyResponseBody struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// GetCompanyResponseBodyID is the type of the "hy_company" service
// "getCompany" endpoint HTTP response body.
type GetCompanyResponseBodyID struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
}

// GetCompanyResponseBodyIdname is the type of the "hy_company" service
// "getCompany" endpoint HTTP response body.
type GetCompanyResponseBodyIdname struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
}

// CreateCompanyResponseBody is the type of the "hy_company" service
// "createCompany" endpoint HTTP response body.
type CreateCompanyResponseBody struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// CreateCompanyResponseBodyID is the type of the "hy_company" service
// "createCompany" endpoint HTTP response body.
type CreateCompanyResponseBodyID struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
}

// CreateCompanyResponseBodyIdname is the type of the "hy_company" service
// "createCompany" endpoint HTTP response body.
type CreateCompanyResponseBodyIdname struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
}

// CompanyListNotFoundResponseBody is the type of the "hy_company" service
// "companyList" endpoint HTTP response body for the "NotFound" error.
type CompanyListNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompanyListUnauthorizedResponseBody is the type of the "hy_company" service
// "companyList" endpoint HTTP response body for the "Unauthorized" error.
type CompanyListUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCompanyNotFoundResponseBody is the type of the "hy_company" service
// "getCompany" endpoint HTTP response body for the "NotFound" error.
type GetCompanyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCompanyUnauthorizedResponseBody is the type of the "hy_company" service
// "getCompany" endpoint HTTP response body for the "Unauthorized" error.
type GetCompanyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCompanyBadRequestResponseBody is the type of the "hy_company" service
// "createCompany" endpoint HTTP response body for the "BadRequest" error.
type CreateCompanyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateCompanyUnauthorizedResponseBody is the type of the "hy_company"
// service "createCompany" endpoint HTTP response body for the "Unauthorized"
// error.
type CreateCompanyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCompanyBadRequestResponseBody is the type of the "hy_company" service
// "updateCompany" endpoint HTTP response body for the "BadRequest" error.
type UpdateCompanyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCompanyNotFoundResponseBody is the type of the "hy_company" service
// "updateCompany" endpoint HTTP response body for the "NotFound" error.
type UpdateCompanyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateCompanyUnauthorizedResponseBody is the type of the "hy_company"
// service "updateCompany" endpoint HTTP response body for the "Unauthorized"
// error.
type UpdateCompanyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCompanyNotFoundResponseBody is the type of the "hy_company" service
// "deleteCompany" endpoint HTTP response body for the "NotFound" error.
type DeleteCompanyNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteCompanyUnauthorizedResponseBody is the type of the "hy_company"
// service "deleteCompany" endpoint HTTP response body for the "Unauthorized"
// error.
type DeleteCompanyUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CompanyResponse is used to define fields on response body types.
type CompanyResponse struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// CompanyResponseID is used to define fields on response body types.
type CompanyResponseID struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
}

// CompanyResponseIdname is used to define fields on response body types.
type CompanyResponseIdname struct {
	// Key ID
	CompanyID *int `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	// Company name
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty" xml:"company_name,omitempty"`
}

// NewCompanyResponseCollection builds the HTTP response body from the result
// of the "companyList" endpoint of the "hy_company" service.
func NewCompanyResponseCollection(res hycompanyviews.CompanyCollectionView) CompanyResponseCollection {
	body := make([]*CompanyResponse, len(res))
	for i, val := range res {
		body[i] = marshalHycompanyviewsCompanyViewToCompanyResponse(val)
	}
	return body
}

// NewCompanyResponseIDCollection builds the HTTP response body from the result
// of the "companyList" endpoint of the "hy_company" service.
func NewCompanyResponseIDCollection(res hycompanyviews.CompanyCollectionView) CompanyResponseIDCollection {
	body := make([]*CompanyResponseID, len(res))
	for i, val := range res {
		body[i] = marshalHycompanyviewsCompanyViewToCompanyResponseID(val)
	}
	return body
}

// NewCompanyResponseIdnameCollection builds the HTTP response body from the
// result of the "companyList" endpoint of the "hy_company" service.
func NewCompanyResponseIdnameCollection(res hycompanyviews.CompanyCollectionView) CompanyResponseIdnameCollection {
	body := make([]*CompanyResponseIdname, len(res))
	for i, val := range res {
		body[i] = marshalHycompanyviewsCompanyViewToCompanyResponseIdname(val)
	}
	return body
}

// NewGetCompanyResponseBody builds the HTTP response body from the result of
// the "getCompany" endpoint of the "hy_company" service.
func NewGetCompanyResponseBody(res *hycompanyviews.CompanyView) *GetCompanyResponseBody {
	body := &GetCompanyResponseBody{
		CompanyID:   res.CompanyID,
		CompanyName: res.CompanyName,
		CountryName: res.CountryName,
		Address:     res.Address,
	}
	return body
}

// NewGetCompanyResponseBodyID builds the HTTP response body from the result of
// the "getCompany" endpoint of the "hy_company" service.
func NewGetCompanyResponseBodyID(res *hycompanyviews.CompanyView) *GetCompanyResponseBodyID {
	body := &GetCompanyResponseBodyID{
		CompanyID: res.CompanyID,
	}
	return body
}

// NewGetCompanyResponseBodyIdname builds the HTTP response body from the
// result of the "getCompany" endpoint of the "hy_company" service.
func NewGetCompanyResponseBodyIdname(res *hycompanyviews.CompanyView) *GetCompanyResponseBodyIdname {
	body := &GetCompanyResponseBodyIdname{
		CompanyID:   res.CompanyID,
		CompanyName: res.CompanyName,
	}
	return body
}

// NewCreateCompanyResponseBody builds the HTTP response body from the result
// of the "createCompany" endpoint of the "hy_company" service.
func NewCreateCompanyResponseBody(res *hycompanyviews.CompanyView) *CreateCompanyResponseBody {
	body := &CreateCompanyResponseBody{
		CompanyID:   res.CompanyID,
		CompanyName: res.CompanyName,
		CountryName: res.CountryName,
		Address:     res.Address,
	}
	return body
}

// NewCreateCompanyResponseBodyID builds the HTTP response body from the result
// of the "createCompany" endpoint of the "hy_company" service.
func NewCreateCompanyResponseBodyID(res *hycompanyviews.CompanyView) *CreateCompanyResponseBodyID {
	body := &CreateCompanyResponseBodyID{
		CompanyID: res.CompanyID,
	}
	return body
}

// NewCreateCompanyResponseBodyIdname builds the HTTP response body from the
// result of the "createCompany" endpoint of the "hy_company" service.
func NewCreateCompanyResponseBodyIdname(res *hycompanyviews.CompanyView) *CreateCompanyResponseBodyIdname {
	body := &CreateCompanyResponseBodyIdname{
		CompanyID:   res.CompanyID,
		CompanyName: res.CompanyName,
	}
	return body
}

// NewCompanyListNotFoundResponseBody builds the HTTP response body from the
// result of the "companyList" endpoint of the "hy_company" service.
func NewCompanyListNotFoundResponseBody(res *goa.ServiceError) *CompanyListNotFoundResponseBody {
	body := &CompanyListNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompanyListUnauthorizedResponseBody builds the HTTP response body from
// the result of the "companyList" endpoint of the "hy_company" service.
func NewCompanyListUnauthorizedResponseBody(res *goa.ServiceError) *CompanyListUnauthorizedResponseBody {
	body := &CompanyListUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCompanyNotFoundResponseBody builds the HTTP response body from the
// result of the "getCompany" endpoint of the "hy_company" service.
func NewGetCompanyNotFoundResponseBody(res *goa.ServiceError) *GetCompanyNotFoundResponseBody {
	body := &GetCompanyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCompanyUnauthorizedResponseBody builds the HTTP response body from the
// result of the "getCompany" endpoint of the "hy_company" service.
func NewGetCompanyUnauthorizedResponseBody(res *goa.ServiceError) *GetCompanyUnauthorizedResponseBody {
	body := &GetCompanyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCompanyBadRequestResponseBody builds the HTTP response body from
// the result of the "createCompany" endpoint of the "hy_company" service.
func NewCreateCompanyBadRequestResponseBody(res *goa.ServiceError) *CreateCompanyBadRequestResponseBody {
	body := &CreateCompanyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateCompanyUnauthorizedResponseBody builds the HTTP response body from
// the result of the "createCompany" endpoint of the "hy_company" service.
func NewCreateCompanyUnauthorizedResponseBody(res *goa.ServiceError) *CreateCompanyUnauthorizedResponseBody {
	body := &CreateCompanyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCompanyBadRequestResponseBody builds the HTTP response body from
// the result of the "updateCompany" endpoint of the "hy_company" service.
func NewUpdateCompanyBadRequestResponseBody(res *goa.ServiceError) *UpdateCompanyBadRequestResponseBody {
	body := &UpdateCompanyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCompanyNotFoundResponseBody builds the HTTP response body from the
// result of the "updateCompany" endpoint of the "hy_company" service.
func NewUpdateCompanyNotFoundResponseBody(res *goa.ServiceError) *UpdateCompanyNotFoundResponseBody {
	body := &UpdateCompanyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateCompanyUnauthorizedResponseBody builds the HTTP response body from
// the result of the "updateCompany" endpoint of the "hy_company" service.
func NewUpdateCompanyUnauthorizedResponseBody(res *goa.ServiceError) *UpdateCompanyUnauthorizedResponseBody {
	body := &UpdateCompanyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCompanyNotFoundResponseBody builds the HTTP response body from the
// result of the "deleteCompany" endpoint of the "hy_company" service.
func NewDeleteCompanyNotFoundResponseBody(res *goa.ServiceError) *DeleteCompanyNotFoundResponseBody {
	body := &DeleteCompanyNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteCompanyUnauthorizedResponseBody builds the HTTP response body from
// the result of the "deleteCompany" endpoint of the "hy_company" service.
func NewDeleteCompanyUnauthorizedResponseBody(res *goa.ServiceError) *DeleteCompanyUnauthorizedResponseBody {
	body := &DeleteCompanyUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCompanyListPayload builds a hy_company service companyList endpoint
// payload.
func NewCompanyListPayload(token *string) *hycompany.CompanyListPayload {
	v := &hycompany.CompanyListPayload{}
	v.Token = token

	return v
}

// NewGetCompanyPayload builds a hy_company service getCompany endpoint payload.
func NewGetCompanyPayload(companyID int, token *string) *hycompany.GetCompanyPayload {
	v := &hycompany.GetCompanyPayload{}
	v.CompanyID = companyID
	v.Token = token

	return v
}

// NewCreateCompanyPayload builds a hy_company service createCompany endpoint
// payload.
func NewCreateCompanyPayload(body *CreateCompanyRequestBody, token *string) *hycompany.CreateCompanyPayload {
	v := &hycompany.CreateCompanyPayload{
		CountryID:   *body.CountryID,
		CompanyName: *body.CompanyName,
		Address:     *body.Address,
	}
	v.Token = token

	return v
}

// NewUpdateCompanyPayload builds a hy_company service updateCompany endpoint
// payload.
func NewUpdateCompanyPayload(body *UpdateCompanyRequestBody, companyID int, token *string) *hycompany.UpdateCompanyPayload {
	v := &hycompany.UpdateCompanyPayload{
		CountryID:   body.CountryID,
		CompanyName: body.CompanyName,
		Address:     body.Address,
	}
	v.CompanyID = companyID
	v.Token = token

	return v
}

// NewDeleteCompanyPayload builds a hy_company service deleteCompany endpoint
// payload.
func NewDeleteCompanyPayload(companyID int, token *string) *hycompany.DeleteCompanyPayload {
	v := &hycompany.DeleteCompanyPayload{}
	v.CompanyID = companyID
	v.Token = token

	return v
}

// ValidateCreateCompanyRequestBody runs the validations defined on
// CreateCompanyRequestBody
func ValidateCreateCompanyRequestBody(body *CreateCompanyRequestBody) (err error) {
	if body.CompanyName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("company_name", "body"))
	}
	if body.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country_id", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.CountryID != nil {
		if *body.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 1, true))
		}
	}
	if body.CountryID != nil {
		if *body.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 999, false))
		}
	}
	if body.CompanyName != nil {
		if utf8.RuneCountInString(*body.CompanyName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.company_name", *body.CompanyName, utf8.RuneCountInString(*body.CompanyName), 2, true))
		}
	}
	if body.CompanyName != nil {
		if utf8.RuneCountInString(*body.CompanyName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.company_name", *body.CompanyName, utf8.RuneCountInString(*body.CompanyName), 40, false))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 2, true))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 80, false))
		}
	}
	return
}

// ValidateUpdateCompanyRequestBody runs the validations defined on
// UpdateCompanyRequestBody
func ValidateUpdateCompanyRequestBody(body *UpdateCompanyRequestBody) (err error) {
	if body.CountryID != nil {
		if *body.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 1, true))
		}
	}
	if body.CountryID != nil {
		if *body.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.country_id", *body.CountryID, 999, false))
		}
	}
	if body.CompanyName != nil {
		if utf8.RuneCountInString(*body.CompanyName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.company_name", *body.CompanyName, utf8.RuneCountInString(*body.CompanyName), 2, true))
		}
	}
	if body.CompanyName != nil {
		if utf8.RuneCountInString(*body.CompanyName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.company_name", *body.CompanyName, utf8.RuneCountInString(*body.CompanyName), 40, false))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 2, true))
		}
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 80, false))
		}
	}
	return
}
