// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_usertech endpoints
//
// Command:
// $ goa gen resume/design

package hyusertech

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "hy_usertech" service endpoints.
type Endpoints struct {
	GetUserLikeTech    goa.Endpoint
	GetUserDisLikeTech goa.Endpoint
}

// NewEndpoints wraps the methods of the "hy_usertech" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		GetUserLikeTech:    NewGetUserLikeTechEndpoint(s, a.JWTAuth),
		GetUserDisLikeTech: NewGetUserDisLikeTechEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "hy_usertech" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetUserLikeTech = m(e.GetUserLikeTech)
	e.GetUserDisLikeTech = m(e.GetUserDisLikeTech)
}

// NewGetUserLikeTechEndpoint returns an endpoint function that calls the
// method "getUserLikeTech" of service "hy_usertech".
func NewGetUserLikeTechEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserLikeTechPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetUserLikeTech(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedUsertechCollection(res, view)
		return vres, nil
	}
}

// NewGetUserDisLikeTechEndpoint returns an endpoint function that calls the
// method "getUserDisLikeTech" of service "hy_usertech".
func NewGetUserDisLikeTechEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserDisLikeTechPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetUserDisLikeTech(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedUsertechCollection(res, view)
		return vres, nil
	}
}
