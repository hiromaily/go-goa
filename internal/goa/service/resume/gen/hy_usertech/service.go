// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_usertech service
//
// Command:
// $ goa gen resume/design

package hyusertech

import (
	"context"
	hyusertechviews "resume/gen/hy_usertech/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The usertech service returns user's tech data
type Service interface {
	// get user's favorite techs
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "techName": only tech name
	GetUserLikeTech(context.Context, *GetUserLikeTechPayload) (res UsertechCollection, view string, err error)
	// get user's dislike techs
	// The "view" return value must have one of the following views
	//	- "default"
	//	- "techName": only tech name
	GetUserDisLikeTech(context.Context, *GetUserDisLikeTechPayload) (res UsertechCollection, view string, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "hy_usertech"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"getUserLikeTech", "getUserDisLikeTech"}

// GetUserDisLikeTechPayload is the payload type of the hy_usertech service
// getUserDisLikeTech method.
type GetUserDisLikeTechPayload struct {
	// JWT token used to perform authorization
	Token *string
	// User ID
	UserID int
}

// GetUserLikeTechPayload is the payload type of the hy_usertech service
// getUserLikeTech method.
type GetUserLikeTechPayload struct {
	// JWT token used to perform authorization
	Token *string
	// User ID
	UserID int
}

// A user information
type Usertech struct {
	// Key ID
	ID *int
	// Tech name
	TechName *string
}

// UsertechCollection is the result type of the hy_usertech service
// getUserLikeTech method.
type UsertechCollection []*Usertech

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "NotFound", false, false, false)
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "BadRequest", false, false, false)
}

// NewUsertechCollection initializes result type UsertechCollection from viewed
// result type UsertechCollection.
func NewUsertechCollection(vres hyusertechviews.UsertechCollection) UsertechCollection {
	var res UsertechCollection
	switch vres.View {
	case "default", "":
		res = newUsertechCollection(vres.Projected)
	case "techName":
		res = newUsertechCollectionTechName(vres.Projected)
	}
	return res
}

// NewViewedUsertechCollection initializes viewed result type
// UsertechCollection from result type UsertechCollection using the given view.
func NewViewedUsertechCollection(res UsertechCollection, view string) hyusertechviews.UsertechCollection {
	var vres hyusertechviews.UsertechCollection
	switch view {
	case "default", "":
		p := newUsertechCollectionView(res)
		vres = hyusertechviews.UsertechCollection{Projected: p, View: "default"}
	case "techName":
		p := newUsertechCollectionViewTechName(res)
		vres = hyusertechviews.UsertechCollection{Projected: p, View: "techName"}
	}
	return vres
}

// newUsertechCollection converts projected type UsertechCollection to service
// type UsertechCollection.
func newUsertechCollection(vres hyusertechviews.UsertechCollectionView) UsertechCollection {
	res := make(UsertechCollection, len(vres))
	for i, n := range vres {
		res[i] = newUsertech(n)
	}
	return res
}

// newUsertechCollectionTechName converts projected type UsertechCollection to
// service type UsertechCollection.
func newUsertechCollectionTechName(vres hyusertechviews.UsertechCollectionView) UsertechCollection {
	res := make(UsertechCollection, len(vres))
	for i, n := range vres {
		res[i] = newUsertechTechName(n)
	}
	return res
}

// newUsertechCollectionView projects result type UsertechCollection to
// projected type UsertechCollectionView using the "default" view.
func newUsertechCollectionView(res UsertechCollection) hyusertechviews.UsertechCollectionView {
	vres := make(hyusertechviews.UsertechCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUsertechView(n)
	}
	return vres
}

// newUsertechCollectionViewTechName projects result type UsertechCollection to
// projected type UsertechCollectionView using the "techName" view.
func newUsertechCollectionViewTechName(res UsertechCollection) hyusertechviews.UsertechCollectionView {
	vres := make(hyusertechviews.UsertechCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUsertechViewTechName(n)
	}
	return vres
}

// newUsertech converts projected type Usertech to service type Usertech.
func newUsertech(vres *hyusertechviews.UsertechView) *Usertech {
	res := &Usertech{
		ID:       vres.ID,
		TechName: vres.TechName,
	}
	return res
}

// newUsertechTechName converts projected type Usertech to service type
// Usertech.
func newUsertechTechName(vres *hyusertechviews.UsertechView) *Usertech {
	res := &Usertech{
		TechName: vres.TechName,
	}
	return res
}

// newUsertechView projects result type Usertech to projected type UsertechView
// using the "default" view.
func newUsertechView(res *Usertech) *hyusertechviews.UsertechView {
	vres := &hyusertechviews.UsertechView{
		ID:       res.ID,
		TechName: res.TechName,
	}
	return vres
}

// newUsertechViewTechName projects result type Usertech to projected type
// UsertechView using the "techName" view.
func newUsertechViewTechName(res *Usertech) *hyusertechviews.UsertechView {
	vres := &hyusertechviews.UsertechView{
		TechName: res.TechName,
	}
	return vres
}
