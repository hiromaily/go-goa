// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_company views
//
// Command:
// $ goa gen resume/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CompanyCollection is the viewed result type that is projected based on a
// view.
type CompanyCollection struct {
	// Type to project
	Projected CompanyCollectionView
	// View to render
	View string
}

// CompanyCollectionView is a type that runs validations on a projected type.
type CompanyCollectionView []*CompanyView

// CompanyView is a type that runs validations on a projected type.
type CompanyView struct {
	// ID
	ID *int
	// ID
	CompanyID *int
	// Company name
	Name        *string
	IsHq        *string
	CountryName *string
	// Company Address
	Address *string
	// Datetime
	CreatedAt *string
	// Datetime
	UpdatedAt *string
}

var (
	// CompanyCollectionMap is a map indexing the attribute names of
	// CompanyCollection by view name.
	CompanyCollectionMap = map[string][]string{
		"default": {
			"id",
			"company_id",
			"name",
			"is_hq",
			"country_name",
			"address",
		},
		"detailid": {
			"id",
		},
		"id": {
			"company_id",
		},
		"idname": {
			"company_id",
			"name",
		},
	}
	// CompanyMap is a map indexing the attribute names of Company by view name.
	CompanyMap = map[string][]string{
		"default": {
			"id",
			"company_id",
			"name",
			"is_hq",
			"country_name",
			"address",
		},
		"detailid": {
			"id",
		},
		"id": {
			"company_id",
		},
		"idname": {
			"company_id",
			"name",
		},
	}
)

// ValidateCompanyCollection runs the validations defined on the viewed result
// type CompanyCollection.
func ValidateCompanyCollection(result CompanyCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCompanyCollectionView(result.Projected)
	case "detailid":
		err = ValidateCompanyCollectionViewDetailid(result.Projected)
	case "id":
		err = ValidateCompanyCollectionViewID(result.Projected)
	case "idname":
		err = ValidateCompanyCollectionViewIdname(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "detailid", "id", "idname"})
	}
	return
}

// ValidateCompanyCollectionView runs the validations defined on
// CompanyCollectionView using the "default" view.
func ValidateCompanyCollectionView(result CompanyCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCompanyView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCompanyCollectionViewDetailid runs the validations defined on
// CompanyCollectionView using the "detailid" view.
func ValidateCompanyCollectionViewDetailid(result CompanyCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCompanyViewDetailid(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCompanyCollectionViewID runs the validations defined on
// CompanyCollectionView using the "id" view.
func ValidateCompanyCollectionViewID(result CompanyCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCompanyViewID(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCompanyCollectionViewIdname runs the validations defined on
// CompanyCollectionView using the "idname" view.
func ValidateCompanyCollectionViewIdname(result CompanyCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateCompanyViewIdname(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCompanyView runs the validations defined on CompanyView using the
// "default" view.
func ValidateCompanyView(result *CompanyView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "result"))
	}
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	if result.CompanyID != nil {
		if *result.CompanyID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.company_id", *result.CompanyID, 1, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 2, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 40, false))
		}
	}
	if result.Address != nil {
		if utf8.RuneCountInString(*result.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.address", *result.Address, utf8.RuneCountInString(*result.Address), 2, true))
		}
	}
	if result.Address != nil {
		if utf8.RuneCountInString(*result.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.address", *result.Address, utf8.RuneCountInString(*result.Address), 80, false))
		}
	}
	return
}

// ValidateCompanyViewDetailid runs the validations defined on CompanyView
// using the "detailid" view.
func ValidateCompanyViewDetailid(result *CompanyView) (err error) {
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	return
}

// ValidateCompanyViewID runs the validations defined on CompanyView using the
// "id" view.
func ValidateCompanyViewID(result *CompanyView) (err error) {
	if result.CompanyID != nil {
		if *result.CompanyID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.company_id", *result.CompanyID, 1, true))
		}
	}
	return
}

// ValidateCompanyViewIdname runs the validations defined on CompanyView using
// the "idname" view.
func ValidateCompanyViewIdname(result *CompanyView) (err error) {
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.CompanyID != nil {
		if *result.CompanyID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.company_id", *result.CompanyID, 1, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 2, true))
		}
	}
	if result.Name != nil {
		if utf8.RuneCountInString(*result.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.name", *result.Name, utf8.RuneCountInString(*result.Name), 40, false))
		}
	}
	return
}
