// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_company endpoints
//
// Command:
// $ goa gen resume/design

package hycompany

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "hy_company" service endpoints.
type Endpoints struct {
	CompanyList     goa.Endpoint
	GetCompanyGroup goa.Endpoint
	CreateCompany   goa.Endpoint
	UpdateCompany   goa.Endpoint
	DeleteCompany   goa.Endpoint
}

// NewEndpoints wraps the methods of the "hy_company" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		CompanyList:     NewCompanyListEndpoint(s, a.JWTAuth),
		GetCompanyGroup: NewGetCompanyGroupEndpoint(s, a.JWTAuth),
		CreateCompany:   NewCreateCompanyEndpoint(s, a.JWTAuth),
		UpdateCompany:   NewUpdateCompanyEndpoint(s, a.JWTAuth),
		DeleteCompany:   NewDeleteCompanyEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "hy_company" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CompanyList = m(e.CompanyList)
	e.GetCompanyGroup = m(e.GetCompanyGroup)
	e.CreateCompany = m(e.CreateCompany)
	e.UpdateCompany = m(e.UpdateCompany)
	e.DeleteCompany = m(e.DeleteCompany)
}

// NewCompanyListEndpoint returns an endpoint function that calls the method
// "companyList" of service "hy_company".
func NewCompanyListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CompanyListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.CompanyList(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCompanyCollection(res, view)
		return vres, nil
	}
}

// NewGetCompanyGroupEndpoint returns an endpoint function that calls the
// method "getCompanyGroup" of service "hy_company".
func NewGetCompanyGroupEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetCompanyGroupPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetCompanyGroup(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCompanyCollection(res, view)
		return vres, nil
	}
}

// NewCreateCompanyEndpoint returns an endpoint function that calls the method
// "createCompany" of service "hy_company".
func NewCreateCompanyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateCompanyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.CreateCompany(ctx, p)
	}
}

// NewUpdateCompanyEndpoint returns an endpoint function that calls the method
// "updateCompany" of service "hy_company".
func NewUpdateCompanyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateCompanyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.UpdateCompany(ctx, p)
	}
}

// NewDeleteCompanyEndpoint returns an endpoint function that calls the method
// "deleteCompany" of service "hy_company".
func NewDeleteCompanyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteCompanyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteCompany(ctx, p)
	}
}
