// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_userWorkHistory views
//
// Command:
// $ goa gen resume/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// UserworkhistoryCollection is the viewed result type that is projected based
// on a view.
type UserworkhistoryCollection struct {
	// Type to project
	Projected UserworkhistoryCollectionView
	// View to render
	View string
}

// UserworkhistoryCollectionView is a type that runs validations on a projected
// type.
type UserworkhistoryCollectionView []*UserworkhistoryView

// UserworkhistoryView is a type that runs validations on a projected type.
type UserworkhistoryView struct {
	// Job Title
	Title *string
	// Company name
	Company *string
	// Country code
	Country *string
	// worked period
	Term *string
	// job description
	Description interface{}
	// used techs
	Techs interface{}
}

var (
	// UserworkhistoryCollectionMap is a map indexing the attribute names of
	// UserworkhistoryCollection by view name.
	UserworkhistoryCollectionMap = map[string][]string{
		"default": {
			"title",
			"company",
			"country",
			"term",
			"description",
			"techs",
		},
	}
	// UserworkhistoryMap is a map indexing the attribute names of Userworkhistory
	// by view name.
	UserworkhistoryMap = map[string][]string{
		"default": {
			"title",
			"company",
			"country",
			"term",
			"description",
			"techs",
		},
	}
)

// ValidateUserworkhistoryCollection runs the validations defined on the viewed
// result type UserworkhistoryCollection.
func ValidateUserworkhistoryCollection(result UserworkhistoryCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserworkhistoryCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserworkhistoryCollectionView runs the validations defined on
// UserworkhistoryCollectionView using the "default" view.
func ValidateUserworkhistoryCollectionView(result UserworkhistoryCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateUserworkhistoryView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserworkhistoryView runs the validations defined on
// UserworkhistoryView using the "default" view.
func ValidateUserworkhistoryView(result *UserworkhistoryView) (err error) {
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Company == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("company", "result"))
	}
	if result.Country == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("country", "result"))
	}
	if result.Title != nil {
		if utf8.RuneCountInString(*result.Title) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.title", *result.Title, utf8.RuneCountInString(*result.Title), 2, true))
		}
	}
	if result.Title != nil {
		if utf8.RuneCountInString(*result.Title) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.title", *result.Title, utf8.RuneCountInString(*result.Title), 40, false))
		}
	}
	if result.Company != nil {
		if utf8.RuneCountInString(*result.Company) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.company", *result.Company, utf8.RuneCountInString(*result.Company), 2, true))
		}
	}
	if result.Company != nil {
		if utf8.RuneCountInString(*result.Company) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.company", *result.Company, utf8.RuneCountInString(*result.Company), 40, false))
		}
	}
	if result.Country != nil {
		if utf8.RuneCountInString(*result.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.country", *result.Country, utf8.RuneCountInString(*result.Country), 2, true))
		}
	}
	if result.Country != nil {
		if utf8.RuneCountInString(*result.Country) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.country", *result.Country, utf8.RuneCountInString(*result.Country), 2, false))
		}
	}
	if result.Term != nil {
		if utf8.RuneCountInString(*result.Term) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.term", *result.Term, utf8.RuneCountInString(*result.Term), 10, true))
		}
	}
	if result.Term != nil {
		if utf8.RuneCountInString(*result.Term) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.term", *result.Term, utf8.RuneCountInString(*result.Term), 20, false))
		}
	}
	return
}
