// Code generated by goa v3.2.6, DO NOT EDIT.
//
// hy_tech endpoints
//
// Command:
// $ goa gen resume/design

package hytech

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "hy_tech" service endpoints.
type Endpoints struct {
	TechList   goa.Endpoint
	GetTech    goa.Endpoint
	CreateTech goa.Endpoint
	UpdateTech goa.Endpoint
	DeleteTech goa.Endpoint
}

// NewEndpoints wraps the methods of the "hy_tech" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		TechList:   NewTechListEndpoint(s, a.JWTAuth),
		GetTech:    NewGetTechEndpoint(s, a.JWTAuth),
		CreateTech: NewCreateTechEndpoint(s, a.JWTAuth),
		UpdateTech: NewUpdateTechEndpoint(s, a.JWTAuth),
		DeleteTech: NewDeleteTechEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "hy_tech" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.TechList = m(e.TechList)
	e.GetTech = m(e.GetTech)
	e.CreateTech = m(e.CreateTech)
	e.UpdateTech = m(e.UpdateTech)
	e.DeleteTech = m(e.DeleteTech)
}

// NewTechListEndpoint returns an endpoint function that calls the method
// "techList" of service "hy_tech".
func NewTechListEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TechListPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.TechList(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTechCollection(res, view)
		return vres, nil
	}
}

// NewGetTechEndpoint returns an endpoint function that calls the method
// "getTech" of service "hy_tech".
func NewGetTechEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetTechPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, view, err := s.GetTech(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCompany(res, view)
		return vres, nil
	}
}

// NewCreateTechEndpoint returns an endpoint function that calls the method
// "createTech" of service "hy_tech".
func NewCreateTechEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateTechPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.CreateTech(ctx, p)
	}
}

// NewUpdateTechEndpoint returns an endpoint function that calls the method
// "updateTech" of service "hy_tech".
func NewUpdateTechEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateTechPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.UpdateTech(ctx, p)
	}
}

// NewDeleteTechEndpoint returns an endpoint function that calls the method
// "deleteTech" of service "hy_tech".
func NewDeleteTechEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteTechPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		var token string
		if p.Token != nil {
			token = *p.Token
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.DeleteTech(ctx, p)
	}
}
