// Code generated by goa v3.10.1, DO NOT EDIT.
//
// hy_tech views
//
// Command:
// $ goa gen resume/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// TechCollection is the viewed result type that is projected based on a view.
type TechCollection struct {
	// Type to project
	Projected TechCollectionView
	// View to render
	View string
}

// Tech is the viewed result type that is projected based on a view.
type Tech struct {
	// Type to project
	Projected *TechView
	// View to render
	View string
}

// TechCollectionView is a type that runs validations on a projected type.
type TechCollectionView []*TechView

// TechView is a type that runs validations on a projected type.
type TechView struct {
	// Key ID
	TechID *int
	// Tech name
	TechName *string
	// Datetime
	CreatedAt *string
	// Datetime
	UpdatedAt *string
}

var (
	// TechCollectionMap is a map indexing the attribute names of TechCollection by
	// view name.
	TechCollectionMap = map[string][]string{
		"default": {
			"tech_id",
			"tech_name",
		},
		"id": {
			"tech_id",
		},
	}
	// TechMap is a map indexing the attribute names of Tech by view name.
	TechMap = map[string][]string{
		"default": {
			"tech_id",
			"tech_name",
		},
		"id": {
			"tech_id",
		},
	}
)

// ValidateTechCollection runs the validations defined on the viewed result
// type TechCollection.
func ValidateTechCollection(result TechCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTechCollectionView(result.Projected)
	case "id":
		err = ValidateTechCollectionViewID(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "id"})
	}
	return
}

// ValidateTech runs the validations defined on the viewed result type Tech.
func ValidateTech(result *Tech) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTechView(result.Projected)
	case "id":
		err = ValidateTechViewID(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default", "id"})
	}
	return
}

// ValidateTechCollectionView runs the validations defined on
// TechCollectionView using the "default" view.
func ValidateTechCollectionView(result TechCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTechView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTechCollectionViewID runs the validations defined on
// TechCollectionView using the "id" view.
func ValidateTechCollectionViewID(result TechCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTechViewID(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTechView runs the validations defined on TechView using the
// "default" view.
func ValidateTechView(result *TechView) (err error) {
	if result.TechID != nil {
		if *result.TechID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.tech_id", *result.TechID, 1, true))
		}
	}
	if result.TechName != nil {
		if utf8.RuneCountInString(*result.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.tech_name", *result.TechName, utf8.RuneCountInString(*result.TechName), 1, true))
		}
	}
	if result.TechName != nil {
		if utf8.RuneCountInString(*result.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.tech_name", *result.TechName, utf8.RuneCountInString(*result.TechName), 40, false))
		}
	}
	return
}

// ValidateTechViewID runs the validations defined on TechView using the "id"
// view.
func ValidateTechViewID(result *TechView) (err error) {
	if result.TechID != nil {
		if *result.TechID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.tech_id", *result.TechID, 1, true))
		}
	}
	return
}
