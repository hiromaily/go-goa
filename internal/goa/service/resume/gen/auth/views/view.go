// Code generated by goa v3.10.1, DO NOT EDIT.
//
// auth views
//
// Command:
// $ goa gen resume/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Authorized is the viewed result type that is projected based on a view.
type Authorized struct {
	// Type to project
	Projected *AuthorizedView
	// View to render
	View string
}

// AuthorizedView is a type that runs validations on a projected type.
type AuthorizedView struct {
	// JWT token
	Token *string
	// ID
	ID *int
}

var (
	// AuthorizedMap is a map indexing the attribute names of Authorized by view
	// name.
	AuthorizedMap = map[string][]string{
		"default": {
			"token",
			"id",
		},
	}
)

// ValidateAuthorized runs the validations defined on the viewed result type
// Authorized.
func ValidateAuthorized(result *Authorized) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAuthorizedView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAuthorizedView runs the validations defined on AuthorizedView using
// the "default" view.
func ValidateAuthorizedView(result *AuthorizedView) (err error) {
	if result.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "result"))
	}
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.ID != nil {
		if *result.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.id", *result.ID, 1, true))
		}
	}
	return
}
