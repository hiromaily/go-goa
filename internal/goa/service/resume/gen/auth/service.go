// Code generated by goa v3.10.2, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen resume/design

package auth

import (
	"context"
	authviews "resume/gen/auth/views"

	goa "goa.design/goa/v3/pkg"
)

// The auth service performs login with JWT
type Service interface {
	// Login and return jwt token
	Login(context.Context, *LoginPayload) (res *Authorized, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"login"}

// Authorized is the result type of the auth service login method.
type Authorized struct {
	// JWT token
	Token string
	// Key ID
	ID int
}

// LoginPayload is the payload type of the auth service login method.
type LoginPayload struct {
	// E-mail of user
	Email string
	// Password
	Password string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "Unauthorized", false, false, false)
}

// NewAuthorized initializes result type Authorized from viewed result type
// Authorized.
func NewAuthorized(vres *authviews.Authorized) *Authorized {
	return newAuthorized(vres.Projected)
}

// NewViewedAuthorized initializes viewed result type Authorized from result
// type Authorized using the given view.
func NewViewedAuthorized(res *Authorized, view string) *authviews.Authorized {
	p := newAuthorizedView(res)
	return &authviews.Authorized{Projected: p, View: "default"}
}

// newAuthorized converts projected type Authorized to service type Authorized.
func newAuthorized(vres *authviews.AuthorizedView) *Authorized {
	res := &Authorized{}
	if vres.Token != nil {
		res.Token = *vres.Token
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	return res
}

// newAuthorizedView projects result type Authorized to projected type
// AuthorizedView using the "default" view.
func newAuthorizedView(res *Authorized) *authviews.AuthorizedView {
	vres := &authviews.AuthorizedView{
		Token: &res.Token,
		ID:    &res.ID,
	}
	return vres
}
