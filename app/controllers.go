// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/hiromaily/go-goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa
// --version=v1.1.0-dirty
//
// API "api": Application Controllers
//
// The content of this file is auto-generated, DO NOT MODIFY

package app

import (
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"github.com/goadesign/goa/encoding/form"
	"golang.org/x/net/context"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(form.NewDecoder, "application/x-www-form-urlencoded")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(form.NewDecoder, "*/*")
}

// HealthController is the controller interface for the Health actions.
type HealthController interface {
	goa.Muxer
	Health(*HealthHealthContext) error
}

// MountHealthController "mounts" a Health resource controller on the given service.
func MountHealthController(service *goa.Service, ctrl HealthController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/_ah/health", ctrl.MuxHandler("preflight", handleHealthOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHealthHealthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Health(rctx)
	}
	h = handleHealthOrigin(h)
	service.Mux.Handle("GET", "/api/_ah/health", ctrl.MuxHandler("Health", h, nil))
	service.LogInfo("mount", "ctrl", "Health", "action", "Health", "route", "GET /api/_ah/health")
}

// handleHealthOrigin applies the CORS response headers corresponding to the origin.
func handleHealthOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// HyCompanyController is the controller interface for the HyCompany actions.
type HyCompanyController interface {
	goa.Muxer
	CompanyList(*CompanyListHyCompanyContext) error
	CreateCompany(*CreateCompanyHyCompanyContext) error
	DeleteCompany(*DeleteCompanyHyCompanyContext) error
	GetCompany(*GetCompanyHyCompanyContext) error
	UpdateCompany(*UpdateCompanyHyCompanyContext) error
}

// MountHyCompanyController "mounts" a HyCompany resource controller on the given service.
func MountHyCompanyController(service *goa.Service, ctrl HyCompanyController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/company", ctrl.MuxHandler("preflight", handleHyCompanyOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/company/:companyID", ctrl.MuxHandler("preflight", handleHyCompanyOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCompanyListHyCompanyContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.CompanyList(rctx)
	}
	h = handleHyCompanyOrigin(h)
	service.Mux.Handle("GET", "/api/company", ctrl.MuxHandler("CompanyList", h, nil))
	service.LogInfo("mount", "ctrl", "HyCompany", "action", "CompanyList", "route", "GET /api/company")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateCompanyHyCompanyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateCompanyHyCompanyPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateCompany(rctx)
	}
	h = handleHyCompanyOrigin(h)
	service.Mux.Handle("POST", "/api/company", ctrl.MuxHandler("CreateCompany", h, unmarshalCreateCompanyHyCompanyPayload))
	service.LogInfo("mount", "ctrl", "HyCompany", "action", "CreateCompany", "route", "POST /api/company")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteCompanyHyCompanyContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteCompany(rctx)
	}
	h = handleHyCompanyOrigin(h)
	service.Mux.Handle("DELETE", "/api/company/:companyID", ctrl.MuxHandler("DeleteCompany", h, nil))
	service.LogInfo("mount", "ctrl", "HyCompany", "action", "DeleteCompany", "route", "DELETE /api/company/:companyID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetCompanyHyCompanyContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetCompany(rctx)
	}
	h = handleHyCompanyOrigin(h)
	service.Mux.Handle("GET", "/api/company/:companyID", ctrl.MuxHandler("GetCompany", h, nil))
	service.LogInfo("mount", "ctrl", "HyCompany", "action", "GetCompany", "route", "GET /api/company/:companyID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateCompanyHyCompanyContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CompanyPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateCompany(rctx)
	}
	h = handleHyCompanyOrigin(h)
	service.Mux.Handle("PUT", "/api/company/:companyID", ctrl.MuxHandler("UpdateCompany", h, unmarshalUpdateCompanyHyCompanyPayload))
	service.LogInfo("mount", "ctrl", "HyCompany", "action", "UpdateCompany", "route", "PUT /api/company/:companyID")
}

// handleHyCompanyOrigin applies the CORS response headers corresponding to the origin.
func handleHyCompanyOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateCompanyHyCompanyPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateCompanyHyCompanyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createCompanyHyCompanyPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateCompanyHyCompanyPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateCompanyHyCompanyPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &companyPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// HyUserController is the controller interface for the HyUser actions.
type HyUserController interface {
	goa.Muxer
	CreateUser(*CreateUserHyUserContext) error
	DeleteUser(*DeleteUserHyUserContext) error
	GetUser(*GetUserHyUserContext) error
	UpdateUser(*UpdateUserHyUserContext) error
	UserList(*UserListHyUserContext) error
}

// MountHyUserController "mounts" a HyUser resource controller on the given service.
func MountHyUserController(service *goa.Service, ctrl HyUserController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/api/user", ctrl.MuxHandler("preflight", handleHyUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/api/user/:userID", ctrl.MuxHandler("preflight", handleHyUserOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateUserHyUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateUserHyUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.CreateUser(rctx)
	}
	h = handleHyUserOrigin(h)
	service.Mux.Handle("POST", "/api/user", ctrl.MuxHandler("CreateUser", h, unmarshalCreateUserHyUserPayload))
	service.LogInfo("mount", "ctrl", "HyUser", "action", "CreateUser", "route", "POST /api/user")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteUserHyUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteUser(rctx)
	}
	h = handleHyUserOrigin(h)
	service.Mux.Handle("DELETE", "/api/user/:userID", ctrl.MuxHandler("DeleteUser", h, nil))
	service.LogInfo("mount", "ctrl", "HyUser", "action", "DeleteUser", "route", "DELETE /api/user/:userID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetUserHyUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetUser(rctx)
	}
	h = handleHyUserOrigin(h)
	service.Mux.Handle("GET", "/api/user/:userID", ctrl.MuxHandler("GetUser", h, nil))
	service.LogInfo("mount", "ctrl", "HyUser", "action", "GetUser", "route", "GET /api/user/:userID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateUserHyUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateUser(rctx)
	}
	h = handleHyUserOrigin(h)
	service.Mux.Handle("PUT", "/api/user/:userID", ctrl.MuxHandler("UpdateUser", h, unmarshalUpdateUserHyUserPayload))
	service.LogInfo("mount", "ctrl", "HyUser", "action", "UpdateUser", "route", "PUT /api/user/:userID")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUserListHyUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.UserList(rctx)
	}
	h = handleHyUserOrigin(h)
	service.Mux.Handle("GET", "/api/user", ctrl.MuxHandler("UserList", h, nil))
	service.LogInfo("mount", "ctrl", "HyUser", "action", "UserList", "route", "GET /api/user")
}

// handleHyUserOrigin applies the CORS response headers corresponding to the origin.
func handleHyUserOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateUserHyUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateUserHyUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createUserHyUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateUserHyUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateUserHyUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &userPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// PublicController is the controller interface for the Public actions.
type PublicController interface {
	goa.Muxer
	goa.FileServer
}

// MountPublicController "mounts" a Public resource controller on the given service.
func MountPublicController(service *goa.Service, ctrl PublicController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/*filepath", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/swagger-ui/*filepath", ctrl.MuxHandler("preflight", handlePublicOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/*filepath", "public/")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/", "route", "GET /*filepath")

	h = ctrl.FileHandler("/swagger-ui/*filepath", "swagger-ui/dist/")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/swagger-ui/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "swagger-ui/dist/", "route", "GET /swagger-ui/*filepath")

	h = ctrl.FileHandler("/", "public/index.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "public/index.html", "route", "GET /")

	h = ctrl.FileHandler("/swagger-ui/", "swagger-ui/dist/index.html")
	h = handlePublicOrigin(h)
	service.Mux.Handle("GET", "/swagger-ui/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Public", "files", "swagger-ui/dist/index.html", "route", "GET /swagger-ui/")
}

// handlePublicOrigin applies the CORS response headers corresponding to the origin.
func handlePublicOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
			}
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "http://swagger.goa.design") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Vary", "Origin")
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}
