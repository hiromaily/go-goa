// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "api": auth Resource Client
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// LoginAuthPayload is the auth Login action payload.
type LoginAuthPayload struct {
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// LoginAuthPath computes a request path to the Login action of auth.
func LoginAuthPath() string {

	return fmt.Sprintf("/api/auth/login")
}

// user login
func (c *Client) LoginAuth(ctx context.Context, path string, payload *LoginAuthPayload, contentType string) (*http.Response, error) {
	req, err := c.NewLoginAuthRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginAuthRequest create the request corresponding to the Login action endpoint of the auth resource.
func (c *Client) NewLoginAuthRequest(ctx context.Context, path string, payload *LoginAuthPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/xml")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
