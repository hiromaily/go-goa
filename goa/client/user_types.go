// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application User Types
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// commonResponse user type.
type commonResponse struct {
	// Date of creation
	CreateDatetime *string `form:"create_datetime,omitempty" json:"create_datetime,omitempty" xml:"create_datetime,omitempty"`
	// Date of update
	UpdateDatetime *string `form:"update_datetime,omitempty" json:"update_datetime,omitempty" xml:"update_datetime,omitempty"`
}

// Validate validates the commonResponse type instance.
func (ut *commonResponse) Validate() (err error) {
	if ut.CreateDatetime != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.CreateDatetime); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.create_datetime`, *ut.CreateDatetime, goa.FormatDateTime, err2))
		}
	}
	if ut.UpdateDatetime != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.UpdateDatetime); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.update_datetime`, *ut.UpdateDatetime, goa.FormatDateTime, err2))
		}
	}
	return
}

// Publicize creates CommonResponse from commonResponse
func (ut *commonResponse) Publicize() *CommonResponse {
	var pub CommonResponse
	if ut.CreateDatetime != nil {
		pub.CreateDatetime = ut.CreateDatetime
	}
	if ut.UpdateDatetime != nil {
		pub.UpdateDatetime = ut.UpdateDatetime
	}
	return &pub
}

// CommonResponse user type.
type CommonResponse struct {
	// Date of creation
	CreateDatetime *string `form:"create_datetime,omitempty" json:"create_datetime,omitempty" xml:"create_datetime,omitempty"`
	// Date of update
	UpdateDatetime *string `form:"update_datetime,omitempty" json:"update_datetime,omitempty" xml:"update_datetime,omitempty"`
}

// Validate validates the CommonResponse type instance.
func (ut *CommonResponse) Validate() (err error) {
	if ut.CreateDatetime != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.CreateDatetime); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.create_datetime`, *ut.CreateDatetime, goa.FormatDateTime, err2))
		}
	}
	if ut.UpdateDatetime != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.UpdateDatetime); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.update_datetime`, *ut.UpdateDatetime, goa.FormatDateTime, err2))
		}
	}
	return
}

// companyPayload user type.
type companyPayload struct {
	// Address of company
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Country of HQ
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Name of company
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the companyPayload type instance.
func (ut *companyPayload) Validate() (err error) {
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) < 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 40, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 40, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 40, true))
		}
	}
	return
}

// Publicize creates CompanyPayload from companyPayload
func (ut *companyPayload) Publicize() *CompanyPayload {
	var pub CompanyPayload
	if ut.Address != nil {
		pub.Address = ut.Address
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// CompanyPayload user type.
type CompanyPayload struct {
	// Address of company
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Country of HQ
	Country *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	// Name of company
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the CompanyPayload type instance.
func (ut *CompanyPayload) Validate() (err error) {
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) < 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 40, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 40, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 40, true))
		}
	}
	return
}

// userPayload user type.
type userPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the userPayload type instance.
func (ut *userPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 10, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 10, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 20, true))
		}
	}
	return
}

// Publicize creates UserPayload from userPayload
func (ut *userPayload) Publicize() *UserPayload {
	var pub UserPayload
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.FirstName != nil {
		pub.FirstName = ut.FirstName
	}
	if ut.LastName != nil {
		pub.LastName = ut.LastName
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	return &pub
}

// UserPayload user type.
type UserPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// First name
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty" xml:"first_name,omitempty"`
	// Last name
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty" xml:"last_name,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the UserPayload type instance.
func (ut *UserPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`response.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.FirstName != nil {
		if utf8.RuneCountInString(*ut.FirstName) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.first_name`, *ut.FirstName, utf8.RuneCountInString(*ut.FirstName), 10, true))
		}
	}
	if ut.LastName != nil {
		if utf8.RuneCountInString(*ut.LastName) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.last_name`, *ut.LastName, utf8.RuneCountInString(*ut.LastName), 10, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`response.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 20, true))
		}
	}
	return
}
