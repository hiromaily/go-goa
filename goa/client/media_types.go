// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
)

// An authorized response (default view)
//
// Identifier: application/vnd.authorized+json; view=default
type Authorized struct {
	// JWT token
	Token string `form:"token" json:"token" xml:"token"`
}

// Validate validates the Authorized media type instance.
func (mt *Authorized) Validate() (err error) {
	if mt.Token == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	return
}

// DecodeAuthorized decodes the Authorized instance encoded in resp body.
func (c *Client) DecodeAuthorized(resp *http.Response) (*Authorized, error) {
	var decoded Authorized
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A company information (default view)
//
// Identifier: application/vnd.company+json; view=default
type Company struct {
	Address     *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	CompanyID   *string `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	CountryName *string `form:"country_name,omitempty" json:"country_name,omitempty" xml:"country_name,omitempty"`
	HqFlg       *string `form:"hq_flg,omitempty" json:"hq_flg,omitempty" xml:"hq_flg,omitempty"`
	// Company Detail ID
	ID   *int   `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate validates the Company media type instance.
func (mt *Company) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.ID != nil {
		if *mt.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.id`, *mt.ID, 1, true))
		}
	}
	return
}

// A company information (name view)
//
// Identifier: application/vnd.company+json; view=name
type CompanyName struct {
	CompanyID *string `form:"company_id,omitempty" json:"company_id,omitempty" xml:"company_id,omitempty"`
	Name      string  `form:"name" json:"name" xml:"name"`
}

// Validate validates the CompanyName media type instance.
func (mt *CompanyName) Validate() (err error) {
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	return
}

// DecodeCompany decodes the Company instance encoded in resp body.
func (c *Client) DecodeCompany(resp *http.Response) (*Company, error) {
	var decoded Company
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeCompanyName decodes the CompanyName instance encoded in resp body.
func (c *Client) DecodeCompanyName(resp *http.Response) (*CompanyName, error) {
	var decoded CompanyName
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// CompanyCollection is the media type for an array of Company (default view)
//
// Identifier: application/vnd.company+json; type=collection; view=default
type CompanyCollection []*Company

// Validate validates the CompanyCollection media type instance.
func (mt CompanyCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// CompanyCollection is the media type for an array of Company (name view)
//
// Identifier: application/vnd.company+json; type=collection; view=name
type CompanyNameCollection []*CompanyName

// Validate validates the CompanyNameCollection media type instance.
func (mt CompanyNameCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCompanyCollection decodes the CompanyCollection instance encoded in resp body.
func (c *Client) DecodeCompanyCollection(resp *http.Response) (CompanyCollection, error) {
	var decoded CompanyCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeCompanyNameCollection decodes the CompanyNameCollection instance encoded in resp body.
func (c *Client) DecodeCompanyNameCollection(resp *http.Response) (CompanyNameCollection, error) {
	var decoded CompanyNameCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A user information (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	Email string `form:"email" json:"email" xml:"email"`
	// User ID
	ID       *int   `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {
	if mt.UserName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "user_name"))
	}
	if mt.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "email"))
	}
	if mt.ID != nil {
		if *mt.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.id`, *mt.ID, 1, true))
		}
	}
	return
}

// A user information (id view)
//
// Identifier: application/vnd.user+json; view=id
type UserID struct {
	// User ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// Validate validates the UserID media type instance.
func (mt *UserID) Validate() (err error) {
	if mt.ID != nil {
		if *mt.ID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`response.id`, *mt.ID, 1, true))
		}
	}
	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeUserID decodes the UserID instance encoded in resp body.
func (c *Client) DecodeUserID(resp *http.Response) (*UserID, error) {
	var decoded UserID
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// UserCollection is the media type for an array of User (default view)
//
// Identifier: application/vnd.user+json; type=collection; view=default
type UserCollection []*User

// Validate validates the UserCollection media type instance.
func (mt UserCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// UserCollection is the media type for an array of User (id view)
//
// Identifier: application/vnd.user+json; type=collection; view=id
type UserIDCollection []*UserID

// Validate validates the UserIDCollection media type instance.
func (mt UserIDCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserCollection decodes the UserCollection instance encoded in resp body.
func (c *Client) DecodeUserCollection(resp *http.Response) (UserCollection, error) {
	var decoded UserCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// DecodeUserIDCollection decodes the UserIDCollection instance encoded in resp body.
func (c *Client) DecodeUserIDCollection(resp *http.Response) (UserIDCollection, error) {
	var decoded UserIDCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// A user who belongs to which companies (default view)
//
// Identifier: application/vnd.usercomany+json; view=default
type Usercomany struct {
	// ID of user id
	CompanyID int `form:"company_id" json:"company_id" xml:"company_id"`
	// API href of bottle
	Href string `form:"href" json:"href" xml:"href"`
	// ID of user company
	ID int `form:"id" json:"id" xml:"id"`
	// ID of user id
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
}

// Validate validates the Usercomany media type instance.
func (mt *Usercomany) Validate() (err error) {

	if mt.Href == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "href"))
	}

	return
}

// DecodeUsercomany decodes the Usercomany instance encoded in resp body.
func (c *Client) DecodeUsercomany(resp *http.Response) (*Usercomany, error) {
	var decoded Usercomany
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
