// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "api": hy_user Resource Client
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateUserHyUserPayload is the hy_user CreateUser action payload.
type CreateUserHyUserPayload struct {
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
	// User name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// CreateUserHyUserPath computes a request path to the CreateUser action of hy_user.
func CreateUserHyUserPath() string {

	return fmt.Sprintf("/api/user")
}

// Create new user
func (c *Client) CreateUserHyUser(ctx context.Context, path string, payload *CreateUserHyUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUserHyUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserHyUserRequest create the request corresponding to the CreateUser action endpoint of the hy_user resource.
func (c *Client) NewCreateUserHyUserRequest(ctx context.Context, path string, payload *CreateUserHyUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/xml")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// DeleteUserHyUserPath computes a request path to the DeleteUser action of hy_user.
func DeleteUserHyUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/api/user/%s", param0)
}

// Delete user
func (c *Client) DeleteUserHyUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteUserHyUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteUserHyUserRequest create the request corresponding to the DeleteUser action endpoint of the hy_user resource.
func (c *Client) NewDeleteUserHyUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// GetUserHyUserPath computes a request path to the GetUser action of hy_user.
func GetUserHyUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/api/user/%s", param0)
}

// Retrieve user with given id.
func (c *Client) GetUserHyUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewGetUserHyUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewGetUserHyUserRequest create the request corresponding to the GetUser action endpoint of the hy_user resource.
func (c *Client) NewGetUserHyUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UpdateUserHyUserPayload is the hy_user UpdateUser action payload.
type UpdateUserHyUserPayload struct {
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
	// User name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// UpdateUserHyUserPath computes a request path to the UpdateUser action of hy_user.
func UpdateUserHyUserPath(userID int) string {
	param0 := strconv.Itoa(userID)

	return fmt.Sprintf("/api/user/%s", param0)
}

// Change user properties
func (c *Client) UpdateUserHyUser(ctx context.Context, path string, payload *UpdateUserHyUserPayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateUserHyUserRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserHyUserRequest create the request corresponding to the UpdateUser action endpoint of the hy_user resource.
func (c *Client) NewUpdateUserHyUserRequest(ctx context.Context, path string, payload *UpdateUserHyUserPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/xml")
	} else {
		header.Set("Content-Type", contentType)
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// UserListHyUserPath computes a request path to the UserList action of hy_user.
func UserListHyUserPath() string {

	return fmt.Sprintf("/api/user")
}

// Retrieve all users.
func (c *Client) UserListHyUser(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUserListHyUserRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUserListHyUserRequest create the request corresponding to the UserList action endpoint of the hy_user resource.
func (c *Client) NewUserListHyUserRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
