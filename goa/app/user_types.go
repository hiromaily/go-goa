// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "api": Application User Types
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.3.1

package app

import (
	"github.com/goadesign/goa"
	"unicode/utf8"
)

// commonResponse user type.
type commonResponse struct {
	// Datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" yaml:"created_at,omitempty" xml:"created_at,omitempty"`
	// Datetime
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" yaml:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// Validate validates the commonResponse type instance.
func (ut *commonResponse) Validate() (err error) {
	if ut.CreatedAt != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.CreatedAt); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.created_at`, *ut.CreatedAt, goa.FormatDateTime, err2))
		}
	}
	if ut.UpdatedAt != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.UpdatedAt); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.updated_at`, *ut.UpdatedAt, goa.FormatDateTime, err2))
		}
	}
	return
}

// Publicize creates CommonResponse from commonResponse
func (ut *commonResponse) Publicize() *CommonResponse {
	var pub CommonResponse
	if ut.CreatedAt != nil {
		pub.CreatedAt = ut.CreatedAt
	}
	if ut.UpdatedAt != nil {
		pub.UpdatedAt = ut.UpdatedAt
	}
	return &pub
}

// CommonResponse user type.
type CommonResponse struct {
	// Datetime
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" yaml:"created_at,omitempty" xml:"created_at,omitempty"`
	// Datetime
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" yaml:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// Validate validates the CommonResponse type instance.
func (ut *CommonResponse) Validate() (err error) {
	if ut.CreatedAt != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.CreatedAt); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.created_at`, *ut.CreatedAt, goa.FormatDateTime, err2))
		}
	}
	if ut.UpdatedAt != nil {
		if err2 := goa.ValidateFormat(goa.FormatDateTime, *ut.UpdatedAt); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.updated_at`, *ut.UpdatedAt, goa.FormatDateTime, err2))
		}
	}
	return
}

// companyPayload user type.
type companyPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" yaml:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" yaml:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the companyPayload type instance.
func (ut *companyPayload) Validate() (err error) {
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 2, true))
		}
	}
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 80, false))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.country_id`, *ut.CountryID, 1, true))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.country_id`, *ut.CountryID, 999, false))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 2, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 40, false))
		}
	}
	return
}

// Publicize creates CompanyPayload from companyPayload
func (ut *companyPayload) Publicize() *CompanyPayload {
	var pub CompanyPayload
	if ut.Address != nil {
		pub.Address = ut.Address
	}
	if ut.CountryID != nil {
		pub.CountryID = ut.CountryID
	}
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// CompanyPayload user type.
type CompanyPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" yaml:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" yaml:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the CompanyPayload type instance.
func (ut *CompanyPayload) Validate() (err error) {
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 2, true))
		}
	}
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 80, false))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`type.country_id`, *ut.CountryID, 1, true))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`type.country_id`, *ut.CountryID, 999, false))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 2, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 40, false))
		}
	}
	return
}

// companyTinyPayload user type.
type companyTinyPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" yaml:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" yaml:"country_id,omitempty" xml:"country_id,omitempty"`
}

// Validate validates the companyTinyPayload type instance.
func (ut *companyTinyPayload) Validate() (err error) {
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 2, true))
		}
	}
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 80, false))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.country_id`, *ut.CountryID, 1, true))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`request.country_id`, *ut.CountryID, 999, false))
		}
	}
	return
}

// Publicize creates CompanyTinyPayload from companyTinyPayload
func (ut *companyTinyPayload) Publicize() *CompanyTinyPayload {
	var pub CompanyTinyPayload
	if ut.Address != nil {
		pub.Address = ut.Address
	}
	if ut.CountryID != nil {
		pub.CountryID = ut.CountryID
	}
	return &pub
}

// CompanyTinyPayload user type.
type CompanyTinyPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" yaml:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" yaml:"country_id,omitempty" xml:"country_id,omitempty"`
}

// Validate validates the CompanyTinyPayload type instance.
func (ut *CompanyTinyPayload) Validate() (err error) {
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 2, true))
		}
	}
	if ut.Address != nil {
		if utf8.RuneCountInString(*ut.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.address`, *ut.Address, utf8.RuneCountInString(*ut.Address), 80, false))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`type.country_id`, *ut.CountryID, 1, true))
		}
	}
	if ut.CountryID != nil {
		if *ut.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`type.country_id`, *ut.CountryID, 999, false))
		}
	}
	return
}

// loginPayload user type.
type loginPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the loginPayload type instance.
func (ut *loginPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 8, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 20, false))
		}
	}
	return
}

// Publicize creates LoginPayload from loginPayload
func (ut *loginPayload) Publicize() *LoginPayload {
	var pub LoginPayload
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	return &pub
}

// LoginPayload user type.
type LoginPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
}

// Validate validates the LoginPayload type instance.
func (ut *LoginPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 8, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 20, false))
		}
	}
	return
}

// techPayload user type.
type techPayload struct {
	// Tech name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the techPayload type instance.
func (ut *techPayload) Validate() (err error) {
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 1, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 40, false))
		}
	}
	return
}

// Publicize creates TechPayload from techPayload
func (ut *techPayload) Publicize() *TechPayload {
	var pub TechPayload
	if ut.Name != nil {
		pub.Name = ut.Name
	}
	return &pub
}

// TechPayload user type.
type TechPayload struct {
	// Tech name
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate validates the TechPayload type instance.
func (ut *TechPayload) Validate() (err error) {
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 1, true))
		}
	}
	if ut.Name != nil {
		if utf8.RuneCountInString(*ut.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.name`, *ut.Name, utf8.RuneCountInString(*ut.Name), 40, false))
		}
	}
	return
}

// userPayload user type.
type userPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// User name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" yaml:"user_name,omitempty" xml:"user_name,omitempty"`
}

// Validate validates the userPayload type instance.
func (ut *userPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 8, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 20, false))
		}
	}
	if ut.UserName != nil {
		if utf8.RuneCountInString(*ut.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.user_name`, *ut.UserName, utf8.RuneCountInString(*ut.UserName), 2, true))
		}
	}
	if ut.UserName != nil {
		if utf8.RuneCountInString(*ut.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.user_name`, *ut.UserName, utf8.RuneCountInString(*ut.UserName), 20, false))
		}
	}
	return
}

// Publicize creates UserPayload from userPayload
func (ut *userPayload) Publicize() *UserPayload {
	var pub UserPayload
	if ut.Email != nil {
		pub.Email = ut.Email
	}
	if ut.Password != nil {
		pub.Password = ut.Password
	}
	if ut.UserName != nil {
		pub.UserName = ut.UserName
	}
	return &pub
}

// UserPayload user type.
type UserPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" yaml:"password,omitempty" xml:"password,omitempty"`
	// User name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" yaml:"user_name,omitempty" xml:"user_name,omitempty"`
}

// Validate validates the UserPayload type instance.
func (ut *UserPayload) Validate() (err error) {
	if ut.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *ut.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`type.email`, *ut.Email, goa.FormatEmail, err2))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 8, true))
		}
	}
	if ut.Password != nil {
		if utf8.RuneCountInString(*ut.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.password`, *ut.Password, utf8.RuneCountInString(*ut.Password), 20, false))
		}
	}
	if ut.UserName != nil {
		if utf8.RuneCountInString(*ut.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.user_name`, *ut.UserName, utf8.RuneCountInString(*ut.UserName), 2, true))
		}
	}
	if ut.UserName != nil {
		if utf8.RuneCountInString(*ut.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.user_name`, *ut.UserName, utf8.RuneCountInString(*ut.UserName), 20, false))
		}
	}
	return
}

// userTechPayload user type.
type userTechPayload struct {
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" yaml:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// Validate validates the userTechPayload type instance.
func (ut *userTechPayload) Validate() (err error) {
	if ut.TechName != nil {
		if utf8.RuneCountInString(*ut.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.tech_name`, *ut.TechName, utf8.RuneCountInString(*ut.TechName), 1, true))
		}
	}
	if ut.TechName != nil {
		if utf8.RuneCountInString(*ut.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.tech_name`, *ut.TechName, utf8.RuneCountInString(*ut.TechName), 40, false))
		}
	}
	return
}

// Publicize creates UserTechPayload from userTechPayload
func (ut *userTechPayload) Publicize() *UserTechPayload {
	var pub UserTechPayload
	if ut.TechName != nil {
		pub.TechName = ut.TechName
	}
	return &pub
}

// UserTechPayload user type.
type UserTechPayload struct {
	// Tech name
	TechName *string `form:"tech_name,omitempty" json:"tech_name,omitempty" yaml:"tech_name,omitempty" xml:"tech_name,omitempty"`
}

// Validate validates the UserTechPayload type instance.
func (ut *UserTechPayload) Validate() (err error) {
	if ut.TechName != nil {
		if utf8.RuneCountInString(*ut.TechName) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.tech_name`, *ut.TechName, utf8.RuneCountInString(*ut.TechName), 1, true))
		}
	}
	if ut.TechName != nil {
		if utf8.RuneCountInString(*ut.TechName) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.tech_name`, *ut.TechName, utf8.RuneCountInString(*ut.TechName), 40, false))
		}
	}
	return
}

// userWorkHistoryPayload user type.
type userWorkHistoryPayload struct {
	// Company name
	Company *string `form:"company,omitempty" json:"company,omitempty" yaml:"company,omitempty" xml:"company,omitempty"`
	// Country code
	Country *string `form:"country,omitempty" json:"country,omitempty" yaml:"country,omitempty" xml:"country,omitempty"`
	// job description
	Description interface{} `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// used techs
	Techs interface{} `form:"techs,omitempty" json:"techs,omitempty" yaml:"techs,omitempty" xml:"techs,omitempty"`
	// worked period
	Term *string `form:"term,omitempty" json:"term,omitempty" yaml:"term,omitempty" xml:"term,omitempty"`
	// Job Title
	Title *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the userWorkHistoryPayload type instance.
func (ut *userWorkHistoryPayload) Validate() (err error) {
	if ut.Company != nil {
		if utf8.RuneCountInString(*ut.Company) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.company`, *ut.Company, utf8.RuneCountInString(*ut.Company), 2, true))
		}
	}
	if ut.Company != nil {
		if utf8.RuneCountInString(*ut.Company) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.company`, *ut.Company, utf8.RuneCountInString(*ut.Company), 40, false))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, false))
		}
	}
	if ut.Term != nil {
		if utf8.RuneCountInString(*ut.Term) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.term`, *ut.Term, utf8.RuneCountInString(*ut.Term), 10, true))
		}
	}
	if ut.Term != nil {
		if utf8.RuneCountInString(*ut.Term) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.term`, *ut.Term, utf8.RuneCountInString(*ut.Term), 20, false))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 2, true))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`request.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 40, false))
		}
	}
	return
}

// Publicize creates UserWorkHistoryPayload from userWorkHistoryPayload
func (ut *userWorkHistoryPayload) Publicize() *UserWorkHistoryPayload {
	var pub UserWorkHistoryPayload
	if ut.Company != nil {
		pub.Company = ut.Company
	}
	if ut.Country != nil {
		pub.Country = ut.Country
	}
	if ut.Description != nil {
		pub.Description = ut.Description
	}
	if ut.Techs != nil {
		pub.Techs = ut.Techs
	}
	if ut.Term != nil {
		pub.Term = ut.Term
	}
	if ut.Title != nil {
		pub.Title = ut.Title
	}
	return &pub
}

// UserWorkHistoryPayload user type.
type UserWorkHistoryPayload struct {
	// Company name
	Company *string `form:"company,omitempty" json:"company,omitempty" yaml:"company,omitempty" xml:"company,omitempty"`
	// Country code
	Country *string `form:"country,omitempty" json:"country,omitempty" yaml:"country,omitempty" xml:"country,omitempty"`
	// job description
	Description interface{} `form:"description,omitempty" json:"description,omitempty" yaml:"description,omitempty" xml:"description,omitempty"`
	// used techs
	Techs interface{} `form:"techs,omitempty" json:"techs,omitempty" yaml:"techs,omitempty" xml:"techs,omitempty"`
	// worked period
	Term *string `form:"term,omitempty" json:"term,omitempty" yaml:"term,omitempty" xml:"term,omitempty"`
	// Job Title
	Title *string `form:"title,omitempty" json:"title,omitempty" yaml:"title,omitempty" xml:"title,omitempty"`
}

// Validate validates the UserWorkHistoryPayload type instance.
func (ut *UserWorkHistoryPayload) Validate() (err error) {
	if ut.Company != nil {
		if utf8.RuneCountInString(*ut.Company) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.company`, *ut.Company, utf8.RuneCountInString(*ut.Company), 2, true))
		}
	}
	if ut.Company != nil {
		if utf8.RuneCountInString(*ut.Company) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.company`, *ut.Company, utf8.RuneCountInString(*ut.Company), 40, false))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, true))
		}
	}
	if ut.Country != nil {
		if utf8.RuneCountInString(*ut.Country) > 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.country`, *ut.Country, utf8.RuneCountInString(*ut.Country), 2, false))
		}
	}
	if ut.Term != nil {
		if utf8.RuneCountInString(*ut.Term) < 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.term`, *ut.Term, utf8.RuneCountInString(*ut.Term), 10, true))
		}
	}
	if ut.Term != nil {
		if utf8.RuneCountInString(*ut.Term) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.term`, *ut.Term, utf8.RuneCountInString(*ut.Term), 20, false))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 2, true))
		}
	}
	if ut.Title != nil {
		if utf8.RuneCountInString(*ut.Title) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`type.title`, *ut.Title, utf8.RuneCountInString(*ut.Title), 40, false))
		}
	}
	return
}
