// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "api": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
	"unicode/utf8"
)

// LoginAuthContext provides the auth Login action context.
type LoginAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginAuthPayload
}

// NewLoginAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller Login action.
func NewLoginAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// loginAuthPayload is the auth Login action payload.
type loginAuthPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *loginAuthPayload) Validate() (err error) {
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 8, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 20, false))
		}
	}
	return
}

// Publicize creates LoginAuthPayload from loginAuthPayload
func (payload *loginAuthPayload) Publicize() *LoginAuthPayload {
	var pub LoginAuthPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	return &pub
}

// LoginAuthPayload is the auth Login action payload.
type LoginAuthPayload struct {
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// Validate runs the validation rules defined in the design.
func (payload *LoginAuthPayload) Validate() (err error) {
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Password) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 8, true))
	}
	if utf8.RuneCountInString(payload.Password) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 20, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginAuthContext) OK(r *Authorized) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authorized+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LoginAuthContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// CompanyListHyCompanyContext provides the hy_company CompanyList action context.
type CompanyListHyCompanyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCompanyListHyCompanyContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_company controller CompanyList action.
func NewCompanyListHyCompanyContext(ctx context.Context, r *http.Request, service *goa.Service) (*CompanyListHyCompanyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CompanyListHyCompanyContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CompanyListHyCompanyContext) OK(r CompanyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *CompanyListHyCompanyContext) OKDetailid(r CompanyDetailidCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyDetailidCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *CompanyListHyCompanyContext) OKId(r CompanyIDCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyIDCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *CompanyListHyCompanyContext) OKIdname(r CompanyIdnameCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyIdnameCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *CompanyListHyCompanyContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CompanyListHyCompanyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// CreateCompanyHyCompanyContext provides the hy_company CreateCompany action context.
type CreateCompanyHyCompanyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateCompanyHyCompanyPayload
}

// NewCreateCompanyHyCompanyContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_company controller CreateCompany action.
func NewCreateCompanyHyCompanyContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCompanyHyCompanyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCompanyHyCompanyContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createCompanyHyCompanyPayload is the hy_company CreateCompany action payload.
type createCompanyHyCompanyPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCompanyHyCompanyPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country_id"))
	}
	if payload.Address == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 2, true))
		}
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 80, false))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 1, true))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 999, false))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 2, true))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 40, false))
		}
	}
	return
}

// Publicize creates CreateCompanyHyCompanyPayload from createCompanyHyCompanyPayload
func (payload *createCompanyHyCompanyPayload) Publicize() *CreateCompanyHyCompanyPayload {
	var pub CreateCompanyHyCompanyPayload
	if payload.Address != nil {
		pub.Address = *payload.Address
	}
	if payload.CountryID != nil {
		pub.CountryID = *payload.CountryID
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreateCompanyHyCompanyPayload is the hy_company CreateCompany action payload.
type CreateCompanyHyCompanyPayload struct {
	// Company Address
	Address string `form:"address" json:"address" xml:"address"`
	// Country ID
	CountryID int `form:"country_id" json:"country_id" xml:"country_id"`
	// Company name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCompanyHyCompanyPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}

	if payload.Address == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if utf8.RuneCountInString(payload.Address) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 2, true))
	}
	if utf8.RuneCountInString(payload.Address) > 80 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 80, false))
	}
	if payload.CountryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 1, true))
	}
	if payload.CountryID > 999 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 999, false))
	}
	if utf8.RuneCountInString(payload.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 2, true))
	}
	if utf8.RuneCountInString(payload.Name) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 40, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateCompanyHyCompanyContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *CreateCompanyHyCompanyContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *CreateCompanyHyCompanyContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *CreateCompanyHyCompanyContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCompanyHyCompanyContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCompanyHyCompanyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteCompanyHyCompanyContext provides the hy_company DeleteCompany action context.
type DeleteCompanyHyCompanyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CompanyID int
}

// NewDeleteCompanyHyCompanyContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_company controller DeleteCompany action.
func NewDeleteCompanyHyCompanyContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCompanyHyCompanyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCompanyHyCompanyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCompanyID := req.Params["companyID"]
	if len(paramCompanyID) > 0 {
		rawCompanyID := paramCompanyID[0]
		if companyID, err2 := strconv.Atoi(rawCompanyID); err2 == nil {
			rctx.CompanyID = companyID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("companyID", rawCompanyID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCompanyHyCompanyContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *DeleteCompanyHyCompanyContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *DeleteCompanyHyCompanyContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *DeleteCompanyHyCompanyContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCompanyHyCompanyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCompanyHyCompanyContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetCompanyGroupHyCompanyContext provides the hy_company GetCompanyGroup action context.
type GetCompanyGroupHyCompanyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CompanyID int
	HqFlg     *string
}

// NewGetCompanyGroupHyCompanyContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_company controller GetCompanyGroup action.
func NewGetCompanyGroupHyCompanyContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCompanyGroupHyCompanyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCompanyGroupHyCompanyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCompanyID := req.Params["companyID"]
	if len(paramCompanyID) > 0 {
		rawCompanyID := paramCompanyID[0]
		if companyID, err2 := strconv.Atoi(rawCompanyID); err2 == nil {
			rctx.CompanyID = companyID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("companyID", rawCompanyID, "integer"))
		}
	}
	paramHqFlg := req.Params["hq_flg"]
	if len(paramHqFlg) > 0 {
		rawHqFlg := paramHqFlg[0]
		rctx.HqFlg = &rawHqFlg
		if rctx.HqFlg != nil {
			if !(*rctx.HqFlg == "1" || *rctx.HqFlg == "0") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`hq_flg`, *rctx.HqFlg, []interface{}{"1", "0"}))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCompanyGroupHyCompanyContext) OK(r CompanyCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *GetCompanyGroupHyCompanyContext) OKDetailid(r CompanyDetailidCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyDetailidCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *GetCompanyGroupHyCompanyContext) OKId(r CompanyIDCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyIDCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *GetCompanyGroupHyCompanyContext) OKIdname(r CompanyIdnameCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.company+json; type=collection")
	if r == nil {
		r = CompanyIdnameCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetCompanyGroupHyCompanyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetCompanyGroupHyCompanyContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateCompanyHyCompanyContext provides the hy_company UpdateCompany action context.
type UpdateCompanyHyCompanyContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CompanyID int
	Payload   *UpdateCompanyHyCompanyPayload
}

// NewUpdateCompanyHyCompanyContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_company controller UpdateCompany action.
func NewUpdateCompanyHyCompanyContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCompanyHyCompanyContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCompanyHyCompanyContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCompanyID := req.Params["companyID"]
	if len(paramCompanyID) > 0 {
		rawCompanyID := paramCompanyID[0]
		if companyID, err2 := strconv.Atoi(rawCompanyID); err2 == nil {
			rctx.CompanyID = companyID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("companyID", rawCompanyID, "integer"))
		}
	}
	return &rctx, err
}

// updateCompanyHyCompanyPayload is the hy_company UpdateCompany action payload.
type updateCompanyHyCompanyPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
	// Company name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCompanyHyCompanyPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country_id"))
	}
	if payload.Address == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 2, true))
		}
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 80, false))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 1, true))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 999, false))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 2, true))
		}
	}
	if payload.Name != nil {
		if utf8.RuneCountInString(*payload.Name) > 40 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, *payload.Name, utf8.RuneCountInString(*payload.Name), 40, false))
		}
	}
	return
}

// Publicize creates UpdateCompanyHyCompanyPayload from updateCompanyHyCompanyPayload
func (payload *updateCompanyHyCompanyPayload) Publicize() *UpdateCompanyHyCompanyPayload {
	var pub UpdateCompanyHyCompanyPayload
	if payload.Address != nil {
		pub.Address = *payload.Address
	}
	if payload.CountryID != nil {
		pub.CountryID = *payload.CountryID
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// UpdateCompanyHyCompanyPayload is the hy_company UpdateCompany action payload.
type UpdateCompanyHyCompanyPayload struct {
	// Company Address
	Address string `form:"address" json:"address" xml:"address"`
	// Country ID
	CountryID int `form:"country_id" json:"country_id" xml:"country_id"`
	// Company name
	Name string `form:"name" json:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateCompanyHyCompanyPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}

	if payload.Address == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if utf8.RuneCountInString(payload.Address) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 2, true))
	}
	if utf8.RuneCountInString(payload.Address) > 80 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 80, false))
	}
	if payload.CountryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 1, true))
	}
	if payload.CountryID > 999 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 999, false))
	}
	if utf8.RuneCountInString(payload.Name) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 2, true))
	}
	if utf8.RuneCountInString(payload.Name) > 40 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.name`, payload.Name, utf8.RuneCountInString(payload.Name), 40, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCompanyHyCompanyContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *UpdateCompanyHyCompanyContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *UpdateCompanyHyCompanyContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *UpdateCompanyHyCompanyContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCompanyHyCompanyContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCompanyHyCompanyContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateCompanyBranchHyCompanybranchContext provides the hy_companybranch CreateCompanyBranch action context.
type CreateCompanyBranchHyCompanybranchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *CreateCompanyBranchHyCompanybranchPayload
}

// NewCreateCompanyBranchHyCompanybranchContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_companybranch controller CreateCompanyBranch action.
func NewCreateCompanyBranchHyCompanybranchContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCompanyBranchHyCompanybranchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCompanyBranchHyCompanybranchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	return &rctx, err
}

// createCompanyBranchHyCompanybranchPayload is the hy_companybranch CreateCompanyBranch action payload.
type createCompanyBranchHyCompanybranchPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCompanyBranchHyCompanybranchPayload) Validate() (err error) {
	if payload.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country_id"))
	}
	if payload.Address == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 2, true))
		}
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 80, false))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 1, true))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 999, false))
		}
	}
	return
}

// Publicize creates CreateCompanyBranchHyCompanybranchPayload from createCompanyBranchHyCompanybranchPayload
func (payload *createCompanyBranchHyCompanybranchPayload) Publicize() *CreateCompanyBranchHyCompanybranchPayload {
	var pub CreateCompanyBranchHyCompanybranchPayload
	if payload.Address != nil {
		pub.Address = *payload.Address
	}
	if payload.CountryID != nil {
		pub.CountryID = *payload.CountryID
	}
	return &pub
}

// CreateCompanyBranchHyCompanybranchPayload is the hy_companybranch CreateCompanyBranch action payload.
type CreateCompanyBranchHyCompanybranchPayload struct {
	// Company Address
	Address string `form:"address" json:"address" xml:"address"`
	// Country ID
	CountryID int `form:"country_id" json:"country_id" xml:"country_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCompanyBranchHyCompanybranchPayload) Validate() (err error) {

	if payload.Address == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if utf8.RuneCountInString(payload.Address) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 2, true))
	}
	if utf8.RuneCountInString(payload.Address) > 80 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 80, false))
	}
	if payload.CountryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 1, true))
	}
	if payload.CountryID > 999 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 999, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateCompanyBranchHyCompanybranchContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *CreateCompanyBranchHyCompanybranchContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *CreateCompanyBranchHyCompanybranchContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *CreateCompanyBranchHyCompanybranchContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateCompanyBranchHyCompanybranchContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCompanyBranchHyCompanybranchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteCompanyBranchHyCompanybranchContext provides the hy_companybranch DeleteCompanyBranch action context.
type DeleteCompanyBranchHyCompanybranchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewDeleteCompanyBranchHyCompanybranchContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_companybranch controller DeleteCompanyBranch action.
func NewDeleteCompanyBranchHyCompanybranchContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCompanyBranchHyCompanybranchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCompanyBranchHyCompanybranchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCompanyBranchHyCompanybranchContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *DeleteCompanyBranchHyCompanybranchContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *DeleteCompanyBranchHyCompanybranchContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *DeleteCompanyBranchHyCompanybranchContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCompanyBranchHyCompanybranchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCompanyBranchHyCompanybranchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetCompanyBranchHyCompanybranchContext provides the hy_companybranch GetCompanyBranch action context.
type GetCompanyBranchHyCompanybranchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewGetCompanyBranchHyCompanybranchContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_companybranch controller GetCompanyBranch action.
func NewGetCompanyBranchHyCompanybranchContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetCompanyBranchHyCompanybranchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetCompanyBranchHyCompanybranchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetCompanyBranchHyCompanybranchContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *GetCompanyBranchHyCompanybranchContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *GetCompanyBranchHyCompanybranchContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *GetCompanyBranchHyCompanybranchContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetCompanyBranchHyCompanybranchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetCompanyBranchHyCompanybranchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateCompanyBranchHyCompanybranchContext provides the hy_companybranch UpdateCompanyBranch action context.
type UpdateCompanyBranchHyCompanybranchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      int
	Payload *UpdateCompanyBranchHyCompanybranchPayload
}

// NewUpdateCompanyBranchHyCompanybranchContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_companybranch controller UpdateCompanyBranch action.
func NewUpdateCompanyBranchHyCompanybranchContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCompanyBranchHyCompanybranchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCompanyBranchHyCompanybranchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["ID"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("ID", rawID, "integer"))
		}
	}
	return &rctx, err
}

// updateCompanyBranchHyCompanybranchPayload is the hy_companybranch UpdateCompanyBranch action payload.
type updateCompanyBranchHyCompanybranchPayload struct {
	// Company Address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Country ID
	CountryID *int `form:"country_id,omitempty" json:"country_id,omitempty" xml:"country_id,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCompanyBranchHyCompanybranchPayload) Validate() (err error) {
	if payload.CountryID == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "country_id"))
	}
	if payload.Address == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 2, true))
		}
	}
	if payload.Address != nil {
		if utf8.RuneCountInString(*payload.Address) > 80 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, *payload.Address, utf8.RuneCountInString(*payload.Address), 80, false))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 1, true))
		}
	}
	if payload.CountryID != nil {
		if *payload.CountryID > 999 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, *payload.CountryID, 999, false))
		}
	}
	return
}

// Publicize creates UpdateCompanyBranchHyCompanybranchPayload from updateCompanyBranchHyCompanybranchPayload
func (payload *updateCompanyBranchHyCompanybranchPayload) Publicize() *UpdateCompanyBranchHyCompanybranchPayload {
	var pub UpdateCompanyBranchHyCompanybranchPayload
	if payload.Address != nil {
		pub.Address = *payload.Address
	}
	if payload.CountryID != nil {
		pub.CountryID = *payload.CountryID
	}
	return &pub
}

// UpdateCompanyBranchHyCompanybranchPayload is the hy_companybranch UpdateCompanyBranch action payload.
type UpdateCompanyBranchHyCompanybranchPayload struct {
	// Company Address
	Address string `form:"address" json:"address" xml:"address"`
	// Country ID
	CountryID int `form:"country_id" json:"country_id" xml:"country_id"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateCompanyBranchHyCompanybranchPayload) Validate() (err error) {

	if payload.Address == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "address"))
	}
	if utf8.RuneCountInString(payload.Address) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 2, true))
	}
	if utf8.RuneCountInString(payload.Address) > 80 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.address`, payload.Address, utf8.RuneCountInString(payload.Address), 80, false))
	}
	if payload.CountryID < 1 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 1, true))
	}
	if payload.CountryID > 999 {
		err = goa.MergeErrors(err, goa.InvalidRangeError(`raw.country_id`, payload.CountryID, 999, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCompanyBranchHyCompanybranchContext) OK(r *Company) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKDetailid sends a HTTP response with status code 200.
func (ctx *UpdateCompanyBranchHyCompanybranchContext) OKDetailid(r *CompanyDetailid) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *UpdateCompanyBranchHyCompanybranchContext) OKId(r *CompanyID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKIdname sends a HTTP response with status code 200.
func (ctx *UpdateCompanyBranchHyCompanybranchContext) OKIdname(r *CompanyIdname) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCompanyBranchHyCompanybranchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCompanyBranchHyCompanybranchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// CreateUserHyUserContext provides the hy_user CreateUser action context.
type CreateUserHyUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserHyUserPayload
}

// NewCreateUserHyUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_user controller CreateUser action.
func NewCreateUserHyUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserHyUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserHyUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createUserHyUserPayload is the hy_user CreateUser action payload.
type createUserHyUserPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// User name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserHyUserPayload) Validate() (err error) {
	if payload.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_name"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 8, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 20, false))
		}
	}
	if payload.UserName != nil {
		if utf8.RuneCountInString(*payload.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, *payload.UserName, utf8.RuneCountInString(*payload.UserName), 2, true))
		}
	}
	if payload.UserName != nil {
		if utf8.RuneCountInString(*payload.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, *payload.UserName, utf8.RuneCountInString(*payload.UserName), 20, false))
		}
	}
	return
}

// Publicize creates CreateUserHyUserPayload from createUserHyUserPayload
func (payload *createUserHyUserPayload) Publicize() *CreateUserHyUserPayload {
	var pub CreateUserHyUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.UserName != nil {
		pub.UserName = *payload.UserName
	}
	return &pub
}

// CreateUserHyUserPayload is the hy_user CreateUser action payload.
type CreateUserHyUserPayload struct {
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
	// User name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserHyUserPayload) Validate() (err error) {
	if payload.UserName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_name"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Password) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 8, true))
	}
	if utf8.RuneCountInString(payload.Password) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 20, false))
	}
	if utf8.RuneCountInString(payload.UserName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, payload.UserName, utf8.RuneCountInString(payload.UserName), 2, true))
	}
	if utf8.RuneCountInString(payload.UserName) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, payload.UserName, utf8.RuneCountInString(payload.UserName), 20, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserHyUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *CreateUserHyUserContext) OKId(r *UserID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateUserHyUserContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserHyUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteUserHyUserContext provides the hy_user DeleteUser action context.
type DeleteUserHyUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewDeleteUserHyUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_user controller DeleteUser action.
func NewDeleteUserHyUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUserHyUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUserHyUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteUserHyUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *DeleteUserHyUserContext) OKId(r *UserID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUserHyUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserHyUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetUserHyUserContext provides the hy_user GetUser action context.
type GetUserHyUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetUserHyUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_user controller GetUser action.
func NewGetUserHyUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserHyUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserHyUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`userID`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserHyUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *GetUserHyUserContext) OKId(r *UserID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetUserHyUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserHyUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateUserHyUserContext provides the hy_user UpdateUser action context.
type UpdateUserHyUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  int
	Payload *UpdateUserHyUserPayload
}

// NewUpdateUserHyUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_user controller UpdateUser action.
func NewUpdateUserHyUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserHyUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserHyUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
	}
	return &rctx, err
}

// updateUserHyUserPayload is the hy_user UpdateUser action payload.
type updateUserHyUserPayload struct {
	// E-mail of user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// User name
	UserName *string `form:"user_name,omitempty" json:"user_name,omitempty" xml:"user_name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUserHyUserPayload) Validate() (err error) {
	if payload.UserName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_name"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Email != nil {
		if err2 := goa.ValidateFormat(goa.FormatEmail, *payload.Email); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, *payload.Email, goa.FormatEmail, err2))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 8, true))
		}
	}
	if payload.Password != nil {
		if utf8.RuneCountInString(*payload.Password) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, *payload.Password, utf8.RuneCountInString(*payload.Password), 20, false))
		}
	}
	if payload.UserName != nil {
		if utf8.RuneCountInString(*payload.UserName) < 2 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, *payload.UserName, utf8.RuneCountInString(*payload.UserName), 2, true))
		}
	}
	if payload.UserName != nil {
		if utf8.RuneCountInString(*payload.UserName) > 20 {
			err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, *payload.UserName, utf8.RuneCountInString(*payload.UserName), 20, false))
		}
	}
	return
}

// Publicize creates UpdateUserHyUserPayload from updateUserHyUserPayload
func (payload *updateUserHyUserPayload) Publicize() *UpdateUserHyUserPayload {
	var pub UpdateUserHyUserPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.UserName != nil {
		pub.UserName = *payload.UserName
	}
	return &pub
}

// UpdateUserHyUserPayload is the hy_user UpdateUser action payload.
type UpdateUserHyUserPayload struct {
	// E-mail of user
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
	// User name
	UserName string `form:"user_name" json:"user_name" xml:"user_name"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateUserHyUserPayload) Validate() (err error) {
	if payload.UserName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user_name"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if err2 := goa.ValidateFormat(goa.FormatEmail, payload.Email); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`raw.email`, payload.Email, goa.FormatEmail, err2))
	}
	if utf8.RuneCountInString(payload.Password) < 8 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 8, true))
	}
	if utf8.RuneCountInString(payload.Password) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.password`, payload.Password, utf8.RuneCountInString(payload.Password), 20, false))
	}
	if utf8.RuneCountInString(payload.UserName) < 2 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, payload.UserName, utf8.RuneCountInString(payload.UserName), 2, true))
	}
	if utf8.RuneCountInString(payload.UserName) > 20 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`raw.user_name`, payload.UserName, utf8.RuneCountInString(payload.UserName), 20, false))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserHyUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *UpdateUserHyUserContext) OKId(r *UserID) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserHyUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserHyUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UserListHyUserContext provides the hy_user UserList action context.
type UserListHyUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUserListHyUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_user controller UserList action.
func NewUserListHyUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserListHyUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserListHyUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserListHyUserContext) OK(r UserCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKId sends a HTTP response with status code 200.
func (ctx *UserListHyUserContext) OKId(r UserIDCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	if r == nil {
		r = UserIDCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UserListHyUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserListHyUserContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// GetUserDislikeTechHyUsertechContext provides the hy_usertech GetUserDislikeTech action context.
type GetUserDislikeTechHyUsertechContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetUserDislikeTechHyUsertechContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_usertech controller GetUserDislikeTech action.
func NewGetUserDislikeTechHyUsertechContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserDislikeTechHyUsertechContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserDislikeTechHyUsertechContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`userID`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserDislikeTechHyUsertechContext) OK(r UsertechCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertech+json; type=collection")
	if r == nil {
		r = UsertechCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTech sends a HTTP response with status code 200.
func (ctx *GetUserDislikeTechHyUsertechContext) OKTech(r UsertechTechCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertech+json; type=collection")
	if r == nil {
		r = UsertechTechCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetUserDislikeTechHyUsertechContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserDislikeTechHyUsertechContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// GetUserLikeTechHyUsertechContext provides the hy_usertech GetUserLikeTech action context.
type GetUserLikeTechHyUsertechContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID int
}

// NewGetUserLikeTechHyUsertechContext parses the incoming request URL and body, performs validations and creates the
// context used by the hy_usertech controller GetUserLikeTech action.
func NewGetUserLikeTechHyUsertechContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserLikeTechHyUsertechContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserLikeTechHyUsertechContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := strconv.Atoi(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "integer"))
		}
		if rctx.UserID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`userID`, rctx.UserID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserLikeTechHyUsertechContext) OK(r UsertechCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertech+json; type=collection")
	if r == nil {
		r = UsertechCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTech sends a HTTP response with status code 200.
func (ctx *GetUserLikeTechHyUsertechContext) OKTech(r UsertechTechCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.usertech+json; type=collection")
	if r == nil {
		r = UsertechTechCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetUserLikeTechHyUsertechContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *GetUserLikeTechHyUsertechContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}
