// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "api": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/hiromaily/go-goa/goa/design
// --out=$(GOPATH)/src/github.com/hiromaily/go-goa/goa
// --version=v1.3.1

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/hiromaily/go-goa/goa/client"
	"github.com/spf13/cobra"
	"log"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
)

type (
	// LoginAuthCommand is the command line data structure for the Login action of auth
	LoginAuthCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// HealthHealthCommand is the command line data structure for the health action of health
	HealthHealthCommand struct {
		PrettyPrint bool
	}

	// CompanyListHyCompanyCommand is the command line data structure for the CompanyList action of hy_company
	CompanyListHyCompanyCommand struct {
		PrettyPrint bool
	}

	// CreateCompanyHyCompanyCommand is the command line data structure for the CreateCompany action of hy_company
	CreateCompanyHyCompanyCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteCompanyHyCompanyCommand is the command line data structure for the DeleteCompany action of hy_company
	DeleteCompanyHyCompanyCommand struct {
		// Company ID
		CompanyID   int
		PrettyPrint bool
	}

	// GetCompanyGroupHyCompanyCommand is the command line data structure for the GetCompanyGroup action of hy_company
	GetCompanyGroupHyCompanyCommand struct {
		// Company ID
		CompanyID   int
		HqFlg       string
		PrettyPrint bool
	}

	// UpdateCompanyHyCompanyCommand is the command line data structure for the UpdateCompany action of hy_company
	UpdateCompanyHyCompanyCommand struct {
		Payload     string
		ContentType string
		// Company ID
		CompanyID   int
		PrettyPrint bool
	}

	// CreateCompanyBranchHyCompanybranchCommand is the command line data structure for the CreateCompanyBranch action of hy_companybranch
	CreateCompanyBranchHyCompanybranchCommand struct {
		Payload     string
		ContentType string
		// Company ID
		ID          int
		PrettyPrint bool
	}

	// DeleteCompanyBranchHyCompanybranchCommand is the command line data structure for the DeleteCompanyBranch action of hy_companybranch
	DeleteCompanyBranchHyCompanybranchCommand struct {
		// Company detail ID
		ID          int
		PrettyPrint bool
	}

	// GetCompanyBranchHyCompanybranchCommand is the command line data structure for the GetCompanyBranch action of hy_companybranch
	GetCompanyBranchHyCompanybranchCommand struct {
		// Company detail ID
		ID          int
		PrettyPrint bool
	}

	// UpdateCompanyBranchHyCompanybranchCommand is the command line data structure for the UpdateCompanyBranch action of hy_companybranch
	UpdateCompanyBranchHyCompanybranchCommand struct {
		Payload     string
		ContentType string
		// Company detail ID
		ID          int
		PrettyPrint bool
	}

	// CreateTechHyTechCommand is the command line data structure for the CreateTech action of hy_tech
	CreateTechHyTechCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteTechHyTechCommand is the command line data structure for the DeleteTech action of hy_tech
	DeleteTechHyTechCommand struct {
		// Tech ID
		TechID      int
		PrettyPrint bool
	}

	// GetTechHyTechCommand is the command line data structure for the GetTech action of hy_tech
	GetTechHyTechCommand struct {
		// Tech ID
		TechID      int
		PrettyPrint bool
	}

	// TechListHyTechCommand is the command line data structure for the TechList action of hy_tech
	TechListHyTechCommand struct {
		PrettyPrint bool
	}

	// UpdateTechHyTechCommand is the command line data structure for the UpdateTech action of hy_tech
	UpdateTechHyTechCommand struct {
		Payload     string
		ContentType string
		// Tech ID
		TechID      int
		PrettyPrint bool
	}

	// CreateUserHyUserCommand is the command line data structure for the CreateUser action of hy_user
	CreateUserHyUserCommand struct {
		Payload     string
		ContentType string
		PrettyPrint bool
	}

	// DeleteUserHyUserCommand is the command line data structure for the DeleteUser action of hy_user
	DeleteUserHyUserCommand struct {
		// User ID
		UserID      int
		PrettyPrint bool
	}

	// GetUserHyUserCommand is the command line data structure for the GetUser action of hy_user
	GetUserHyUserCommand struct {
		// User ID
		UserID      int
		PrettyPrint bool
	}

	// UpdateUserHyUserCommand is the command line data structure for the UpdateUser action of hy_user
	UpdateUserHyUserCommand struct {
		Payload     string
		ContentType string
		// User ID
		UserID      int
		PrettyPrint bool
	}

	// UserListHyUserCommand is the command line data structure for the UserList action of hy_user
	UserListHyUserCommand struct {
		PrettyPrint bool
	}

	// GetUserWorkHistoryHyUserWorkHistoryCommand is the command line data structure for the GetUserWorkHistory action of hy_userWorkHistory
	GetUserWorkHistoryHyUserWorkHistoryCommand struct {
		// User ID
		UserID      int
		PrettyPrint bool
	}

	// GetUserDislikeTechHyUsertechCommand is the command line data structure for the GetUserDislikeTech action of hy_usertech
	GetUserDislikeTechHyUsertechCommand struct {
		// User ID
		UserID      int
		PrettyPrint bool
	}

	// GetUserLikeTechHyUsertechCommand is the command line data structure for the GetUserLikeTech action of hy_usertech
	GetUserLikeTechHyUsertechCommand struct {
		// User ID
		UserID      int
		PrettyPrint bool
	}

	// DownloadCommand is the command line data structure for the download command.
	DownloadCommand struct {
		// OutFile is the path to the download output file.
		OutFile string
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "company-list",
		Short: `List all companies`,
	}
	tmp1 := new(CompanyListHyCompanyCommand)
	sub = &cobra.Command{
		Use:   `hy-company ["/api/company"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create-company",
		Short: `Create new company`,
	}
	tmp2 := new(CreateCompanyHyCompanyCommand)
	sub = &cobra.Command{
		Use:   `hy-company ["/api/company"]`,
		Short: ``,
		Long: `

Payload example:

{
   "address": "Shinagawa Tokyo",
   "country_id": 110,
   "name": "Company"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create-company-branch",
		Short: `Create new company branch`,
	}
	tmp3 := new(CreateCompanyBranchHyCompanybranchCommand)
	sub = &cobra.Command{
		Use:   `hy-companybranch ["/api/company/branch/ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "address": "Shinagawa Tokyo",
   "country_id": 110
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create-tech",
		Short: `Create new tech`,
	}
	tmp4 := new(CreateTechHyTechCommand)
	sub = &cobra.Command{
		Use:   `hy-tech ["/api/tech"]`,
		Short: ``,
		Long: `

Payload example:

{
   "name": "Golang"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "create-user",
		Short: `Create new user`,
	}
	tmp5 := new(CreateUserHyUserCommand)
	sub = &cobra.Command{
		Use:   `hy-user ["/api/user"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "hy@gmail.com",
   "password": "xxxxxxxx",
   "user_name": "Hiroki"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp5.Run(c, args) },
	}
	tmp5.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp5.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete-company",
		Short: `Delete company`,
	}
	tmp6 := new(DeleteCompanyHyCompanyCommand)
	sub = &cobra.Command{
		Use:   `hy-company ["/api/company/COMPANYID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp6.Run(c, args) },
	}
	tmp6.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp6.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete-company-branch",
		Short: `Delete company branch`,
	}
	tmp7 := new(DeleteCompanyBranchHyCompanybranchCommand)
	sub = &cobra.Command{
		Use:   `hy-companybranch ["/api/company/branch/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp7.Run(c, args) },
	}
	tmp7.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp7.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete-tech",
		Short: `Delete tech`,
	}
	tmp8 := new(DeleteTechHyTechCommand)
	sub = &cobra.Command{
		Use:   `hy-tech ["/api/tech/TECHID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp8.Run(c, args) },
	}
	tmp8.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp8.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "delete-user",
		Short: `Delete user `,
	}
	tmp9 := new(DeleteUserHyUserCommand)
	sub = &cobra.Command{
		Use:   `hy-user ["/api/user/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp9.Run(c, args) },
	}
	tmp9.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp9.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-company-branch",
		Short: `Retrieve company branch with given id`,
	}
	tmp10 := new(GetCompanyBranchHyCompanybranchCommand)
	sub = &cobra.Command{
		Use:   `hy-companybranch ["/api/company/branch/ID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp10.Run(c, args) },
	}
	tmp10.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp10.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-company-group",
		Short: `Retrieve company with given company_id`,
	}
	tmp11 := new(GetCompanyGroupHyCompanyCommand)
	sub = &cobra.Command{
		Use:   `hy-company ["/api/company/COMPANYID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp11.Run(c, args) },
	}
	tmp11.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp11.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-tech",
		Short: `Retrieve tech with given tech id`,
	}
	tmp12 := new(GetTechHyTechCommand)
	sub = &cobra.Command{
		Use:   `hy-tech ["/api/tech/TECHID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp12.Run(c, args) },
	}
	tmp12.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp12.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-user",
		Short: `Retrieve user with given id.`,
	}
	tmp13 := new(GetUserHyUserCommand)
	sub = &cobra.Command{
		Use:   `hy-user ["/api/user/USERID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp13.Run(c, args) },
	}
	tmp13.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp13.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-user-dislike-tech",
		Short: `Retrieve user's dislike techs.`,
	}
	tmp14 := new(GetUserDislikeTechHyUsertechCommand)
	sub = &cobra.Command{
		Use:   `hy-usertech ["/api/user/USERID/disliketech"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp14.Run(c, args) },
	}
	tmp14.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp14.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-user-like-tech",
		Short: `Retrieve user's favorite techs.`,
	}
	tmp15 := new(GetUserLikeTechHyUsertechCommand)
	sub = &cobra.Command{
		Use:   `hy-usertech ["/api/user/USERID/liketech"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp15.Run(c, args) },
	}
	tmp15.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp15.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "get-user-work-history",
		Short: `Retrieve user's work history.`,
	}
	tmp16 := new(GetUserWorkHistoryHyUserWorkHistoryCommand)
	sub = &cobra.Command{
		Use:   `hy-user-work-history ["/api/user/USERID/workhistory"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp16.Run(c, args) },
	}
	tmp16.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp16.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "health",
		Short: `Perform health check.`,
	}
	tmp17 := new(HealthHealthCommand)
	sub = &cobra.Command{
		Use:   `health ["/api/_ah/health"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp17.Run(c, args) },
	}
	tmp17.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp17.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "login",
		Short: `user login`,
	}
	tmp18 := new(LoginAuthCommand)
	sub = &cobra.Command{
		Use:   `auth ["/api/auth/login"]`,
		Short: `This resource uses JWT to secure its endpoints`,
		Long: `This resource uses JWT to secure its endpoints

Payload example:

{
   "email": "hy@gmail.com",
   "password": "xxxxxxxx"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp18.Run(c, args) },
	}
	tmp18.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp18.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "tech-list",
		Short: `List all techs`,
	}
	tmp19 := new(TechListHyTechCommand)
	sub = &cobra.Command{
		Use:   `hy-tech ["/api/tech"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp19.Run(c, args) },
	}
	tmp19.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp19.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-company",
		Short: `Change company properties`,
	}
	tmp20 := new(UpdateCompanyHyCompanyCommand)
	sub = &cobra.Command{
		Use:   `hy-company ["/api/company/COMPANYID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "address": "Shinagawa Tokyo",
   "country_id": 110,
   "name": "Company"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp20.Run(c, args) },
	}
	tmp20.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp20.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-company-branch",
		Short: `Change company branch properties`,
	}
	tmp21 := new(UpdateCompanyBranchHyCompanybranchCommand)
	sub = &cobra.Command{
		Use:   `hy-companybranch ["/api/company/branch/ID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "address": "Shinagawa Tokyo",
   "country_id": 110
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp21.Run(c, args) },
	}
	tmp21.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp21.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-tech",
		Short: `Change tech properties`,
	}
	tmp22 := new(UpdateTechHyTechCommand)
	sub = &cobra.Command{
		Use:   `hy-tech ["/api/tech/TECHID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "name": "Golang"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp22.Run(c, args) },
	}
	tmp22.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp22.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "update-user",
		Short: `Change user properties`,
	}
	tmp23 := new(UpdateUserHyUserCommand)
	sub = &cobra.Command{
		Use:   `hy-user ["/api/user/USERID"]`,
		Short: ``,
		Long: `

Payload example:

{
   "email": "hy@gmail.com",
   "password": "xxxxxxxx",
   "user_name": "Hiroki"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp23.Run(c, args) },
	}
	tmp23.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp23.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "user-list",
		Short: `Retrieve all users.`,
	}
	tmp24 := new(UserListHyUserCommand)
	sub = &cobra.Command{
		Use:   `hy-user ["/api/user"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp24.Run(c, args) },
	}
	tmp24.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp24.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)

	dl := new(DownloadCommand)
	dlc := &cobra.Command{
		Use:   "download [PATH]",
		Short: "Download file with given path",
		RunE: func(cmd *cobra.Command, args []string) error {
			return dl.Run(c, args)
		},
	}
	dlc.Flags().StringVar(&dl.OutFile, "out", "", "Output file")
	app.AddCommand(dlc)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run downloads files with given paths.
func (cmd *DownloadCommand) Run(c *client.Client, args []string) error {
	var (
		fnf func(context.Context, string) (int64, error)
		fnd func(context.Context, string, string) (int64, error)

		rpath   = args[0]
		outfile = cmd.OutFile
		logger  = goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
		ctx     = goa.WithLogger(context.Background(), logger)
		err     error
	)

	if rpath[0] != '/' {
		rpath = "/" + rpath
	}
	if rpath == "/swagger.json" {
		fnf = c.DownloadSwaggerJSON
		if outfile == "" {
			outfile = "swagger.json"
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/") {
		fnd = c.Download
		rpath = rpath[1:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	if strings.HasPrefix(rpath, "/swagger-ui/") {
		fnd = c.DownloadSwaggerUI
		rpath = rpath[12:]
		if outfile == "" {
			_, outfile = path.Split(rpath)
		}
		goto found
	}
	return fmt.Errorf("don't know how to download %s", rpath)
found:
	ctx = goa.WithLogContext(ctx, "file", outfile)
	if fnf != nil {
		_, err = fnf(ctx, outfile)
	} else {
		_, err = fnd(ctx, rpath, outfile)
	}
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	return nil
}

// Run makes the HTTP request corresponding to the LoginAuthCommand command.
func (cmd *LoginAuthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/auth/login"
	}
	var payload client.LoginAuthPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.LoginAuth(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *LoginAuthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the HealthHealthCommand command.
func (cmd *HealthHealthCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/_ah/health"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.HealthHealth(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *HealthHealthCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the CompanyListHyCompanyCommand command.
func (cmd *CompanyListHyCompanyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/company"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CompanyListHyCompany(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CompanyListHyCompanyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the CreateCompanyHyCompanyCommand command.
func (cmd *CreateCompanyHyCompanyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/company"
	}
	var payload client.CreateCompanyHyCompanyPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateCompanyHyCompany(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateCompanyHyCompanyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteCompanyHyCompanyCommand command.
func (cmd *DeleteCompanyHyCompanyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/%v", cmd.CompanyID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteCompanyHyCompany(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteCompanyHyCompanyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var companyID int
	cc.Flags().IntVar(&cmd.CompanyID, "companyID", companyID, `Company ID`)
}

// Run makes the HTTP request corresponding to the GetCompanyGroupHyCompanyCommand command.
func (cmd *GetCompanyGroupHyCompanyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/%v", cmd.CompanyID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCompanyGroupHyCompany(ctx, path, stringFlagVal("hq_flg", cmd.HqFlg))
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCompanyGroupHyCompanyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var companyID int
	cc.Flags().IntVar(&cmd.CompanyID, "companyID", companyID, `Company ID`)
	var hqFlg string
	cc.Flags().StringVar(&cmd.HqFlg, "hq_flg", hqFlg, ``)
}

// Run makes the HTTP request corresponding to the UpdateCompanyHyCompanyCommand command.
func (cmd *UpdateCompanyHyCompanyCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/%v", cmd.CompanyID)
	}
	var payload client.UpdateCompanyHyCompanyPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateCompanyHyCompany(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateCompanyHyCompanyCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var companyID int
	cc.Flags().IntVar(&cmd.CompanyID, "companyID", companyID, `Company ID`)
}

// Run makes the HTTP request corresponding to the CreateCompanyBranchHyCompanybranchCommand command.
func (cmd *CreateCompanyBranchHyCompanybranchCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/branch/%v", cmd.ID)
	}
	var payload client.CreateCompanyBranchHyCompanybranchPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateCompanyBranchHyCompanybranch(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateCompanyBranchHyCompanybranchCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "ID", id, `Company ID`)
}

// Run makes the HTTP request corresponding to the DeleteCompanyBranchHyCompanybranchCommand command.
func (cmd *DeleteCompanyBranchHyCompanybranchCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/branch/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteCompanyBranchHyCompanybranch(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteCompanyBranchHyCompanybranchCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "ID", id, `Company detail ID`)
}

// Run makes the HTTP request corresponding to the GetCompanyBranchHyCompanybranchCommand command.
func (cmd *GetCompanyBranchHyCompanybranchCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/branch/%v", cmd.ID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetCompanyBranchHyCompanybranch(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetCompanyBranchHyCompanybranchCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var id int
	cc.Flags().IntVar(&cmd.ID, "ID", id, `Company detail ID`)
}

// Run makes the HTTP request corresponding to the UpdateCompanyBranchHyCompanybranchCommand command.
func (cmd *UpdateCompanyBranchHyCompanybranchCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/company/branch/%v", cmd.ID)
	}
	var payload client.UpdateCompanyBranchHyCompanybranchPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateCompanyBranchHyCompanybranch(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateCompanyBranchHyCompanybranchCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var id int
	cc.Flags().IntVar(&cmd.ID, "ID", id, `Company detail ID`)
}

// Run makes the HTTP request corresponding to the CreateTechHyTechCommand command.
func (cmd *CreateTechHyTechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/tech"
	}
	var payload client.CreateTechHyTechPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateTechHyTech(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateTechHyTechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteTechHyTechCommand command.
func (cmd *DeleteTechHyTechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/tech/%v", cmd.TechID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteTechHyTech(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteTechHyTechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var techID int
	cc.Flags().IntVar(&cmd.TechID, "techID", techID, `Tech ID`)
}

// Run makes the HTTP request corresponding to the GetTechHyTechCommand command.
func (cmd *GetTechHyTechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/tech/%v", cmd.TechID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetTechHyTech(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetTechHyTechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var techID int
	cc.Flags().IntVar(&cmd.TechID, "techID", techID, `Tech ID`)
}

// Run makes the HTTP request corresponding to the TechListHyTechCommand command.
func (cmd *TechListHyTechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/tech"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.TechListHyTech(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *TechListHyTechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the UpdateTechHyTechCommand command.
func (cmd *UpdateTechHyTechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/tech/%v", cmd.TechID)
	}
	var payload client.UpdateTechHyTechPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateTechHyTech(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateTechHyTechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var techID int
	cc.Flags().IntVar(&cmd.TechID, "techID", techID, `Tech ID`)
}

// Run makes the HTTP request corresponding to the CreateUserHyUserCommand command.
func (cmd *CreateUserHyUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/user"
	}
	var payload client.CreateUserHyUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateUserHyUser(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateUserHyUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
}

// Run makes the HTTP request corresponding to the DeleteUserHyUserCommand command.
func (cmd *DeleteUserHyUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/user/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.DeleteUserHyUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *DeleteUserHyUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
}

// Run makes the HTTP request corresponding to the GetUserHyUserCommand command.
func (cmd *GetUserHyUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/user/%v", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUserHyUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserHyUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
}

// Run makes the HTTP request corresponding to the UpdateUserHyUserCommand command.
func (cmd *UpdateUserHyUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/user/%v", cmd.UserID)
	}
	var payload client.UpdateUserHyUserPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UpdateUserHyUser(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UpdateUserHyUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
}

// Run makes the HTTP request corresponding to the UserListHyUserCommand command.
func (cmd *UserListHyUserCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = "/api/user"
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.UserListHyUser(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *UserListHyUserCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
}

// Run makes the HTTP request corresponding to the GetUserWorkHistoryHyUserWorkHistoryCommand command.
func (cmd *GetUserWorkHistoryHyUserWorkHistoryCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/user/%v/workhistory", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUserWorkHistoryHyUserWorkHistory(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserWorkHistoryHyUserWorkHistoryCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
}

// Run makes the HTTP request corresponding to the GetUserDislikeTechHyUsertechCommand command.
func (cmd *GetUserDislikeTechHyUsertechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/user/%v/disliketech", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUserDislikeTechHyUsertech(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserDislikeTechHyUsertechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
}

// Run makes the HTTP request corresponding to the GetUserLikeTechHyUsertechCommand command.
func (cmd *GetUserLikeTechHyUsertechCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/api/user/%v/liketech", cmd.UserID)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.GetUserLikeTechHyUsertech(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *GetUserLikeTechHyUsertechCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var userID int
	cc.Flags().IntVar(&cmd.UserID, "userID", userID, `User ID`)
}
