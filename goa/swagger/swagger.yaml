consumes:
- application/xml
- application/json
definitions:
  Authorized:
    description: An authorized response (default view)
    example:
      token: token.string
    properties:
      token:
        description: JWT token
        example: token.string
        type: string
    required:
    - token
    title: 'Mediatype identifier: application/vnd.authorized+json; view=default'
    type: object
  Company:
    description: A company information (default view)
    example:
      address: Culpa voluptatem ullam.
      company_id: 2
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    properties:
      address:
        example: Culpa voluptatem ullam.
        type: string
      company_id:
        description: Company ID
        example: 2
        minimum: 1
        type: integer
      country_name:
        example: Sit dolor neque nulla.
        type: string
      hq_flg:
        example: Nisi dolorum.
        type: string
      id:
        description: Company Detail ID
        example: 10
        minimum: 1
        type: integer
      name:
        example: Sunt cum aut blanditiis accusantium.
        type: string
    required:
    - company_id
    - name
    title: 'Mediatype identifier: application/vnd.company+json; view=default'
    type: object
  CompanyCollection:
    description: CompanyCollection is the media type for an array of Company (default
      view)
    example:
    - address: Culpa voluptatem ullam.
      company_id: 2
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    - address: Culpa voluptatem ullam.
      company_id: 2
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    - address: Culpa voluptatem ullam.
      company_id: 2
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    items:
      $ref: '#/definitions/Company'
    title: 'Mediatype identifier: application/vnd.company+json; type=collection; view=default'
    type: array
  CreateCompanyHyCompanyPayload:
    example:
      address: Shinagawa Tokyo
      company_id: 10
      country_id: Japan
      hq_flg: "1"
      name: Company
    properties:
      address:
        description: Address of company
        example: Shinagawa Tokyo
        maxLength: 80
        minLength: 2
        type: string
      company_id:
        description: Company ID
        example: 10
        maximum: 999999
        minimum: 1
        type: integer
      country_id:
        description: Country's ID
        example: Japan
        maxLength: 60
        minLength: 2
        type: string
      hq_flg:
        description: Headquarters flg
        example: "1"
        maxLength: 1
        minLength: 1
        type: string
      name:
        description: Company Name
        example: Company
        maxLength: 40
        minLength: 2
        type: string
    required:
    - name
    - country_id
    - address
    title: CreateCompanyHyCompanyPayload
    type: object
  CreateUserHyUserPayload:
    example:
      email: hy@gmail.com
      password: xxxxxxxx
      user_name: Hiroki
    properties:
      email:
        description: E-mail of user
        example: hy@gmail.com
        format: email
        type: string
      password:
        description: Password
        example: xxxxxxxx
        maxLength: 20
        minLength: 8
        type: string
      user_name:
        description: User name
        example: Hiroki
        maxLength: 20
        minLength: 2
        type: string
    required:
    - user_name
    - email
    - password
    title: CreateUserHyUserPayload
    type: object
  LoginAuthPayload:
    example:
      email: hy@gmail.com
      password: xxxxxxxx
    properties:
      email:
        description: E-mail of user
        example: hy@gmail.com
        format: email
        type: string
      password:
        description: Password
        example: xxxxxxxx
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    title: LoginAuthPayload
    type: object
  UpdateCompanyHyCompanyPayload:
    example:
      address: Shinagawa Tokyo
      company_id: 10
      country_id: Japan
      hq_flg: "1"
      name: Company
    properties:
      address:
        description: Address of company
        example: Shinagawa Tokyo
        maxLength: 80
        minLength: 2
        type: string
      company_id:
        description: Company ID
        example: 10
        maximum: 999999
        minimum: 1
        type: integer
      country_id:
        description: Country's ID
        example: Japan
        maxLength: 60
        minLength: 2
        type: string
      hq_flg:
        description: Headquarters flg
        example: "1"
        maxLength: 1
        minLength: 1
        type: string
      name:
        description: Company Name
        example: Company
        maxLength: 40
        minLength: 2
        type: string
    required:
    - name
    - country_id
    - address
    title: UpdateCompanyHyCompanyPayload
    type: object
  UpdateUserHyUserPayload:
    example:
      email: hy@gmail.com
      password: xxxxxxxx
      user_name: Hiroki
    properties:
      email:
        description: E-mail of user
        example: hy@gmail.com
        format: email
        type: string
      password:
        description: Password
        example: xxxxxxxx
        maxLength: 20
        minLength: 8
        type: string
      user_name:
        description: User name
        example: Hiroki
        maxLength: 20
        minLength: 2
        type: string
    required:
    - user_name
    - email
    - password
    title: UpdateUserHyUserPayload
    type: object
  User:
    description: A user information (default view)
    example:
      email: Aut tempora et beatae sapiente.
      id: 1
      user_name: Eveniet vel nesciunt omnis est ducimus est.
    properties:
      email:
        example: Aut tempora et beatae sapiente.
        type: string
      id:
        description: User ID
        example: 1
        minimum: 1
        type: integer
      user_name:
        example: Eveniet vel nesciunt omnis est ducimus est.
        type: string
    required:
    - user_name
    - email
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
  UserCollection:
    description: UserCollection is the media type for an array of User (default view)
    example:
    - email: Aut tempora et beatae sapiente.
      id: 1
      user_name: Eveniet vel nesciunt omnis est ducimus est.
    - email: Aut tempora et beatae sapiente.
      id: 1
      user_name: Eveniet vel nesciunt omnis est ducimus est.
    items:
      $ref: '#/definitions/User'
    title: 'Mediatype identifier: application/vnd.user+json; type=collection; view=default'
    type: array
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
externalDocs:
  description: goa guide
  url: http://goa.design/getting-started.html
host: localhost:8080
info:
  contact:
    email: hiromaily@gmail.com
    name: hiromaily
    url: https://hiromaily.github.io/
  description: hiromaily API with goa
  license:
    name: MIT
    url: https://github.com/goadesign/goa/blob/master/LICENSE
  title: hiromaily API
  version: ""
paths:
  /{filepath}:
    get:
      operationId: public#/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download public/
  /api/_ah/health:
    get:
      description: Perform health check.
      operationId: health#health
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      schemes:
      - http
      summary: health health
      tags:
      - health
  /api/auth/login:
    post:
      description: user login
      operationId: auth#Login
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LoginAuthPayload'
      produces:
      - application/vnd.authorized+json
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              description: Generated JWT
              type: string
          schema:
            $ref: '#/definitions/Authorized'
        "401":
          description: Unauthorized
      schemes:
      - http
      summary: Login auth
      tags:
      - auth
  /api/company:
    get:
      description: |-
        List all companies

        Required security scopes:
          * `api:access`
      operationId: hy_company#CompanyList
      produces:
      - application/vnd.goa.error
      - application/vnd.company+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CompanyCollection'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CompanyList hy_company
      tags:
      - hy_company
    post:
      description: |-
        Create new company

        Required security scopes:
          * `api:access`
      operationId: hy_company#CreateCompany
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateCompanyHyCompanyPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.company+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CreateCompany hy_company
      tags:
      - hy_company
  /api/company/{companyID}:
    delete:
      description: |-
        Delete company

        Required security scopes:
          * `api:access`
      operationId: hy_company#DeleteCompany
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: DeleteCompany hy_company
      tags:
      - hy_company
    get:
      description: |-
        Retrieve company with given company_id

        Required security scopes:
          * `api:access`
      operationId: hy_company#GetCompanyGroup
      parameters:
      - in: path
        name: companyID
        required: true
        type: integer
      - enum:
        - "1"
        - "0"
        in: query
        name: hq_flg
        required: false
        type: string
      produces:
      - application/vnd.goa.error
      - application/vnd.company+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CompanyCollection'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetCompanyGroup hy_company
      tags:
      - hy_company
    put:
      description: |-
        Change company properties

        Required security scopes:
          * `api:access`
      operationId: hy_company#UpdateCompany
      parameters:
      - in: path
        name: companyID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateCompanyHyCompanyPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.company+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UpdateCompany hy_company
      tags:
      - hy_company
  /api/user:
    get:
      description: |-
        Retrieve all users.

        Required security scopes:
          * `api:access`
      operationId: hy_user#UserList
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserCollection'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UserList hy_user
      tags:
      - hy_user
    post:
      description: |-
        Create new user

        Required security scopes:
          * `api:access`
      operationId: hy_user#CreateUser
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserHyUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CreateUser hy_user
      tags:
      - hy_user
  /api/user/{userID}:
    delete:
      description: "Delete user \n\nRequired security scopes:\n  * `api:access`"
      operationId: hy_user#DeleteUser
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: DeleteUser hy_user
      tags:
      - hy_user
    get:
      description: |-
        Retrieve user with given id.

        Required security scopes:
          * `api:access`
      operationId: hy_user#GetUser
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetUser hy_user
      tags:
      - hy_user
    put:
      description: |-
        Change user properties

        Required security scopes:
          * `api:access`
      operationId: hy_user#UpdateUser
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserHyUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UpdateUser hy_user
      tags:
      - hy_user
  /swagger-ui/{filepath}:
    get:
      operationId: public#/swagger-ui/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download resources/swagger-ui/dist/
  /swagger.json:
    get:
      operationId: public#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download goa/swagger/swagger.json
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  Created:
    description: Created
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  OK:
    description: OK
    schema:
      $ref: '#/definitions/Company'
  Unauthorized:
    description: Unauthorized
schemes:
- http
securityDefinitions:
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
