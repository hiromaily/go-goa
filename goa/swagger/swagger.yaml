consumes:
- application/xml
- application/json
definitions:
  Authorized:
    description: An authorized response (default view)
    example:
      id: 10
      token: token.string
    properties:
      id:
        description: ID
        example: 10
        minimum: 1
        type: integer
      token:
        description: JWT token
        example: token.string
        type: string
    required:
    - token
    - id
    title: 'Mediatype identifier: application/vnd.authorized+json; view=default'
    type: object
  Company:
    description: A company information (default view)
    example:
      address: Culpa voluptatem ullam.
      company_id: 10
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    properties:
      address:
        example: Culpa voluptatem ullam.
        type: string
      company_id:
        description: ID
        example: 10
        minimum: 1
        type: integer
      country_name:
        example: Sit dolor neque nulla.
        type: string
      hq_flg:
        example: Nisi dolorum.
        type: string
      id:
        description: ID
        example: 10
        minimum: 1
        type: integer
      name:
        example: Sunt cum aut blanditiis accusantium.
        type: string
    required:
    - name
    - address
    title: 'Mediatype identifier: application/vnd.company+json; view=default'
    type: object
  CompanyCollection:
    description: CompanyCollection is the media type for an array of Company (default
      view)
    example:
    - address: Culpa voluptatem ullam.
      company_id: 10
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    - address: Culpa voluptatem ullam.
      company_id: 10
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    - address: Culpa voluptatem ullam.
      company_id: 10
      country_name: Sit dolor neque nulla.
      hq_flg: Nisi dolorum.
      id: 10
      name: Sunt cum aut blanditiis accusantium.
    items:
      $ref: '#/definitions/Company'
    title: 'Mediatype identifier: application/vnd.company+json; type=collection; view=default'
    type: array
  CreateCompanyBranchHyCompanybranchPayload:
    example:
      address: Shinagawa Tokyo
      country_id: 110
    properties:
      address:
        description: Company Address
        example: Shinagawa Tokyo
        maxLength: 80
        minLength: 2
        type: string
      country_id:
        description: Country ID
        example: 110
        maximum: 999
        minimum: 1
        type: integer
    required:
    - country_id
    - address
    title: CreateCompanyBranchHyCompanybranchPayload
    type: object
  CreateCompanyHyCompanyPayload:
    example:
      address: Shinagawa Tokyo
      country_id: 110
      name: Company
    properties:
      address:
        description: Company Address
        example: Shinagawa Tokyo
        maxLength: 80
        minLength: 2
        type: string
      country_id:
        description: Country ID
        example: 110
        maximum: 999
        minimum: 1
        type: integer
      name:
        description: Company name
        example: Company
        maxLength: 40
        minLength: 2
        type: string
    required:
    - name
    - country_id
    - address
    title: CreateCompanyHyCompanyPayload
    type: object
  CreateTechHyTechPayload:
    example:
      name: Golang
    properties:
      name:
        description: Tech name
        example: Golang
        maxLength: 40
        minLength: 1
        type: string
    required:
    - name
    title: CreateTechHyTechPayload
    type: object
  CreateUserHyUserPayload:
    example:
      email: hy@gmail.com
      password: xxxxxxxx
      user_name: Hiroki
    properties:
      email:
        description: E-mail of user
        example: hy@gmail.com
        format: email
        type: string
      password:
        description: Password
        example: xxxxxxxx
        maxLength: 20
        minLength: 8
        type: string
      user_name:
        description: User name
        example: Hiroki
        maxLength: 20
        minLength: 2
        type: string
    required:
    - user_name
    - email
    - password
    title: CreateUserHyUserPayload
    type: object
  LoginAuthPayload:
    example:
      email: hy@gmail.com
      password: xxxxxxxx
    properties:
      email:
        description: E-mail of user
        example: hy@gmail.com
        format: email
        type: string
      password:
        description: Password
        example: xxxxxxxx
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    title: LoginAuthPayload
    type: object
  Tech:
    description: A tech information (default view)
    example:
      id: 10
      name: Aut tempora et beatae sapiente.
    properties:
      id:
        description: ID
        example: 10
        minimum: 1
        type: integer
      name:
        example: Aut tempora et beatae sapiente.
        type: string
    required:
    - name
    title: 'Mediatype identifier: application/vnd.tech+json; view=default'
    type: object
  TechCollection:
    description: TechCollection is the media type for an array of Tech (default view)
    example:
    - id: 10
      name: Aut tempora et beatae sapiente.
    - id: 10
      name: Aut tempora et beatae sapiente.
    - id: 10
      name: Aut tempora et beatae sapiente.
    items:
      $ref: '#/definitions/Tech'
    title: 'Mediatype identifier: application/vnd.tech+json; type=collection; view=default'
    type: array
  UpdateCompanyBranchHyCompanybranchPayload:
    example:
      address: Shinagawa Tokyo
      country_id: 110
    properties:
      address:
        description: Company Address
        example: Shinagawa Tokyo
        maxLength: 80
        minLength: 2
        type: string
      country_id:
        description: Country ID
        example: 110
        maximum: 999
        minimum: 1
        type: integer
    required:
    - country_id
    - address
    title: UpdateCompanyBranchHyCompanybranchPayload
    type: object
  UpdateCompanyHyCompanyPayload:
    example:
      address: Shinagawa Tokyo
      country_id: 110
      name: Company
    properties:
      address:
        description: Company Address
        example: Shinagawa Tokyo
        maxLength: 80
        minLength: 2
        type: string
      country_id:
        description: Country ID
        example: 110
        maximum: 999
        minimum: 1
        type: integer
      name:
        description: Company name
        example: Company
        maxLength: 40
        minLength: 2
        type: string
    required:
    - name
    - country_id
    - address
    title: UpdateCompanyHyCompanyPayload
    type: object
  UpdateTechHyTechPayload:
    example:
      name: Golang
    properties:
      name:
        description: Tech name
        example: Golang
        maxLength: 40
        minLength: 1
        type: string
    required:
    - name
    title: UpdateTechHyTechPayload
    type: object
  UpdateUserHyUserPayload:
    example:
      email: hy@gmail.com
      password: xxxxxxxx
      user_name: Hiroki
    properties:
      email:
        description: E-mail of user
        example: hy@gmail.com
        format: email
        type: string
      password:
        description: Password
        example: xxxxxxxx
        maxLength: 20
        minLength: 8
        type: string
      user_name:
        description: User name
        example: Hiroki
        maxLength: 20
        minLength: 2
        type: string
    required:
    - user_name
    - email
    - password
    title: UpdateUserHyUserPayload
    type: object
  User:
    description: A user information (default view)
    example:
      email: Quo alias aut quo aut.
      id: 10
      user_name: Ducimus est.
    properties:
      email:
        example: Quo alias aut quo aut.
        type: string
      id:
        description: ID
        example: 10
        minimum: 1
        type: integer
      user_name:
        example: Ducimus est.
        type: string
    required:
    - user_name
    - email
    title: 'Mediatype identifier: application/vnd.user+json; view=default'
    type: object
  UserCollection:
    description: UserCollection is the media type for an array of User (default view)
    example:
    - email: Quo alias aut quo aut.
      id: 10
      user_name: Ducimus est.
    - email: Quo alias aut quo aut.
      id: 10
      user_name: Ducimus est.
    - email: Quo alias aut quo aut.
      id: 10
      user_name: Ducimus est.
    items:
      $ref: '#/definitions/User'
    title: 'Mediatype identifier: application/vnd.user+json; type=collection; view=default'
    type: array
  Usertech:
    description: A user information (default view)
    example:
      id: 10
      tech_name: Golang
    properties:
      id:
        description: ID
        example: 10
        minimum: 1
        type: integer
      tech_name:
        description: Tech name
        example: Golang
        maxLength: 40
        minLength: 1
        type: string
    required:
    - tech_name
    title: 'Mediatype identifier: application/vnd.usertech+json; view=default'
    type: object
  UsertechCollection:
    description: UsertechCollection is the media type for an array of Usertech (default
      view)
    example:
    - id: 10
      tech_name: Golang
    items:
      $ref: '#/definitions/Usertech'
    title: 'Mediatype identifier: application/vnd.usertech+json; type=collection;
      view=default'
    type: array
  Userworkhistory:
    description: A user information (default view)
    example:
      company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    properties:
      company:
        description: Company name
        example: Company
        maxLength: 40
        minLength: 2
        type: string
      country:
        description: Country code
        example: nl
        maxLength: 2
        minLength: 2
        type: string
      description:
        description: job description
        example: '["Developed resume site for job seeking."]'
      techs:
        description: used techs
        example: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker",
          "Travis-CI"]'
      term:
        description: worked period
        example: Jul 2017 - Aug 2017
        maxLength: 20
        minLength: 10
        type: string
      title:
        description: Job Title
        example: Developer
        maxLength: 40
        minLength: 2
        type: string
    required:
    - title
    - company
    - country
    title: 'Mediatype identifier: application/vnd.userworkhistory+json; view=default'
    type: object
  UserworkhistoryCollection:
    description: UserworkhistoryCollection is the media type for an array of Userworkhistory
      (default view)
    example:
    - company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    - company: Company
      country: nl
      description: '["Developed resume site for job seeking."]'
      techs: '["Golang with goa", "Riot.js", "Semantic UI", "MySQL", "Docker", "Travis-CI"]'
      term: Jul 2017 - Aug 2017
      title: Developer
    items:
      $ref: '#/definitions/Userworkhistory'
    title: 'Mediatype identifier: application/vnd.userworkhistory+json; type=collection;
      view=default'
    type: array
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 3F1FKVRR
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Mediatype identifier: application/vnd.goa.error; view=default'
    type: object
externalDocs:
  description: goa guide
  url: http://goa.design/getting-started.html
host: localhost:8080
info:
  contact:
    email: hiromaily@gmail.com
    name: hiromaily
    url: https://hiromaily.github.io/
  description: hiromaily API with goa
  license:
    name: MIT
    url: https://github.com/goadesign/goa/blob/master/LICENSE
  title: hiromaily API
  version: ""
paths:
  /{filepath}:
    get:
      operationId: public#/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download public/
  /api/_ah/health:
    get:
      description: Perform health check.
      operationId: health#health
      produces:
      - text/plain
      responses:
        "200":
          description: OK
      schemes:
      - http
      summary: health health
      tags:
      - health
  /api/auth/login:
    post:
      description: user login
      operationId: auth#Login
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/LoginAuthPayload'
      produces:
      - application/vnd.authorized+json
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              description: Generated JWT
              type: string
          schema:
            $ref: '#/definitions/Authorized'
        "401":
          description: Unauthorized
      schemes:
      - http
      summary: Login auth
      tags:
      - auth
  /api/company:
    get:
      description: |-
        List all companies

        Required security scopes:
          * `api:access`
      operationId: hy_company#CompanyList
      produces:
      - application/vnd.company+json; type=collection
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CompanyCollection'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CompanyList hy_company
      tags:
      - hy_company
    post:
      description: |-
        Create new company

        Required security scopes:
          * `api:access`
      operationId: hy_company#CreateCompany
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateCompanyHyCompanyPayload'
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CreateCompany hy_company
      tags:
      - hy_company
  /api/company/{companyID}:
    delete:
      description: |-
        Delete company

        Required security scopes:
          * `api:access`
      operationId: hy_company#DeleteCompany
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: integer
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: DeleteCompany hy_company
      tags:
      - hy_company
    get:
      description: |-
        Retrieve company with given company_id

        Required security scopes:
          * `api:access`
      operationId: hy_company#GetCompanyGroup
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: integer
      - enum:
        - "1"
        - "0"
        in: query
        name: hq_flg
        required: false
        type: string
      produces:
      - application/vnd.company+json; type=collection
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CompanyCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetCompanyGroup hy_company
      tags:
      - hy_company
    put:
      description: |-
        Change company properties

        Required security scopes:
          * `api:access`
      operationId: hy_company#UpdateCompany
      parameters:
      - description: Company ID
        in: path
        name: companyID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateCompanyHyCompanyPayload'
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UpdateCompany hy_company
      tags:
      - hy_company
  /api/company/branch/{ID}:
    delete:
      description: |-
        Delete company branch

        Required security scopes:
          * `api:access`
      operationId: hy_companybranch#DeleteCompanyBranch
      parameters:
      - description: Company detail ID
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: DeleteCompanyBranch hy_companybranch
      tags:
      - hy_companybranch
    get:
      description: |-
        Retrieve company branch with given id

        Required security scopes:
          * `api:access`
      operationId: hy_companybranch#GetCompanyBranch
      parameters:
      - description: Company detail ID
        in: path
        name: ID
        required: true
        type: integer
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetCompanyBranch hy_companybranch
      tags:
      - hy_companybranch
    post:
      description: |-
        Create new company branch

        Required security scopes:
          * `api:access`
      operationId: hy_companybranch#CreateCompanyBranch
      parameters:
      - description: Company ID
        in: path
        name: ID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateCompanyBranchHyCompanybranchPayload'
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CreateCompanyBranch hy_companybranch
      tags:
      - hy_companybranch
    put:
      description: |-
        Change company branch properties

        Required security scopes:
          * `api:access`
      operationId: hy_companybranch#UpdateCompanyBranch
      parameters:
      - description: Company detail ID
        in: path
        name: ID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateCompanyBranchHyCompanybranchPayload'
      produces:
      - application/vnd.company+json
      - application/vnd.goa.error
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UpdateCompanyBranch hy_companybranch
      tags:
      - hy_companybranch
  /api/tech:
    get:
      description: |-
        List all techs

        Required security scopes:
          * `api:access`
      operationId: hy_tech#TechList
      produces:
      - application/vnd.goa.error
      - application/vnd.tech+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TechCollection'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: TechList hy_tech
      tags:
      - hy_tech
    post:
      description: |-
        Create new tech

        Required security scopes:
          * `api:access`
      operationId: hy_tech#CreateTech
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateTechHyTechPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.tech+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tech'
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CreateTech hy_tech
      tags:
      - hy_tech
  /api/tech/{techID}:
    delete:
      description: |-
        Delete tech

        Required security scopes:
          * `api:access`
      operationId: hy_tech#DeleteTech
      parameters:
      - description: Tech ID
        in: path
        name: techID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.tech+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tech'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: DeleteTech hy_tech
      tags:
      - hy_tech
    get:
      description: |-
        Retrieve tech with given tech id

        Required security scopes:
          * `api:access`
      operationId: hy_tech#GetTech
      parameters:
      - description: Tech ID
        in: path
        name: techID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.tech+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tech'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetTech hy_tech
      tags:
      - hy_tech
    put:
      description: |-
        Change tech properties

        Required security scopes:
          * `api:access`
      operationId: hy_tech#UpdateTech
      parameters:
      - description: Tech ID
        in: path
        name: techID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateTechHyTechPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.tech+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tech'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UpdateTech hy_tech
      tags:
      - hy_tech
  /api/user:
    get:
      description: |-
        Retrieve all users.

        Required security scopes:
          * `api:access`
      operationId: hy_user#UserList
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserCollection'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UserList hy_user
      tags:
      - hy_user
    post:
      description: |-
        Create new user

        Required security scopes:
          * `api:access`
      operationId: hy_user#CreateUser
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/CreateUserHyUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: CreateUser hy_user
      tags:
      - hy_user
  /api/user/{userID}:
    delete:
      description: "Delete user \n\nRequired security scopes:\n  * `api:access`"
      operationId: hy_user#DeleteUser
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: DeleteUser hy_user
      tags:
      - hy_user
    get:
      description: |-
        Retrieve user with given id.

        Required security scopes:
          * `api:access`
      operationId: hy_user#GetUser
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetUser hy_user
      tags:
      - hy_user
    put:
      description: |-
        Change user properties

        Required security scopes:
          * `api:access`
      operationId: hy_user#UpdateUser
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UpdateUserHyUserPayload'
      produces:
      - application/vnd.goa.error
      - application/vnd.user+json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: UpdateUser hy_user
      tags:
      - hy_user
  /api/user/{userID}/disliketech:
    get:
      description: |-
        Retrieve user's dislike techs.

        Required security scopes:
          * `api:access`
      operationId: hy_usertech#GetUserDislikeTech
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.usertech+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UsertechCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetUserDislikeTech hy_usertech
      tags:
      - hy_usertech
  /api/user/{userID}/liketech:
    get:
      description: |-
        Retrieve user's favorite techs.

        Required security scopes:
          * `api:access`
      operationId: hy_usertech#GetUserLikeTech
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.usertech+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UsertechCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetUserLikeTech hy_usertech
      tags:
      - hy_usertech
  /api/user/{userID}/workhistory:
    get:
      description: |-
        Retrieve user's work history.

        Required security scopes:
          * `api:access`
      operationId: hy_userWorkHistory#GetUserWorkHistory
      parameters:
      - description: User ID
        in: path
        minimum: 1
        name: userID
        required: true
        type: integer
      produces:
      - application/vnd.goa.error
      - application/vnd.userworkhistory+json; type=collection
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserworkhistoryCollection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      schemes:
      - http
      security:
      - jwt:
        - api:access
      summary: GetUserWorkHistory hy_userWorkHistory
      tags:
      - hy_userWorkHistory
  /swagger-ui/{filepath}:
    get:
      operationId: public#/swagger-ui/*filepath
      parameters:
      - description: Relative file path
        in: path
        name: filepath
        required: true
        type: string
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
        "404":
          description: File not found
          schema:
            $ref: '#/definitions/error'
      schemes:
      - http
      summary: Download resources/swagger-ui/dist/
  /swagger.json:
    get:
      operationId: public#/swagger.json
      responses:
        "200":
          description: File downloaded
          schema:
            type: file
      schemes:
      - http
      summary: Download goa/swagger/swagger.json
produces:
- application/json
- application/xml
- application/gob
- application/x-gob
responses:
  Created:
    description: Created
  NoContent:
    description: No Content
  NotFound:
    description: Not Found
  OK:
    description: OK
    schema:
      $ref: '#/definitions/Company'
  Unauthorized:
    description: Unauthorized
schemes:
- http
securityDefinitions:
  jwt:
    description: |2-


      **Security Scopes**:
        * `api:access`: API access
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
